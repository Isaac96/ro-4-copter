
Flight_CTRL_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  0000858c  00008640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000858c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a1  00800246  00800246  00008786  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00008786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000004e0  00000000  00000000  00008789  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000007ba  00000000  00000000  00008c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f19  00000000  00000000  00009423  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024f4  00000000  00000000  0000f33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b66  00000000  00000000  00011830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  00015398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e5b  00000000  00000000  00015a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c6c  00000000  00000000  000168d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  0001953f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__ctors_end>
       4:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
       8:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
       c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      10:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      14:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      18:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      1c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      20:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      24:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      28:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      2c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      30:	0c 94 ce 32 	jmp	0x659c	; 0x659c <__vector_12>
      34:	0c 94 85 20 	jmp	0x410a	; 0x410a <__vector_13>
      38:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      3c:	0c 94 74 33 	jmp	0x66e8	; 0x66e8 <__vector_15>
      40:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__vector_16>
      44:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__vector_17>
      48:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      4c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      50:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__vector_20>
      54:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      58:	0c 94 08 31 	jmp	0x6210	; 0x6210 <__vector_22>
      5c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      60:	0c 94 a2 2a 	jmp	0x5544	; 0x5544 <__vector_24>
      64:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      68:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      6c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      70:	0c 94 f3 31 	jmp	0x63e6	; 0x63e6 <__vector_28>
      74:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__bad_interrupt>
      78:	0c 94 a1 31 	jmp	0x6342	; 0x6342 <__vector_30>
      7c:	61 30       	cpi	r22, 0x01	; 1
      7e:	55 30       	cpi	r21, 0x05	; 5
      80:	49 30       	cpi	r20, 0x09	; 9
      82:	3d 30       	cpi	r19, 0x0D	; 13
      84:	31 30       	cpi	r19, 0x01	; 1
      86:	25 30       	cpi	r18, 0x05	; 5
      88:	19 30       	cpi	r17, 0x09	; 9
      8a:	0d 30       	cpi	r16, 0x0D	; 13
      8c:	0a 30       	cpi	r16, 0x0A	; 10
      8e:	fe 2f       	mov	r31, r30
      90:	f2 2f       	mov	r31, r18
      92:	e6 2f       	mov	r30, r22
      94:	da 2f       	mov	r29, r26
      96:	ce 2f       	mov	r28, r30
      98:	c2 2f       	mov	r28, r18
      9a:	b6 2f       	mov	r27, r22
      9c:	af 2f       	mov	r26, r31
      9e:	a7 2f       	mov	r26, r23
      a0:	9f 2f       	mov	r25, r31
      a2:	97 2f       	mov	r25, r23
      a4:	8f 2f       	mov	r24, r31
      a6:	87 2f       	mov	r24, r23
      a8:	7f 2f       	mov	r23, r31
      aa:	77 2f       	mov	r23, r23
      ac:	6f 2f       	mov	r22, r31
      ae:	67 2f       	mov	r22, r23
      b0:	5f 2f       	mov	r21, r31
      b2:	57 2f       	mov	r21, r23
      b4:	4f 2f       	mov	r20, r31
      b6:	47 2f       	mov	r20, r23
      b8:	3f 2f       	mov	r19, r31
      ba:	37 2f       	mov	r19, r23
      bc:	2f 2f       	mov	r18, r31
      be:	27 2f       	mov	r18, r23
      c0:	1f 2f       	mov	r17, r31
      c2:	17 2f       	mov	r17, r23
      c4:	0f 2f       	mov	r16, r31
      c6:	07 2f       	mov	r16, r23
      c8:	ff 2e       	mov	r15, r31
      ca:	f7 2e       	mov	r15, r23
      cc:	ef 2e       	mov	r14, r31
      ce:	e7 2e       	mov	r14, r23
      d0:	df 2e       	mov	r13, r31
      d2:	d7 2e       	mov	r13, r23
      d4:	cf 2e       	mov	r12, r31
      d6:	c7 2e       	mov	r12, r23
      d8:	c3 2e       	mov	r12, r19
      da:	bf 2e       	mov	r11, r31
      dc:	bb 2e       	mov	r11, r27
      de:	b7 2e       	mov	r11, r23
      e0:	b3 2e       	mov	r11, r19
      e2:	ab 2e       	mov	r10, r27
      e4:	a3 2e       	mov	r10, r19
      e6:	99 2e       	mov	r9, r25

000000e8 <__c.1811>:
      e8:	70 70 6d 20 25 64 3a 20 25 64 20 2b 20 25 64 0d     ppm %d: %d + %d.
      f8:	0a 00                                               ..

000000fa <__c.1805>:
      fa:	73 65 6e 73 6f 72 20 25 64 3a 20 25 64 20 2d 20     sensor %d: %d - 
     10a:	25 64 0d 0a 00                                      %d...

0000010f <__c.2046>:
     10f:	0d 0a 74 65 73 74 5f 63 61 6c 63 0d 0a 00           ..test_calc...

0000011d <__c.1976>:
     11d:	70 70 6d 20 25 64 3a 20 25 64 0d 0a 00              ppm %d: %d...

0000012a <__c.1967>:
     12a:	63 61 6c 20 25 64 3a 20 25 64 0d 0a 00              cal %d: %d...

00000137 <__c.1964>:
     137:	0d 0a 74 65 73 74 5f 70 70 6d 0d 0a 00              ..test_ppm...

00000144 <__c.1940>:
     144:	61 64 63 20 25 64 3a 20 25 64 0d 0a 00              adc %d: %d...

00000151 <__c.1931>:
     151:	63 61 6c 20 25 64 3a 20 25 64 0d 0a 00              cal %d: %d...

0000015e <__c.1928>:
     15e:	0d 0a 74 65 73 74 5f 73 65 6e 73 6f 72 73 0d 0a     ..test_sensors..
	...

0000016f <__c.1911>:
     16f:	0d 0a 62 75 74 74 6f 6e 0d 0a 00                    ..button...

0000017a <__c.1907>:
     17a:	0d 0a 74 65 73 74 5f 73 65 72 0d 0a 00              ..test_ser...

00000187 <atan_tbl>:
     187:	00 00 00 00 9f 00 00 00 3e 01 00 00 dd 01 00 00     ........>.......
     197:	7d 02 00 00 1c 03 00 00 bb 03 00 00 5a 04 00 00     }...........Z...
     1a7:	f9 04 00 00 98 05 00 00 37 06 00 00 d6 06 00 00     ........7.......
     1b7:	75 07 00 00 14 08 00 00 b3 08 00 00 52 09 00 00     u...........R...
     1c7:	f1 09 00 00 90 0a 00 00 2e 0b 00 00 cd 0b 00 00     ................
     1d7:	6c 0c 00 00 0a 0d 00 00 a9 0d 00 00 48 0e 00 00     l...........H...
     1e7:	e6 0e 00 00 84 0f 00 00 23 10 00 00 c1 10 00 00     ........#.......
     1f7:	5f 11 00 00 fe 11 00 00 9c 12 00 00 3a 13 00 00     _...........:...
     207:	d8 13 00 00 75 14 00 00 13 15 00 00 b1 15 00 00     ....u...........
     217:	4f 16 00 00 ec 16 00 00 8a 17 00 00 27 18 00 00     O...........'...
     227:	c4 18 00 00 61 19 00 00 fe 19 00 00 9b 1a 00 00     ....a...........
     237:	38 1b 00 00 d5 1b 00 00 72 1c 00 00 0e 1d 00 00     8.......r.......
     247:	ab 1d 00 00 47 1e 00 00 e3 1e 00 00 7f 1f 00 00     ....G...........
     257:	1b 20 00 00 b7 20 00 00 53 21 00 00 ee 21 00 00     . ... ..S!...!..
     267:	8a 22 00 00 25 23 00 00 c0 23 00 00 5b 24 00 00     ."..%#...#..[$..
     277:	f6 24 00 00 91 25 00 00 2c 26 00 00 c6 26 00 00     .$...%..,&...&..
     287:	61 27 00 00 fb 27 00 00 95 28 00 00 2f 29 00 00     a'...'...(../)..
     297:	c9 29 00 00 62 2a 00 00 fc 2a 00 00 95 2b 00 00     .)..b*...*...+..
     2a7:	2e 2c 00 00 c7 2c 00 00 60 2d 00 00 f8 2d 00 00     .,...,..`-...-..
     2b7:	91 2e 00 00 29 2f 00 00 c1 2f 00 00 59 30 00 00     ....)/.../..Y0..
     2c7:	f1 30 00 00 88 31 00 00 20 32 00 00 b7 32 00 00     .0...1.. 2...2..
     2d7:	4e 33 00 00 e5 33 00 00 7c 34 00 00 12 35 00 00     N3...3..|4...5..
     2e7:	a8 35 00 00 3e 36 00 00 d4 36 00 00 6a 37 00 00     .5..>6...6..j7..
     2f7:	ff 37 00 00 95 38 00 00 2a 39 00 00 bf 39 00 00     .7...8..*9...9..
     307:	53 3a 00 00 e8 3a 00 00 7c 3b 00 00 10 3c 00 00     S:...:..|;...<..
     317:	a4 3c 00 00 38 3d 00 00 cb 3d 00 00 5e 3e 00 00     .<..8=...=..^>..
     327:	f1 3e 00 00 84 3f 00 00 17 40 00 00 a9 40 00 00     .>...?...@...@..
     337:	3b 41 00 00 cd 41 00 00 5f 42 00 00 f0 42 00 00     ;A...A.._B...B..
     347:	81 43 00 00 12 44 00 00 a3 44 00 00 34 45 00 00     .C...D...D..4E..
     357:	c4 45 00 00 54 46 00 00 e4 46 00 00 74 47 00 00     .E..TF...F..tG..
     367:	03 48 00 00 92 48 00 00 21 49 00 00 b0 49 00 00     .H...H..!I...I..
     377:	3e 4a 00 00 cc 4a 00 00 5a 4b 00 00 e8 4b 00 00     >J...J..ZK...K..
     387:	75 4c 00 00 02 4d 00 00 8f 4d 00 00 1c 4e 00 00     uL...M...M...N..
     397:	a8 4e 00 00 34 4f 00 00 c0 4f 00 00 4c 50 00 00     .N..4O...O..LP..
     3a7:	d7 50 00 00 63 51 00 00 ed 51 00 00 78 52 00 00     .P..cQ...Q..xR..
     3b7:	03 53 00 00 8d 53 00 00 16 54 00 00 a0 54 00 00     .S...S...T...T..
     3c7:	29 55 00 00 b2 55 00 00 3b 56 00 00 c4 56 00 00     )U...U..;V...V..
     3d7:	4c 57 00 00 d4 57 00 00 5c 58 00 00 e3 58 00 00     LW...W..\X...X..
     3e7:	6b 59 00 00 f1 59 00 00 78 5a 00 00 ff 5a 00 00     kY...Y..xZ...Z..
     3f7:	85 5b 00 00 0b 5c 00 00 90 5c 00 00 15 5d 00 00     .[...\...\...]..
     407:	9a 5d 00 00 1f 5e 00 00 a4 5e 00 00 28 5f 00 00     .]...^...^..(_..
     417:	ac 5f 00 00 30 60 00 00 b3 60 00 00 36 61 00 00     ._..0`...`..6a..
     427:	b9 61 00 00 3b 62 00 00 be 62 00 00 40 63 00 00     .a..;b...b..@c..
     437:	c1 63 00 00 43 64 00 00 c4 64 00 00 45 65 00 00     .c..Cd...d..Ee..
     447:	c5 65 00 00 46 66 00 00 c6 66 00 00 46 67 00 00     .e..Ff...f..Fg..
     457:	c5 67 00 00 44 68 00 00 c3 68 00 00 42 69 00 00     .g..Dh...h..Bi..
     467:	c0 69 00 00 3e 6a 00 00 bc 6a 00 00 39 6b 00 00     .i..>j...j..9k..
     477:	b7 6b 00 00 33 6c 00 00 b0 6c 00 00 2c 6d 00 00     .k..3l...l..,m..
     487:	a8 6d 00 00 24 6e 00 00 a0 6e 00 00 1b 6f 00 00     .m..$n...n...o..
     497:	96 6f 00 00 10 70 00 00 8b 70 00 00 05 71 00 00     .o...p...p...q..
     4a7:	7f 71 00 00 f8 71 00 00 71 72 00 00 ea 72 00 00     .q...q..qr...r..
     4b7:	63 73 00 00 db 73 00 00 53 74 00 00 cb 74 00 00     cs...s..St...t..
     4c7:	42 75 00 00 ba 75 00 00 30 76 00 00 a7 76 00 00     Bu...u..0v...v..
     4d7:	1d 77 00 00 93 77 00 00 09 78 00 00 7f 78 00 00     .w...w...x...x..
     4e7:	f4 78 00 00 69 79 00 00 dd 79 00 00 52 7a 00 00     .x..iy...y..Rz..
     4f7:	c6 7a 00 00 39 7b 00 00 ad 7b 00 00 20 7c 00 00     .z..9{...{.. |..
     507:	93 7c 00 00 05 7d 00 00 78 7d 00 00 ea 7d 00 00     .|...}..x}...}..
     517:	5b 7e 00 00 cd 7e 00 00 3e 7f 00 00 af 7f 00 00     [~...~..>.......
     527:	20 80 00 00 90 80 00 00 00 81 00 00 70 81 00 00      ...........p...
     537:	df 81 00 00 4e 82 00 00 bd 82 00 00 2c 83 00 00     ....N.......,...
     547:	9a 83 00 00 08 84 00 00 76 84 00 00 e3 84 00 00     ........v.......
     557:	51 85 00 00 bd 85 00 00 2a 86 00 00 96 86 00 00     Q.......*.......
     567:	03 87 00 00 6e 87 00 00 da 87 00 00 45 88 00 00     ....n.......E...
     577:	b0 88 00 00 1b 89 00 00 85 89 00 00 ef 89 00 00     ................
     587:	59 8a 00 00 c3 8a 00 00 2c 8b 00 00 95 8b 00 00     Y.......,.......
     597:	fe 8b 00 00 66 8c 00 00 ce 8c 00 00 36 8d 00 00     ....f.......6...
     5a7:	9e 8d 00 00 05 8e 00 00 6c 8e 00 00 d3 8e 00 00     ........l.......
     5b7:	3a 8f 00 00 a0 8f 00 00 06 90 00 00 6c 90 00 00     :...........l...
     5c7:	d1 90 00 00 36 91 00 00 9b 91 00 00 00 92 00 00     ....6...........
     5d7:	64 92 00 00 c8 92 00 00 2c 93 00 00 90 93 00 00     d.......,.......
     5e7:	f3 93 00 00 56 94 00 00 b9 94 00 00 1b 95 00 00     ....V...........
     5f7:	7e 95 00 00 df 95 00 00 41 96 00 00 a3 96 00 00     ~.......A.......
     607:	04 97 00 00 65 97 00 00 c5 97 00 00 26 98 00 00     ....e.......&...
     617:	86 98 00 00 e6 98 00 00 45 99 00 00 a5 99 00 00     ........E.......
     627:	04 9a 00 00 63 9a 00 00 c1 9a 00 00 20 9b 00 00     ....c....... ...
     637:	7e 9b 00 00 db 9b 00 00 39 9c 00 00 96 9c 00 00     ~.......9.......
     647:	f3 9c 00 00 50 9d 00 00 ad 9d 00 00 09 9e 00 00     ....P...........
     657:	65 9e 00 00 c1 9e 00 00 1c 9f 00 00 77 9f 00 00     e...........w...
     667:	d2 9f 00 00 2d a0 00 00 88 a0 00 00 e2 a0 00 00     ....-...........
     677:	3c a1 00 00 96 a1 00 00 ef a1 00 00 49 a2 00 00     <...........I...
     687:	a2 a2 00 00 fa a2 00 00 53 a3 00 00 ab a3 00 00     ........S.......
     697:	03 a4 00 00 5b a4 00 00 b3 a4 00 00 0a a5 00 00     ....[...........
     6a7:	61 a5 00 00 b8 a5 00 00 0e a6 00 00 65 a6 00 00     a...........e...
     6b7:	bb a6 00 00 11 a7 00 00 66 a7 00 00 bc a7 00 00     ........f.......
     6c7:	11 a8 00 00 66 a8 00 00 bb a8 00 00 0f a9 00 00     ....f...........
     6d7:	63 a9 00 00 b7 a9 00 00 0b aa 00 00 5f aa 00 00     c..........._...
     6e7:	b2 aa 00 00 05 ab 00 00 58 ab 00 00 ab ab 00 00     ........X.......
     6f7:	fd ab 00 00 4f ac 00 00 a1 ac 00 00 f3 ac 00 00     ....O...........
     707:	44 ad 00 00 96 ad 00 00 e7 ad 00 00 37 ae 00 00     D...........7...
     717:	88 ae 00 00 d8 ae 00 00 28 af 00 00 78 af 00 00     ........(...x...
     727:	c8 af 00 00                                         ....

0000072b <__c.1846>:
     72b:	35 33 2c 20 75 69 6e 74 33 32 5f 74 20 28 25 64     53, uint32_t (%d
     73b:	29 2c 20 62 75 74 74 6f 6e 5f 68 6f 6c 64 5f 64     ), button_hold_d
     74b:	6f 77 6e 3a 20 25 64 0d 0a 00                       own: %d...

00000755 <__c.1844>:
     755:	35 32 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     52, int32_t (%d)
     765:	2c 20 63 6f 6d 70 5f 66 69 6c 74 65 72 5f 77 3a     , comp_filter_w:
     775:	20 25 64 0d 0a 00                                    %d...

0000077b <__c.1842>:
     77b:	35 31 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     51, int32_t (%d)
     78b:	2c 20 64 65 6c 74 61 5f 74 69 6d 65 5f 63 6f 6e     , delta_time_con
     79b:	73 74 3a 20 25 64 0d 0a 00                          st: %d...

000007a4 <__c.1840>:
     7a4:	35 30 2c 20 75 69 6e 74 38 5f 74 20 28 25 64 29     50, uint8_t (%d)
     7b4:	2c 20 75 6e 6c 6f 63 6b 5f 70 70 6d 5f 63 68 61     , unlock_ppm_cha
     7c4:	6e 3a 20 25 64 0d 0a 00                             n: %d...

000007cc <__c.1838>:
     7cc:	34 39 2c 20 75 69 6e 74 38 5f 74 20 28 25 64 29     49, uint8_t (%d)
     7dc:	2c 20 72 6f 6c 6c 5f 70 70 6d 5f 63 68 61 6e 3a     , roll_ppm_chan:
     7ec:	20 25 64 0d 0a 00                                    %d...

000007f2 <__c.1836>:
     7f2:	34 38 2c 20 75 69 6e 74 38 5f 74 20 28 25 64 29     48, uint8_t (%d)
     802:	2c 20 70 69 74 63 68 5f 70 70 6d 5f 63 68 61 6e     , pitch_ppm_chan
     812:	3a 20 25 64 0d 0a 00                                : %d...

00000819 <__c.1834>:
     819:	34 37 2c 20 75 69 6e 74 38 5f 74 20 28 25 64 29     47, uint8_t (%d)
     829:	2c 20 74 68 72 6f 74 74 6c 65 5f 70 70 6d 5f 63     , throttle_ppm_c
     839:	68 61 6e 3a 20 25 64 0d 0a 00                       han: %d...

00000843 <__c.1832>:
     843:	34 36 2c 20 75 69 6e 74 38 5f 74 20 28 25 64 29     46, uint8_t (%d)
     853:	2c 20 79 61 77 5f 70 70 6d 5f 63 68 61 6e 3a 20     , yaw_ppm_chan: 
     863:	25 64 0d 0a 00                                      %d...

00000868 <__c.1830>:
     868:	34 35 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     45, int32_t (%d)
     878:	2c 20 79 61 77 5f 6b 64 3a 20 25 64 0d 0a 00        , yaw_kd: %d...

00000887 <__c.1828>:
     887:	34 34 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     44, int32_t (%d)
     897:	2c 20 79 61 77 5f 6b 69 3a 20 25 64 0d 0a 00        , yaw_ki: %d...

000008a6 <__c.1826>:
     8a6:	34 33 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     43, int32_t (%d)
     8b6:	2c 20 79 61 77 5f 6b 70 3a 20 25 64 0d 0a 00        , yaw_kp: %d...

000008c5 <__c.1824>:
     8c5:	34 32 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     42, int32_t (%d)
     8d5:	2c 20 70 69 74 63 68 5f 72 61 74 65 5f 6b 64 3a     , pitch_rate_kd:
     8e5:	20 25 64 0d 0a 00                                    %d...

000008eb <__c.1822>:
     8eb:	34 31 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     41, int32_t (%d)
     8fb:	2c 20 70 69 74 63 68 5f 72 61 74 65 5f 6b 69 3a     , pitch_rate_ki:
     90b:	20 25 64 0d 0a 00                                    %d...

00000911 <__c.1820>:
     911:	34 30 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     40, int32_t (%d)
     921:	2c 20 70 69 74 63 68 5f 72 61 74 65 5f 6b 70 3a     , pitch_rate_kp:
     931:	20 25 64 0d 0a 00                                    %d...

00000937 <__c.1818>:
     937:	33 39 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     39, int32_t (%d)
     947:	2c 20 72 6f 6c 6c 5f 72 61 74 65 5f 6b 64 3a 20     , roll_rate_kd: 
     957:	25 64 0d 0a 00                                      %d...

0000095c <__c.1816>:
     95c:	33 38 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     38, int32_t (%d)
     96c:	2c 20 72 6f 6c 6c 5f 72 61 74 65 5f 6b 69 3a 20     , roll_rate_ki: 
     97c:	25 64 0d 0a 00                                      %d...

00000981 <__c.1814>:
     981:	33 37 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     37, int32_t (%d)
     991:	2c 20 72 6f 6c 6c 5f 72 61 74 65 5f 6b 70 3a 20     , roll_rate_kp: 
     9a1:	25 64 0d 0a 00                                      %d...

000009a6 <__c.1812>:
     9a6:	33 36 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     36, int32_t (%d)
     9b6:	2c 20 70 69 74 63 68 5f 6c 65 76 65 6c 5f 6b 64     , pitch_level_kd
     9c6:	3a 20 25 64 0d 0a 00                                : %d...

000009cd <__c.1810>:
     9cd:	33 35 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     35, int32_t (%d)
     9dd:	2c 20 70 69 74 63 68 5f 6c 65 76 65 6c 5f 6b 69     , pitch_level_ki
     9ed:	3a 20 25 64 0d 0a 00                                : %d...

000009f4 <__c.1808>:
     9f4:	33 34 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     34, int32_t (%d)
     a04:	2c 20 70 69 74 63 68 5f 6c 65 76 65 6c 5f 6b 70     , pitch_level_kp
     a14:	3a 20 25 64 0d 0a 00                                : %d...

00000a1b <__c.1806>:
     a1b:	33 33 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     33, int32_t (%d)
     a2b:	2c 20 72 6f 6c 6c 5f 6c 65 76 65 6c 5f 6b 64 3a     , roll_level_kd:
     a3b:	20 25 64 0d 0a 00                                    %d...

00000a41 <__c.1804>:
     a41:	33 32 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     32, int32_t (%d)
     a51:	2c 20 72 6f 6c 6c 5f 6c 65 76 65 6c 5f 6b 69 3a     , roll_level_ki:
     a61:	20 25 64 0d 0a 00                                    %d...

00000a67 <__c.1802>:
     a67:	33 31 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     31, int32_t (%d)
     a77:	2c 20 72 6f 6c 6c 5f 6c 65 76 65 6c 5f 6b 70 3a     , roll_level_kp:
     a87:	20 25 64 0d 0a 00                                    %d...

00000a8d <__c.1800>:
     a8d:	33 30 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     30, int32_t (%d)
     a9d:	2c 20 74 68 72 6f 74 74 6c 65 5f 68 6f 76 65 72     , throttle_hover
     aad:	3a 20 25 64 0d 0a 00                                : %d...

00000ab4 <__c.1798>:
     ab4:	32 39 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     29, int32_t (%d)
     ac4:	2c 20 74 68 72 6f 74 74 6c 65 5f 70 70 6d 5f 73     , throttle_ppm_s
     ad4:	63 61 6c 65 3a 20 25 64 0d 0a 00                    cale: %d...

00000adf <__c.1796>:
     adf:	32 38 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     28, int32_t (%d)
     aef:	2c 20 79 61 77 5f 70 70 6d 5f 73 63 61 6c 65 3a     , yaw_ppm_scale:
     aff:	20 25 64 0d 0a 00                                    %d...

00000b05 <__c.1794>:
     b05:	32 37 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     27, int32_t (%d)
     b15:	2c 20 70 69 74 63 68 5f 70 70 6d 5f 73 63 61 6c     , pitch_ppm_scal
     b25:	65 3a 20 25 64 0d 0a 00                             e: %d...

00000b2d <__c.1792>:
     b2d:	32 36 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     26, int32_t (%d)
     b3d:	2c 20 72 6f 6c 6c 5f 70 70 6d 5f 73 63 61 6c 65     , roll_ppm_scale
     b4d:	3a 20 25 64 0d 0a 00                                : %d...

00000b54 <__c.1790>:
     b54:	32 35 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     25, int32_t (%d)
     b64:	2c 20 74 68 72 6f 74 74 6c 65 5f 70 70 6d 5f 63     , throttle_ppm_c
     b74:	65 6e 74 65 72 3a 20 25 64 0d 0a 00                 enter: %d...

00000b80 <__c.1788>:
     b80:	32 34 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     24, int32_t (%d)
     b90:	2c 20 79 61 77 5f 70 70 6d 5f 63 65 6e 74 65 72     , yaw_ppm_center
     ba0:	3a 20 25 64 0d 0a 00                                : %d...

00000ba7 <__c.1786>:
     ba7:	32 33 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     23, int32_t (%d)
     bb7:	2c 20 70 69 74 63 68 5f 70 70 6d 5f 63 65 6e 74     , pitch_ppm_cent
     bc7:	65 72 3a 20 25 64 0d 0a 00                          er: %d...

00000bd0 <__c.1784>:
     bd0:	32 32 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     22, int32_t (%d)
     be0:	2c 20 72 6f 6c 6c 5f 70 70 6d 5f 63 65 6e 74 65     , roll_ppm_cente
     bf0:	72 3a 20 25 64 0d 0a 00                             r: %d...

00000bf8 <__c.1782>:
     bf8:	32 31 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     21, int32_t (%d)
     c08:	2c 20 72 6f 6c 6c 5f 67 79 72 6f 5f 74 6f 5f 72     , roll_gyro_to_r
     c18:	61 74 65 3a 20 25 64 0d 0a 00                       ate: %d...

00000c22 <__c.1780>:
     c22:	32 30 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     20, int32_t (%d)
     c32:	2c 20 70 69 74 63 68 5f 67 79 72 6f 5f 74 6f 5f     , pitch_gyro_to_
     c42:	72 61 74 65 3a 20 25 64 0d 0a 00                    rate: %d...

00000c4d <__c.1778>:
     c4d:	31 39 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     19, int32_t (%d)
     c5d:	2c 20 72 6f 6c 6c 5f 61 6e 67 6c 65 5f 6f 66 66     , roll_angle_off
     c6d:	73 65 74 3a 20 25 64 0d 0a 00                       set: %d...

00000c77 <__c.1776>:
     c77:	31 38 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     18, int32_t (%d)
     c87:	2c 20 70 69 74 63 68 5f 61 6e 67 6c 65 5f 6f 66     , pitch_angle_of
     c97:	66 73 65 74 3a 20 25 64 0d 0a 00                    fset: %d...

00000ca2 <__c.1774>:
     ca2:	31 37 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     17, int32_t (%d)
     cb2:	2c 20 76 65 72 74 5f 61 63 63 65 6c 5f 74 6f 70     , vert_accel_top
     cc2:	3a 20 25 64 0d 0a 00                                : %d...

00000cc9 <__c.1772>:
     cc9:	31 36 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     16, int32_t (%d)
     cd9:	2c 20 76 65 72 74 5f 61 63 63 65 6c 5f 62 6f 74     , vert_accel_bot
     ce9:	3a 20 25 64 0d 0a 00                                : %d...

00000cf0 <__c.1770>:
     cf0:	31 35 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     15, int32_t (%d)
     d00:	2c 20 70 69 74 63 68 5f 61 63 63 65 6c 5f 74 6f     , pitch_accel_to
     d10:	70 3a 20 25 64 0d 0a 00                             p: %d...

00000d18 <__c.1768>:
     d18:	31 34 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     14, int32_t (%d)
     d28:	2c 20 70 69 74 63 68 5f 61 63 63 65 6c 5f 63 65     , pitch_accel_ce
     d38:	6e 74 65 72 3a 20 25 64 0d 0a 00                    nter: %d...

00000d43 <__c.1766>:
     d43:	31 33 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     13, int32_t (%d)
     d53:	2c 20 70 69 74 63 68 5f 61 63 63 65 6c 5f 62 6f     , pitch_accel_bo
     d63:	74 3a 20 25 64 0d 0a 00                             t: %d...

00000d6b <__c.1764>:
     d6b:	31 32 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     12, int32_t (%d)
     d7b:	2c 20 72 6f 6c 6c 5f 61 63 63 65 6c 5f 74 6f 70     , roll_accel_top
     d8b:	3a 20 25 64 0d 0a 00                                : %d...

00000d92 <__c.1762>:
     d92:	31 31 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     11, int32_t (%d)
     da2:	2c 20 72 6f 6c 6c 5f 61 63 63 65 6c 5f 63 65 6e     , roll_accel_cen
     db2:	74 65 72 3a 20 25 64 0d 0a 00                       ter: %d...

00000dbc <__c.1760>:
     dbc:	31 30 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29     10, int32_t (%d)
     dcc:	2c 20 72 6f 6c 6c 5f 61 63 63 65 6c 5f 62 6f 74     , roll_accel_bot
     ddc:	3a 20 25 64 0d 0a 00                                : %d...

00000de3 <__c.1758>:
     de3:	39 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     9, int32_t (%d),
     df3:	20 79 61 77 5f 67 79 72 6f 5f 73 63 61 6c 65 3a      yaw_gyro_scale:
     e03:	20 25 64 0d 0a 00                                    %d...

00000e09 <__c.1756>:
     e09:	38 2c 20 75 69 6e 74 38 5f 74 20 28 25 64 29 2c     8, uint8_t (%d),
     e19:	20 6d 6f 74 6f 72 5f 6d 6f 64 65 3a 20 25 64 0d      motor_mode: %d.
     e29:	0a 00                                               ..

00000e2b <__c.1754>:
     e2b:	37 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     7, int32_t (%d),
     e3b:	20 72 5f 6d 6f 74 5f 73 63 61 6c 65 3a 20 25 64      r_mot_scale: %d
     e4b:	0d 0a 00                                            ...

00000e4e <__c.1752>:
     e4e:	36 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     6, int32_t (%d),
     e5e:	20 6c 5f 6d 6f 74 5f 73 63 61 6c 65 3a 20 25 64      l_mot_scale: %d
     e6e:	0d 0a 00                                            ...

00000e71 <__c.1750>:
     e71:	35 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     5, int32_t (%d),
     e81:	20 62 5f 6d 6f 74 5f 73 63 61 6c 65 3a 20 25 64      b_mot_scale: %d
     e91:	0d 0a 00                                            ...

00000e94 <__c.1748>:
     e94:	34 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     4, int32_t (%d),
     ea4:	20 66 5f 6d 6f 74 5f 73 63 61 6c 65 3a 20 25 64      f_mot_scale: %d
     eb4:	0d 0a 00                                            ...

00000eb7 <__c.1746>:
     eb7:	33 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     3, int32_t (%d),
     ec7:	20 72 5f 6d 6f 74 5f 62 6f 74 3a 20 25 64 0d 0a      r_mot_bot: %d..
	...

00000ed8 <__c.1744>:
     ed8:	32 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     2, int32_t (%d),
     ee8:	20 6c 5f 6d 6f 74 5f 62 6f 74 3a 20 25 64 0d 0a      l_mot_bot: %d..
	...

00000ef9 <__c.1742>:
     ef9:	31 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     1, int32_t (%d),
     f09:	20 62 5f 6d 6f 74 5f 62 6f 74 3a 20 25 64 0d 0a      b_mot_bot: %d..
	...

00000f1a <__c.1740>:
     f1a:	30 2c 20 69 6e 74 33 32 5f 74 20 28 25 64 29 2c     0, int32_t (%d),
     f2a:	20 66 5f 6d 6f 74 5f 62 6f 74 3a 20 25 64 0d 0a      f_mot_bot: %d..
	...

00000f3c <__ctors_end>:
     f3c:	11 24       	eor	r1, r1
     f3e:	1f be       	out	0x3f, r1	; 63
     f40:	cf ef       	ldi	r28, 0xFF	; 255
     f42:	d0 e1       	ldi	r29, 0x10	; 16
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	cd bf       	out	0x3d, r28	; 61

00000f48 <__do_copy_data>:
     f48:	12 e0       	ldi	r17, 0x02	; 2
     f4a:	a0 e0       	ldi	r26, 0x00	; 0
     f4c:	b1 e0       	ldi	r27, 0x01	; 1
     f4e:	ec e8       	ldi	r30, 0x8C	; 140
     f50:	f5 e8       	ldi	r31, 0x85	; 133
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <.do_copy_data_start>

00000f54 <.do_copy_data_loop>:
     f54:	05 90       	lpm	r0, Z+
     f56:	0d 92       	st	X+, r0

00000f58 <.do_copy_data_start>:
     f58:	a6 34       	cpi	r26, 0x46	; 70
     f5a:	b1 07       	cpc	r27, r17
     f5c:	d9 f7       	brne	.-10     	; 0xf54 <.do_copy_data_loop>

00000f5e <__do_clear_bss>:
     f5e:	13 e0       	ldi	r17, 0x03	; 3
     f60:	a6 e4       	ldi	r26, 0x46	; 70
     f62:	b2 e0       	ldi	r27, 0x02	; 2
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <.do_clear_bss_start>

00000f66 <.do_clear_bss_loop>:
     f66:	1d 92       	st	X+, r1

00000f68 <.do_clear_bss_start>:
     f68:	a7 3e       	cpi	r26, 0xE7	; 231
     f6a:	b1 07       	cpc	r27, r17
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <.do_clear_bss_loop>
     f6e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <main>
     f72:	0c 94 c4 42 	jmp	0x8588	; 0x8588 <_exit>

00000f76 <__bad_interrupt>:
     f76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f7a <__fixunssfsi>:
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	7b 01       	movw	r14, r22
     f84:	8c 01       	movw	r16, r24
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	5f e4       	ldi	r21, 0x4F	; 79
     f8e:	0e 94 de 11 	call	0x23bc	; 0x23bc <__gesf2>
     f92:	88 23       	and	r24, r24
     f94:	8c f0       	brlt	.+34     	; 0xfb8 <__fixunssfsi+0x3e>
     f96:	c8 01       	movw	r24, r16
     f98:	b7 01       	movw	r22, r14
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	5f e4       	ldi	r21, 0x4F	; 79
     fa2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__subsf3>
     fa6:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixsfsi>
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	20 50       	subi	r18, 0x00	; 0
     fb0:	30 40       	sbci	r19, 0x00	; 0
     fb2:	40 40       	sbci	r20, 0x00	; 0
     fb4:	50 48       	sbci	r21, 0x80	; 128
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <__fixunssfsi+0x4a>
     fb8:	c8 01       	movw	r24, r16
     fba:	b7 01       	movw	r22, r14
     fbc:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixsfsi>
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	b9 01       	movw	r22, r18
     fc6:	ca 01       	movw	r24, r20
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <__udivdi3>:
     fd2:	ae e5       	ldi	r26, 0x5E	; 94
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef ee       	ldi	r30, 0xEF	; 239
     fd8:	f7 e0       	ldi	r31, 0x07	; 7
     fda:	0c 94 15 3d 	jmp	0x7a2a	; 0x7a2a <__prologue_saves__>
     fde:	a8 e0       	ldi	r26, 0x08	; 8
     fe0:	4e 01       	movw	r8, r28
     fe2:	08 94       	sec
     fe4:	81 1c       	adc	r8, r1
     fe6:	91 1c       	adc	r9, r1
     fe8:	f4 01       	movw	r30, r8
     fea:	6a 2e       	mov	r6, r26
     fec:	11 92       	st	Z+, r1
     fee:	6a 94       	dec	r6
     ff0:	e9 f7       	brne	.-6      	; 0xfec <__udivdi3+0x1a>
     ff2:	29 83       	std	Y+1, r18	; 0x01
     ff4:	3a 83       	std	Y+2, r19	; 0x02
     ff6:	4b 83       	std	Y+3, r20	; 0x03
     ff8:	5c 83       	std	Y+4, r21	; 0x04
     ffa:	6d 83       	std	Y+5, r22	; 0x05
     ffc:	7e 83       	std	Y+6, r23	; 0x06
     ffe:	8f 83       	std	Y+7, r24	; 0x07
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	ce 01       	movw	r24, r28
    1004:	09 96       	adiw	r24, 0x09	; 9
    1006:	fc 01       	movw	r30, r24
    1008:	11 92       	st	Z+, r1
    100a:	aa 95       	dec	r26
    100c:	e9 f7       	brne	.-6      	; 0x1008 <__udivdi3+0x36>
    100e:	a9 86       	std	Y+9, r10	; 0x09
    1010:	ba 86       	std	Y+10, r11	; 0x0a
    1012:	cb 86       	std	Y+11, r12	; 0x0b
    1014:	dc 86       	std	Y+12, r13	; 0x0c
    1016:	ed 86       	std	Y+13, r14	; 0x0d
    1018:	fe 86       	std	Y+14, r15	; 0x0e
    101a:	0f 87       	std	Y+15, r16	; 0x0f
    101c:	18 8b       	std	Y+16, r17	; 0x10
    101e:	29 84       	ldd	r2, Y+9	; 0x09
    1020:	3a 84       	ldd	r3, Y+10	; 0x0a
    1022:	4b 84       	ldd	r4, Y+11	; 0x0b
    1024:	5c 84       	ldd	r5, Y+12	; 0x0c
    1026:	ed 84       	ldd	r14, Y+13	; 0x0d
    1028:	fe 84       	ldd	r15, Y+14	; 0x0e
    102a:	0f 85       	ldd	r16, Y+15	; 0x0f
    102c:	18 89       	ldd	r17, Y+16	; 0x10
    102e:	69 80       	ldd	r6, Y+1	; 0x01
    1030:	7a 80       	ldd	r7, Y+2	; 0x02
    1032:	8b 80       	ldd	r8, Y+3	; 0x03
    1034:	9c 80       	ldd	r9, Y+4	; 0x04
    1036:	6d a6       	std	Y+45, r6	; 0x2d
    1038:	7e a6       	std	Y+46, r7	; 0x2e
    103a:	8f a6       	std	Y+47, r8	; 0x2f
    103c:	98 aa       	std	Y+48, r9	; 0x30
    103e:	6d 80       	ldd	r6, Y+5	; 0x05
    1040:	7e 80       	ldd	r7, Y+6	; 0x06
    1042:	8f 80       	ldd	r8, Y+7	; 0x07
    1044:	98 84       	ldd	r9, Y+8	; 0x08
    1046:	e1 14       	cp	r14, r1
    1048:	f1 04       	cpc	r15, r1
    104a:	01 05       	cpc	r16, r1
    104c:	11 05       	cpc	r17, r1
    104e:	09 f0       	breq	.+2      	; 0x1052 <__udivdi3+0x80>
    1050:	b3 c3       	rjmp	.+1894   	; 0x17b8 <__stack+0x6b9>
    1052:	62 14       	cp	r6, r2
    1054:	73 04       	cpc	r7, r3
    1056:	84 04       	cpc	r8, r4
    1058:	95 04       	cpc	r9, r5
    105a:	08 f0       	brcs	.+2      	; 0x105e <__udivdi3+0x8c>
    105c:	3d c1       	rjmp	.+634    	; 0x12d8 <__stack+0x1d9>
    105e:	00 e0       	ldi	r16, 0x00	; 0
    1060:	20 16       	cp	r2, r16
    1062:	00 e0       	ldi	r16, 0x00	; 0
    1064:	30 06       	cpc	r3, r16
    1066:	01 e0       	ldi	r16, 0x01	; 1
    1068:	40 06       	cpc	r4, r16
    106a:	00 e0       	ldi	r16, 0x00	; 0
    106c:	50 06       	cpc	r5, r16
    106e:	88 f4       	brcc	.+34     	; 0x1092 <__udivdi3+0xc0>
    1070:	1f ef       	ldi	r17, 0xFF	; 255
    1072:	21 16       	cp	r2, r17
    1074:	31 04       	cpc	r3, r1
    1076:	41 04       	cpc	r4, r1
    1078:	51 04       	cpc	r5, r1
    107a:	39 f0       	breq	.+14     	; 0x108a <__udivdi3+0xb8>
    107c:	30 f0       	brcs	.+12     	; 0x108a <__udivdi3+0xb8>
    107e:	48 e0       	ldi	r20, 0x08	; 8
    1080:	e4 2e       	mov	r14, r20
    1082:	f1 2c       	mov	r15, r1
    1084:	01 2d       	mov	r16, r1
    1086:	11 2d       	mov	r17, r1
    1088:	18 c0       	rjmp	.+48     	; 0x10ba <__udivdi3+0xe8>
    108a:	ee 24       	eor	r14, r14
    108c:	ff 24       	eor	r15, r15
    108e:	87 01       	movw	r16, r14
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <__udivdi3+0xe8>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	22 16       	cp	r2, r18
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	32 06       	cpc	r3, r18
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	42 06       	cpc	r4, r18
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	52 06       	cpc	r5, r18
    10a2:	30 f0       	brcs	.+12     	; 0x10b0 <__udivdi3+0xde>
    10a4:	38 e1       	ldi	r19, 0x18	; 24
    10a6:	e3 2e       	mov	r14, r19
    10a8:	f1 2c       	mov	r15, r1
    10aa:	01 2d       	mov	r16, r1
    10ac:	11 2d       	mov	r17, r1
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <__udivdi3+0xe8>
    10b0:	20 e1       	ldi	r18, 0x10	; 16
    10b2:	e2 2e       	mov	r14, r18
    10b4:	f1 2c       	mov	r15, r1
    10b6:	01 2d       	mov	r16, r1
    10b8:	11 2d       	mov	r17, r1
    10ba:	d2 01       	movw	r26, r4
    10bc:	c1 01       	movw	r24, r2
    10be:	0e 2c       	mov	r0, r14
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <__udivdi3+0xf8>
    10c2:	b6 95       	lsr	r27
    10c4:	a7 95       	ror	r26
    10c6:	97 95       	ror	r25
    10c8:	87 95       	ror	r24
    10ca:	0a 94       	dec	r0
    10cc:	d2 f7       	brpl	.-12     	; 0x10c2 <__udivdi3+0xf0>
    10ce:	88 5f       	subi	r24, 0xF8	; 248
    10d0:	9e 4f       	sbci	r25, 0xFE	; 254
    10d2:	dc 01       	movw	r26, r24
    10d4:	2c 91       	ld	r18, X
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	8e 19       	sub	r24, r14
    10e0:	9f 09       	sbc	r25, r15
    10e2:	a0 0b       	sbc	r26, r16
    10e4:	b1 0b       	sbc	r27, r17
    10e6:	7c 01       	movw	r14, r24
    10e8:	8d 01       	movw	r16, r26
    10ea:	e2 1a       	sub	r14, r18
    10ec:	f1 08       	sbc	r15, r1
    10ee:	01 09       	sbc	r16, r1
    10f0:	11 09       	sbc	r17, r1
    10f2:	e1 14       	cp	r14, r1
    10f4:	f1 04       	cpc	r15, r1
    10f6:	01 05       	cpc	r16, r1
    10f8:	11 05       	cpc	r17, r1
    10fa:	a1 f1       	breq	.+104    	; 0x1164 <__stack+0x65>
    10fc:	0e 2c       	mov	r0, r14
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__stack+0x9>
    1100:	22 0c       	add	r2, r2
    1102:	33 1c       	adc	r3, r3
    1104:	44 1c       	adc	r4, r4
    1106:	55 1c       	adc	r5, r5
    1108:	0a 94       	dec	r0
    110a:	d2 f7       	brpl	.-12     	; 0x1100 <__stack+0x1>
    110c:	a4 01       	movw	r20, r8
    110e:	93 01       	movw	r18, r6
    1110:	0e 2c       	mov	r0, r14
    1112:	04 c0       	rjmp	.+8      	; 0x111c <__stack+0x1d>
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	55 1f       	adc	r21, r21
    111c:	0a 94       	dec	r0
    111e:	d2 f7       	brpl	.-12     	; 0x1114 <__stack+0x15>
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	8e 19       	sub	r24, r14
    1126:	9f 09       	sbc	r25, r15
    1128:	6d a4       	ldd	r6, Y+45	; 0x2d
    112a:	7e a4       	ldd	r7, Y+46	; 0x2e
    112c:	8f a4       	ldd	r8, Y+47	; 0x2f
    112e:	98 a8       	ldd	r9, Y+48	; 0x30
    1130:	04 c0       	rjmp	.+8      	; 0x113a <__stack+0x3b>
    1132:	96 94       	lsr	r9
    1134:	87 94       	ror	r8
    1136:	77 94       	ror	r7
    1138:	67 94       	ror	r6
    113a:	8a 95       	dec	r24
    113c:	d2 f7       	brpl	.-12     	; 0x1132 <__stack+0x33>
    113e:	62 2a       	or	r6, r18
    1140:	73 2a       	or	r7, r19
    1142:	84 2a       	or	r8, r20
    1144:	95 2a       	or	r9, r21
    1146:	ad a4       	ldd	r10, Y+45	; 0x2d
    1148:	be a4       	ldd	r11, Y+46	; 0x2e
    114a:	cf a4       	ldd	r12, Y+47	; 0x2f
    114c:	d8 a8       	ldd	r13, Y+48	; 0x30
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__stack+0x59>
    1150:	aa 0c       	add	r10, r10
    1152:	bb 1c       	adc	r11, r11
    1154:	cc 1c       	adc	r12, r12
    1156:	dd 1c       	adc	r13, r13
    1158:	ea 94       	dec	r14
    115a:	d2 f7       	brpl	.-12     	; 0x1150 <__stack+0x51>
    115c:	ad a6       	std	Y+45, r10	; 0x2d
    115e:	be a6       	std	Y+46, r11	; 0x2e
    1160:	cf a6       	std	Y+47, r12	; 0x2f
    1162:	d8 aa       	std	Y+48, r13	; 0x30
    1164:	62 01       	movw	r12, r4
    1166:	ee 24       	eor	r14, r14
    1168:	ff 24       	eor	r15, r15
    116a:	cd aa       	std	Y+53, r12	; 0x35
    116c:	de aa       	std	Y+54, r13	; 0x36
    116e:	ef aa       	std	Y+55, r14	; 0x37
    1170:	f8 ae       	std	Y+56, r15	; 0x38
    1172:	92 01       	movw	r18, r4
    1174:	81 01       	movw	r16, r2
    1176:	20 70       	andi	r18, 0x00	; 0
    1178:	30 70       	andi	r19, 0x00	; 0
    117a:	09 af       	std	Y+57, r16	; 0x39
    117c:	1a af       	std	Y+58, r17	; 0x3a
    117e:	2b af       	std	Y+59, r18	; 0x3b
    1180:	3c af       	std	Y+60, r19	; 0x3c
    1182:	c4 01       	movw	r24, r8
    1184:	b3 01       	movw	r22, r6
    1186:	a7 01       	movw	r20, r14
    1188:	96 01       	movw	r18, r12
    118a:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    118e:	7b 01       	movw	r14, r22
    1190:	8c 01       	movw	r16, r24
    1192:	c4 01       	movw	r24, r8
    1194:	b3 01       	movw	r22, r6
    1196:	2d a9       	ldd	r18, Y+53	; 0x35
    1198:	3e a9       	ldd	r19, Y+54	; 0x36
    119a:	4f a9       	ldd	r20, Y+55	; 0x37
    119c:	58 ad       	ldd	r21, Y+56	; 0x38
    119e:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    11a2:	c9 01       	movw	r24, r18
    11a4:	da 01       	movw	r26, r20
    11a6:	3c 01       	movw	r6, r24
    11a8:	4d 01       	movw	r8, r26
    11aa:	c4 01       	movw	r24, r8
    11ac:	b3 01       	movw	r22, r6
    11ae:	29 ad       	ldd	r18, Y+57	; 0x39
    11b0:	3a ad       	ldd	r19, Y+58	; 0x3a
    11b2:	4b ad       	ldd	r20, Y+59	; 0x3b
    11b4:	5c ad       	ldd	r21, Y+60	; 0x3c
    11b6:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	87 01       	movw	r16, r14
    11c0:	ff 24       	eor	r15, r15
    11c2:	ee 24       	eor	r14, r14
    11c4:	ad a4       	ldd	r10, Y+45	; 0x2d
    11c6:	be a4       	ldd	r11, Y+46	; 0x2e
    11c8:	cf a4       	ldd	r12, Y+47	; 0x2f
    11ca:	d8 a8       	ldd	r13, Y+48	; 0x30
    11cc:	c6 01       	movw	r24, r12
    11ce:	aa 27       	eor	r26, r26
    11d0:	bb 27       	eor	r27, r27
    11d2:	57 01       	movw	r10, r14
    11d4:	68 01       	movw	r12, r16
    11d6:	a8 2a       	or	r10, r24
    11d8:	b9 2a       	or	r11, r25
    11da:	ca 2a       	or	r12, r26
    11dc:	db 2a       	or	r13, r27
    11de:	a2 16       	cp	r10, r18
    11e0:	b3 06       	cpc	r11, r19
    11e2:	c4 06       	cpc	r12, r20
    11e4:	d5 06       	cpc	r13, r21
    11e6:	e0 f4       	brcc	.+56     	; 0x1220 <__stack+0x121>
    11e8:	08 94       	sec
    11ea:	61 08       	sbc	r6, r1
    11ec:	71 08       	sbc	r7, r1
    11ee:	81 08       	sbc	r8, r1
    11f0:	91 08       	sbc	r9, r1
    11f2:	a2 0c       	add	r10, r2
    11f4:	b3 1c       	adc	r11, r3
    11f6:	c4 1c       	adc	r12, r4
    11f8:	d5 1c       	adc	r13, r5
    11fa:	a2 14       	cp	r10, r2
    11fc:	b3 04       	cpc	r11, r3
    11fe:	c4 04       	cpc	r12, r4
    1200:	d5 04       	cpc	r13, r5
    1202:	70 f0       	brcs	.+28     	; 0x1220 <__stack+0x121>
    1204:	a2 16       	cp	r10, r18
    1206:	b3 06       	cpc	r11, r19
    1208:	c4 06       	cpc	r12, r20
    120a:	d5 06       	cpc	r13, r21
    120c:	48 f4       	brcc	.+18     	; 0x1220 <__stack+0x121>
    120e:	08 94       	sec
    1210:	61 08       	sbc	r6, r1
    1212:	71 08       	sbc	r7, r1
    1214:	81 08       	sbc	r8, r1
    1216:	91 08       	sbc	r9, r1
    1218:	a2 0c       	add	r10, r2
    121a:	b3 1c       	adc	r11, r3
    121c:	c4 1c       	adc	r12, r4
    121e:	d5 1c       	adc	r13, r5
    1220:	a2 1a       	sub	r10, r18
    1222:	b3 0a       	sbc	r11, r19
    1224:	c4 0a       	sbc	r12, r20
    1226:	d5 0a       	sbc	r13, r21
    1228:	c6 01       	movw	r24, r12
    122a:	b5 01       	movw	r22, r10
    122c:	2d a9       	ldd	r18, Y+53	; 0x35
    122e:	3e a9       	ldd	r19, Y+54	; 0x36
    1230:	4f a9       	ldd	r20, Y+55	; 0x37
    1232:	58 ad       	ldd	r21, Y+56	; 0x38
    1234:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1238:	7b 01       	movw	r14, r22
    123a:	8c 01       	movw	r16, r24
    123c:	c6 01       	movw	r24, r12
    123e:	b5 01       	movw	r22, r10
    1240:	2d a9       	ldd	r18, Y+53	; 0x35
    1242:	3e a9       	ldd	r19, Y+54	; 0x36
    1244:	4f a9       	ldd	r20, Y+55	; 0x37
    1246:	58 ad       	ldd	r21, Y+56	; 0x38
    1248:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    124c:	c9 01       	movw	r24, r18
    124e:	da 01       	movw	r26, r20
    1250:	5c 01       	movw	r10, r24
    1252:	6d 01       	movw	r12, r26
    1254:	c6 01       	movw	r24, r12
    1256:	b5 01       	movw	r22, r10
    1258:	29 ad       	ldd	r18, Y+57	; 0x39
    125a:	3a ad       	ldd	r19, Y+58	; 0x3a
    125c:	4b ad       	ldd	r20, Y+59	; 0x3b
    125e:	5c ad       	ldd	r21, Y+60	; 0x3c
    1260:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	87 01       	movw	r16, r14
    126a:	ff 24       	eor	r15, r15
    126c:	ee 24       	eor	r14, r14
    126e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1270:	9e a5       	ldd	r25, Y+46	; 0x2e
    1272:	af a5       	ldd	r26, Y+47	; 0x2f
    1274:	b8 a9       	ldd	r27, Y+48	; 0x30
    1276:	a0 70       	andi	r26, 0x00	; 0
    1278:	b0 70       	andi	r27, 0x00	; 0
    127a:	e8 2a       	or	r14, r24
    127c:	f9 2a       	or	r15, r25
    127e:	0a 2b       	or	r16, r26
    1280:	1b 2b       	or	r17, r27
    1282:	e2 16       	cp	r14, r18
    1284:	f3 06       	cpc	r15, r19
    1286:	04 07       	cpc	r16, r20
    1288:	15 07       	cpc	r17, r21
    128a:	c0 f4       	brcc	.+48     	; 0x12bc <__stack+0x1bd>
    128c:	08 94       	sec
    128e:	a1 08       	sbc	r10, r1
    1290:	b1 08       	sbc	r11, r1
    1292:	c1 08       	sbc	r12, r1
    1294:	d1 08       	sbc	r13, r1
    1296:	e2 0c       	add	r14, r2
    1298:	f3 1c       	adc	r15, r3
    129a:	04 1d       	adc	r16, r4
    129c:	15 1d       	adc	r17, r5
    129e:	e2 14       	cp	r14, r2
    12a0:	f3 04       	cpc	r15, r3
    12a2:	04 05       	cpc	r16, r4
    12a4:	15 05       	cpc	r17, r5
    12a6:	50 f0       	brcs	.+20     	; 0x12bc <__stack+0x1bd>
    12a8:	e2 16       	cp	r14, r18
    12aa:	f3 06       	cpc	r15, r19
    12ac:	04 07       	cpc	r16, r20
    12ae:	15 07       	cpc	r17, r21
    12b0:	28 f4       	brcc	.+10     	; 0x12bc <__stack+0x1bd>
    12b2:	08 94       	sec
    12b4:	a1 08       	sbc	r10, r1
    12b6:	b1 08       	sbc	r11, r1
    12b8:	c1 08       	sbc	r12, r1
    12ba:	d1 08       	sbc	r13, r1
    12bc:	d3 01       	movw	r26, r6
    12be:	99 27       	eor	r25, r25
    12c0:	88 27       	eor	r24, r24
    12c2:	86 01       	movw	r16, r12
    12c4:	75 01       	movw	r14, r10
    12c6:	e8 2a       	or	r14, r24
    12c8:	f9 2a       	or	r15, r25
    12ca:	0a 2b       	or	r16, r26
    12cc:	1b 2b       	or	r17, r27
    12ce:	e9 aa       	std	Y+49, r14	; 0x31
    12d0:	fa aa       	std	Y+50, r15	; 0x32
    12d2:	0b ab       	std	Y+51, r16	; 0x33
    12d4:	1c ab       	std	Y+52, r17	; 0x34
    12d6:	cf c4       	rjmp	.+2462   	; 0x1c76 <__stack+0xb77>
    12d8:	21 14       	cp	r2, r1
    12da:	31 04       	cpc	r3, r1
    12dc:	41 04       	cpc	r4, r1
    12de:	51 04       	cpc	r5, r1
    12e0:	71 f4       	brne	.+28     	; 0x12fe <__stack+0x1ff>
    12e2:	61 e0       	ldi	r22, 0x01	; 1
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    12f6:	c9 01       	movw	r24, r18
    12f8:	da 01       	movw	r26, r20
    12fa:	1c 01       	movw	r2, r24
    12fc:	2d 01       	movw	r4, r26
    12fe:	00 e0       	ldi	r16, 0x00	; 0
    1300:	20 16       	cp	r2, r16
    1302:	00 e0       	ldi	r16, 0x00	; 0
    1304:	30 06       	cpc	r3, r16
    1306:	01 e0       	ldi	r16, 0x01	; 1
    1308:	40 06       	cpc	r4, r16
    130a:	00 e0       	ldi	r16, 0x00	; 0
    130c:	50 06       	cpc	r5, r16
    130e:	88 f4       	brcc	.+34     	; 0x1332 <__stack+0x233>
    1310:	1f ef       	ldi	r17, 0xFF	; 255
    1312:	21 16       	cp	r2, r17
    1314:	31 04       	cpc	r3, r1
    1316:	41 04       	cpc	r4, r1
    1318:	51 04       	cpc	r5, r1
    131a:	31 f0       	breq	.+12     	; 0x1328 <__stack+0x229>
    131c:	28 f0       	brcs	.+10     	; 0x1328 <__stack+0x229>
    131e:	48 e0       	ldi	r20, 0x08	; 8
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	17 c0       	rjmp	.+46     	; 0x1356 <__stack+0x257>
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	12 c0       	rjmp	.+36     	; 0x1356 <__stack+0x257>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	22 16       	cp	r2, r18
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	32 06       	cpc	r3, r18
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	42 06       	cpc	r4, r18
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	52 06       	cpc	r5, r18
    1342:	28 f0       	brcs	.+10     	; 0x134e <__stack+0x24f>
    1344:	48 e1       	ldi	r20, 0x18	; 24
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <__stack+0x257>
    134e:	40 e1       	ldi	r20, 0x10	; 16
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	d2 01       	movw	r26, r4
    1358:	c1 01       	movw	r24, r2
    135a:	04 2e       	mov	r0, r20
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <__stack+0x267>
    135e:	b6 95       	lsr	r27
    1360:	a7 95       	ror	r26
    1362:	97 95       	ror	r25
    1364:	87 95       	ror	r24
    1366:	0a 94       	dec	r0
    1368:	d2 f7       	brpl	.-12     	; 0x135e <__stack+0x25f>
    136a:	88 5f       	subi	r24, 0xF8	; 248
    136c:	9e 4f       	sbci	r25, 0xFE	; 254
    136e:	dc 01       	movw	r26, r24
    1370:	2c 91       	ld	r18, X
    1372:	e0 e2       	ldi	r30, 0x20	; 32
    1374:	ee 2e       	mov	r14, r30
    1376:	f1 2c       	mov	r15, r1
    1378:	01 2d       	mov	r16, r1
    137a:	11 2d       	mov	r17, r1
    137c:	d8 01       	movw	r26, r16
    137e:	c7 01       	movw	r24, r14
    1380:	84 1b       	sub	r24, r20
    1382:	95 0b       	sbc	r25, r21
    1384:	a6 0b       	sbc	r26, r22
    1386:	b7 0b       	sbc	r27, r23
    1388:	82 1b       	sub	r24, r18
    138a:	91 09       	sbc	r25, r1
    138c:	a1 09       	sbc	r26, r1
    138e:	b1 09       	sbc	r27, r1
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	a1 05       	cpc	r26, r1
    1394:	b1 05       	cpc	r27, r1
    1396:	61 f4       	brne	.+24     	; 0x13b0 <__stack+0x2b1>
    1398:	64 01       	movw	r12, r8
    139a:	53 01       	movw	r10, r6
    139c:	a2 18       	sub	r10, r2
    139e:	b3 08       	sbc	r11, r3
    13a0:	c4 08       	sbc	r12, r4
    13a2:	d5 08       	sbc	r13, r5
    13a4:	31 e0       	ldi	r19, 0x01	; 1
    13a6:	63 2e       	mov	r6, r19
    13a8:	71 2c       	mov	r7, r1
    13aa:	81 2c       	mov	r8, r1
    13ac:	91 2c       	mov	r9, r1
    13ae:	1e c1       	rjmp	.+572    	; 0x15ec <__stack+0x4ed>
    13b0:	6f 96       	adiw	r28, 0x1f	; 31
    13b2:	8f af       	std	Y+63, r24	; 0x3f
    13b4:	6f 97       	sbiw	r28, 0x1f	; 31
    13b6:	08 2e       	mov	r0, r24
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <__stack+0x2c3>
    13ba:	22 0c       	add	r2, r2
    13bc:	33 1c       	adc	r3, r3
    13be:	44 1c       	adc	r4, r4
    13c0:	55 1c       	adc	r5, r5
    13c2:	0a 94       	dec	r0
    13c4:	d2 f7       	brpl	.-12     	; 0x13ba <__stack+0x2bb>
    13c6:	ee 2d       	mov	r30, r14
    13c8:	e8 1b       	sub	r30, r24
    13ca:	64 01       	movw	r12, r8
    13cc:	53 01       	movw	r10, r6
    13ce:	0e 2e       	mov	r0, r30
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <__stack+0x2db>
    13d2:	d6 94       	lsr	r13
    13d4:	c7 94       	ror	r12
    13d6:	b7 94       	ror	r11
    13d8:	a7 94       	ror	r10
    13da:	0a 94       	dec	r0
    13dc:	d2 f7       	brpl	.-12     	; 0x13d2 <__stack+0x2d3>
    13de:	a4 01       	movw	r20, r8
    13e0:	93 01       	movw	r18, r6
    13e2:	6f 96       	adiw	r28, 0x1f	; 31
    13e4:	0f ac       	ldd	r0, Y+63	; 0x3f
    13e6:	6f 97       	sbiw	r28, 0x1f	; 31
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__stack+0x2f3>
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	44 1f       	adc	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	0a 94       	dec	r0
    13f4:	d2 f7       	brpl	.-12     	; 0x13ea <__stack+0x2eb>
    13f6:	6d a4       	ldd	r6, Y+45	; 0x2d
    13f8:	7e a4       	ldd	r7, Y+46	; 0x2e
    13fa:	8f a4       	ldd	r8, Y+47	; 0x2f
    13fc:	98 a8       	ldd	r9, Y+48	; 0x30
    13fe:	0e 2e       	mov	r0, r30
    1400:	04 c0       	rjmp	.+8      	; 0x140a <__stack+0x30b>
    1402:	96 94       	lsr	r9
    1404:	87 94       	ror	r8
    1406:	77 94       	ror	r7
    1408:	67 94       	ror	r6
    140a:	0a 94       	dec	r0
    140c:	d2 f7       	brpl	.-12     	; 0x1402 <__stack+0x303>
    140e:	84 01       	movw	r16, r8
    1410:	73 01       	movw	r14, r6
    1412:	e2 2a       	or	r14, r18
    1414:	f3 2a       	or	r15, r19
    1416:	04 2b       	or	r16, r20
    1418:	15 2b       	or	r17, r21
    141a:	e9 a6       	std	Y+41, r14	; 0x29
    141c:	fa a6       	std	Y+42, r15	; 0x2a
    141e:	0b a7       	std	Y+43, r16	; 0x2b
    1420:	1c a7       	std	Y+44, r17	; 0x2c
    1422:	32 01       	movw	r6, r4
    1424:	88 24       	eor	r8, r8
    1426:	99 24       	eor	r9, r9
    1428:	92 01       	movw	r18, r4
    142a:	81 01       	movw	r16, r2
    142c:	20 70       	andi	r18, 0x00	; 0
    142e:	30 70       	andi	r19, 0x00	; 0
    1430:	21 96       	adiw	r28, 0x01	; 1
    1432:	0c af       	std	Y+60, r16	; 0x3c
    1434:	1d af       	std	Y+61, r17	; 0x3d
    1436:	2e af       	std	Y+62, r18	; 0x3e
    1438:	3f af       	std	Y+63, r19	; 0x3f
    143a:	21 97       	sbiw	r28, 0x01	; 1
    143c:	c6 01       	movw	r24, r12
    143e:	b5 01       	movw	r22, r10
    1440:	a4 01       	movw	r20, r8
    1442:	93 01       	movw	r18, r6
    1444:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1448:	7b 01       	movw	r14, r22
    144a:	8c 01       	movw	r16, r24
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1458:	c9 01       	movw	r24, r18
    145a:	da 01       	movw	r26, r20
    145c:	25 96       	adiw	r28, 0x05	; 5
    145e:	8c af       	std	Y+60, r24	; 0x3c
    1460:	9d af       	std	Y+61, r25	; 0x3d
    1462:	ae af       	std	Y+62, r26	; 0x3e
    1464:	bf af       	std	Y+63, r27	; 0x3f
    1466:	25 97       	sbiw	r28, 0x05	; 5
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	21 96       	adiw	r28, 0x01	; 1
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	21 97       	sbiw	r28, 0x01	; 1
    1478:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a4       	ldd	r10, Y+41	; 0x29
    1488:	ba a4       	ldd	r11, Y+42	; 0x2a
    148a:	cb a4       	ldd	r12, Y+43	; 0x2b
    148c:	dc a4       	ldd	r13, Y+44	; 0x2c
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	5c 01       	movw	r10, r24
    1496:	6d 01       	movw	r12, r26
    1498:	ae 28       	or	r10, r14
    149a:	bf 28       	or	r11, r15
    149c:	c0 2a       	or	r12, r16
    149e:	d1 2a       	or	r13, r17
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	60 f5       	brcc	.+88     	; 0x1502 <__stack+0x403>
    14aa:	25 96       	adiw	r28, 0x05	; 5
    14ac:	6c ad       	ldd	r22, Y+60	; 0x3c
    14ae:	7d ad       	ldd	r23, Y+61	; 0x3d
    14b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14b4:	25 97       	sbiw	r28, 0x05	; 5
    14b6:	61 50       	subi	r22, 0x01	; 1
    14b8:	70 40       	sbci	r23, 0x00	; 0
    14ba:	80 40       	sbci	r24, 0x00	; 0
    14bc:	90 40       	sbci	r25, 0x00	; 0
    14be:	25 96       	adiw	r28, 0x05	; 5
    14c0:	6c af       	std	Y+60, r22	; 0x3c
    14c2:	7d af       	std	Y+61, r23	; 0x3d
    14c4:	8e af       	std	Y+62, r24	; 0x3e
    14c6:	9f af       	std	Y+63, r25	; 0x3f
    14c8:	25 97       	sbiw	r28, 0x05	; 5
    14ca:	a2 0c       	add	r10, r2
    14cc:	b3 1c       	adc	r11, r3
    14ce:	c4 1c       	adc	r12, r4
    14d0:	d5 1c       	adc	r13, r5
    14d2:	a2 14       	cp	r10, r2
    14d4:	b3 04       	cpc	r11, r3
    14d6:	c4 04       	cpc	r12, r4
    14d8:	d5 04       	cpc	r13, r5
    14da:	98 f0       	brcs	.+38     	; 0x1502 <__stack+0x403>
    14dc:	a2 16       	cp	r10, r18
    14de:	b3 06       	cpc	r11, r19
    14e0:	c4 06       	cpc	r12, r20
    14e2:	d5 06       	cpc	r13, r21
    14e4:	70 f4       	brcc	.+28     	; 0x1502 <__stack+0x403>
    14e6:	61 50       	subi	r22, 0x01	; 1
    14e8:	70 40       	sbci	r23, 0x00	; 0
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	25 96       	adiw	r28, 0x05	; 5
    14f0:	6c af       	std	Y+60, r22	; 0x3c
    14f2:	7d af       	std	Y+61, r23	; 0x3d
    14f4:	8e af       	std	Y+62, r24	; 0x3e
    14f6:	9f af       	std	Y+63, r25	; 0x3f
    14f8:	25 97       	sbiw	r28, 0x05	; 5
    14fa:	a2 0c       	add	r10, r2
    14fc:	b3 1c       	adc	r11, r3
    14fe:	c4 1c       	adc	r12, r4
    1500:	d5 1c       	adc	r13, r5
    1502:	a2 1a       	sub	r10, r18
    1504:	b3 0a       	sbc	r11, r19
    1506:	c4 0a       	sbc	r12, r20
    1508:	d5 0a       	sbc	r13, r21
    150a:	c6 01       	movw	r24, r12
    150c:	b5 01       	movw	r22, r10
    150e:	a4 01       	movw	r20, r8
    1510:	93 01       	movw	r18, r6
    1512:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1516:	7b 01       	movw	r14, r22
    1518:	8c 01       	movw	r16, r24
    151a:	c6 01       	movw	r24, r12
    151c:	b5 01       	movw	r22, r10
    151e:	a4 01       	movw	r20, r8
    1520:	93 01       	movw	r18, r6
    1522:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1526:	c9 01       	movw	r24, r18
    1528:	da 01       	movw	r26, r20
    152a:	3c 01       	movw	r6, r24
    152c:	4d 01       	movw	r8, r26
    152e:	c4 01       	movw	r24, r8
    1530:	b3 01       	movw	r22, r6
    1532:	21 96       	adiw	r28, 0x01	; 1
    1534:	2c ad       	ldd	r18, Y+60	; 0x3c
    1536:	3d ad       	ldd	r19, Y+61	; 0x3d
    1538:	4e ad       	ldd	r20, Y+62	; 0x3e
    153a:	5f ad       	ldd	r21, Y+63	; 0x3f
    153c:	21 97       	sbiw	r28, 0x01	; 1
    153e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	87 01       	movw	r16, r14
    1548:	ff 24       	eor	r15, r15
    154a:	ee 24       	eor	r14, r14
    154c:	89 a5       	ldd	r24, Y+41	; 0x29
    154e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1550:	ab a5       	ldd	r26, Y+43	; 0x2b
    1552:	bc a5       	ldd	r27, Y+44	; 0x2c
    1554:	a0 70       	andi	r26, 0x00	; 0
    1556:	b0 70       	andi	r27, 0x00	; 0
    1558:	57 01       	movw	r10, r14
    155a:	68 01       	movw	r12, r16
    155c:	a8 2a       	or	r10, r24
    155e:	b9 2a       	or	r11, r25
    1560:	ca 2a       	or	r12, r26
    1562:	db 2a       	or	r13, r27
    1564:	a2 16       	cp	r10, r18
    1566:	b3 06       	cpc	r11, r19
    1568:	c4 06       	cpc	r12, r20
    156a:	d5 06       	cpc	r13, r21
    156c:	e0 f4       	brcc	.+56     	; 0x15a6 <__stack+0x4a7>
    156e:	08 94       	sec
    1570:	61 08       	sbc	r6, r1
    1572:	71 08       	sbc	r7, r1
    1574:	81 08       	sbc	r8, r1
    1576:	91 08       	sbc	r9, r1
    1578:	a2 0c       	add	r10, r2
    157a:	b3 1c       	adc	r11, r3
    157c:	c4 1c       	adc	r12, r4
    157e:	d5 1c       	adc	r13, r5
    1580:	a2 14       	cp	r10, r2
    1582:	b3 04       	cpc	r11, r3
    1584:	c4 04       	cpc	r12, r4
    1586:	d5 04       	cpc	r13, r5
    1588:	70 f0       	brcs	.+28     	; 0x15a6 <__stack+0x4a7>
    158a:	a2 16       	cp	r10, r18
    158c:	b3 06       	cpc	r11, r19
    158e:	c4 06       	cpc	r12, r20
    1590:	d5 06       	cpc	r13, r21
    1592:	48 f4       	brcc	.+18     	; 0x15a6 <__stack+0x4a7>
    1594:	08 94       	sec
    1596:	61 08       	sbc	r6, r1
    1598:	71 08       	sbc	r7, r1
    159a:	81 08       	sbc	r8, r1
    159c:	91 08       	sbc	r9, r1
    159e:	a2 0c       	add	r10, r2
    15a0:	b3 1c       	adc	r11, r3
    15a2:	c4 1c       	adc	r12, r4
    15a4:	d5 1c       	adc	r13, r5
    15a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15aa:	af a5       	ldd	r26, Y+47	; 0x2f
    15ac:	b8 a9       	ldd	r27, Y+48	; 0x30
    15ae:	6f 96       	adiw	r28, 0x1f	; 31
    15b0:	0f ac       	ldd	r0, Y+63	; 0x3f
    15b2:	6f 97       	sbiw	r28, 0x1f	; 31
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <__stack+0x4bf>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	0a 94       	dec	r0
    15c0:	d2 f7       	brpl	.-12     	; 0x15b6 <__stack+0x4b7>
    15c2:	8d a7       	std	Y+45, r24	; 0x2d
    15c4:	9e a7       	std	Y+46, r25	; 0x2e
    15c6:	af a7       	std	Y+47, r26	; 0x2f
    15c8:	b8 ab       	std	Y+48, r27	; 0x30
    15ca:	a2 1a       	sub	r10, r18
    15cc:	b3 0a       	sbc	r11, r19
    15ce:	c4 0a       	sbc	r12, r20
    15d0:	d5 0a       	sbc	r13, r21
    15d2:	25 96       	adiw	r28, 0x05	; 5
    15d4:	ec ac       	ldd	r14, Y+60	; 0x3c
    15d6:	fd ac       	ldd	r15, Y+61	; 0x3d
    15d8:	0e ad       	ldd	r16, Y+62	; 0x3e
    15da:	1f ad       	ldd	r17, Y+63	; 0x3f
    15dc:	25 97       	sbiw	r28, 0x05	; 5
    15de:	d7 01       	movw	r26, r14
    15e0:	99 27       	eor	r25, r25
    15e2:	88 27       	eor	r24, r24
    15e4:	68 2a       	or	r6, r24
    15e6:	79 2a       	or	r7, r25
    15e8:	8a 2a       	or	r8, r26
    15ea:	9b 2a       	or	r9, r27
    15ec:	82 01       	movw	r16, r4
    15ee:	22 27       	eor	r18, r18
    15f0:	33 27       	eor	r19, r19
    15f2:	29 96       	adiw	r28, 0x09	; 9
    15f4:	0c af       	std	Y+60, r16	; 0x3c
    15f6:	1d af       	std	Y+61, r17	; 0x3d
    15f8:	2e af       	std	Y+62, r18	; 0x3e
    15fa:	3f af       	std	Y+63, r19	; 0x3f
    15fc:	29 97       	sbiw	r28, 0x09	; 9
    15fe:	a2 01       	movw	r20, r4
    1600:	91 01       	movw	r18, r2
    1602:	40 70       	andi	r20, 0x00	; 0
    1604:	50 70       	andi	r21, 0x00	; 0
    1606:	2d 96       	adiw	r28, 0x0d	; 13
    1608:	2c af       	std	Y+60, r18	; 0x3c
    160a:	3d af       	std	Y+61, r19	; 0x3d
    160c:	4e af       	std	Y+62, r20	; 0x3e
    160e:	5f af       	std	Y+63, r21	; 0x3f
    1610:	2d 97       	sbiw	r28, 0x0d	; 13
    1612:	c6 01       	movw	r24, r12
    1614:	b5 01       	movw	r22, r10
    1616:	29 96       	adiw	r28, 0x09	; 9
    1618:	2c ad       	ldd	r18, Y+60	; 0x3c
    161a:	3d ad       	ldd	r19, Y+61	; 0x3d
    161c:	4e ad       	ldd	r20, Y+62	; 0x3e
    161e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1620:	29 97       	sbiw	r28, 0x09	; 9
    1622:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1626:	7b 01       	movw	r14, r22
    1628:	8c 01       	movw	r16, r24
    162a:	c6 01       	movw	r24, r12
    162c:	b5 01       	movw	r22, r10
    162e:	29 96       	adiw	r28, 0x09	; 9
    1630:	2c ad       	ldd	r18, Y+60	; 0x3c
    1632:	3d ad       	ldd	r19, Y+61	; 0x3d
    1634:	4e ad       	ldd	r20, Y+62	; 0x3e
    1636:	5f ad       	ldd	r21, Y+63	; 0x3f
    1638:	29 97       	sbiw	r28, 0x09	; 9
    163a:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    163e:	c9 01       	movw	r24, r18
    1640:	da 01       	movw	r26, r20
    1642:	61 96       	adiw	r28, 0x11	; 17
    1644:	8c af       	std	Y+60, r24	; 0x3c
    1646:	9d af       	std	Y+61, r25	; 0x3d
    1648:	ae af       	std	Y+62, r26	; 0x3e
    164a:	bf af       	std	Y+63, r27	; 0x3f
    164c:	61 97       	sbiw	r28, 0x11	; 17
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	2d 96       	adiw	r28, 0x0d	; 13
    1654:	2c ad       	ldd	r18, Y+60	; 0x3c
    1656:	3d ad       	ldd	r19, Y+61	; 0x3d
    1658:	4e ad       	ldd	r20, Y+62	; 0x3e
    165a:	5f ad       	ldd	r21, Y+63	; 0x3f
    165c:	2d 97       	sbiw	r28, 0x0d	; 13
    165e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	87 01       	movw	r16, r14
    1668:	ff 24       	eor	r15, r15
    166a:	ee 24       	eor	r14, r14
    166c:	ad a4       	ldd	r10, Y+45	; 0x2d
    166e:	be a4       	ldd	r11, Y+46	; 0x2e
    1670:	cf a4       	ldd	r12, Y+47	; 0x2f
    1672:	d8 a8       	ldd	r13, Y+48	; 0x30
    1674:	c6 01       	movw	r24, r12
    1676:	aa 27       	eor	r26, r26
    1678:	bb 27       	eor	r27, r27
    167a:	57 01       	movw	r10, r14
    167c:	68 01       	movw	r12, r16
    167e:	a8 2a       	or	r10, r24
    1680:	b9 2a       	or	r11, r25
    1682:	ca 2a       	or	r12, r26
    1684:	db 2a       	or	r13, r27
    1686:	a2 16       	cp	r10, r18
    1688:	b3 06       	cpc	r11, r19
    168a:	c4 06       	cpc	r12, r20
    168c:	d5 06       	cpc	r13, r21
    168e:	60 f5       	brcc	.+88     	; 0x16e8 <__stack+0x5e9>
    1690:	61 96       	adiw	r28, 0x11	; 17
    1692:	6c ad       	ldd	r22, Y+60	; 0x3c
    1694:	7d ad       	ldd	r23, Y+61	; 0x3d
    1696:	8e ad       	ldd	r24, Y+62	; 0x3e
    1698:	9f ad       	ldd	r25, Y+63	; 0x3f
    169a:	61 97       	sbiw	r28, 0x11	; 17
    169c:	61 50       	subi	r22, 0x01	; 1
    169e:	70 40       	sbci	r23, 0x00	; 0
    16a0:	80 40       	sbci	r24, 0x00	; 0
    16a2:	90 40       	sbci	r25, 0x00	; 0
    16a4:	61 96       	adiw	r28, 0x11	; 17
    16a6:	6c af       	std	Y+60, r22	; 0x3c
    16a8:	7d af       	std	Y+61, r23	; 0x3d
    16aa:	8e af       	std	Y+62, r24	; 0x3e
    16ac:	9f af       	std	Y+63, r25	; 0x3f
    16ae:	61 97       	sbiw	r28, 0x11	; 17
    16b0:	a2 0c       	add	r10, r2
    16b2:	b3 1c       	adc	r11, r3
    16b4:	c4 1c       	adc	r12, r4
    16b6:	d5 1c       	adc	r13, r5
    16b8:	a2 14       	cp	r10, r2
    16ba:	b3 04       	cpc	r11, r3
    16bc:	c4 04       	cpc	r12, r4
    16be:	d5 04       	cpc	r13, r5
    16c0:	98 f0       	brcs	.+38     	; 0x16e8 <__stack+0x5e9>
    16c2:	a2 16       	cp	r10, r18
    16c4:	b3 06       	cpc	r11, r19
    16c6:	c4 06       	cpc	r12, r20
    16c8:	d5 06       	cpc	r13, r21
    16ca:	70 f4       	brcc	.+28     	; 0x16e8 <__stack+0x5e9>
    16cc:	61 50       	subi	r22, 0x01	; 1
    16ce:	70 40       	sbci	r23, 0x00	; 0
    16d0:	80 40       	sbci	r24, 0x00	; 0
    16d2:	90 40       	sbci	r25, 0x00	; 0
    16d4:	61 96       	adiw	r28, 0x11	; 17
    16d6:	6c af       	std	Y+60, r22	; 0x3c
    16d8:	7d af       	std	Y+61, r23	; 0x3d
    16da:	8e af       	std	Y+62, r24	; 0x3e
    16dc:	9f af       	std	Y+63, r25	; 0x3f
    16de:	61 97       	sbiw	r28, 0x11	; 17
    16e0:	a2 0c       	add	r10, r2
    16e2:	b3 1c       	adc	r11, r3
    16e4:	c4 1c       	adc	r12, r4
    16e6:	d5 1c       	adc	r13, r5
    16e8:	a2 1a       	sub	r10, r18
    16ea:	b3 0a       	sbc	r11, r19
    16ec:	c4 0a       	sbc	r12, r20
    16ee:	d5 0a       	sbc	r13, r21
    16f0:	c6 01       	movw	r24, r12
    16f2:	b5 01       	movw	r22, r10
    16f4:	29 96       	adiw	r28, 0x09	; 9
    16f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    16f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    16fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    16fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    16fe:	29 97       	sbiw	r28, 0x09	; 9
    1700:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1704:	7b 01       	movw	r14, r22
    1706:	8c 01       	movw	r16, r24
    1708:	c6 01       	movw	r24, r12
    170a:	b5 01       	movw	r22, r10
    170c:	29 96       	adiw	r28, 0x09	; 9
    170e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1710:	3d ad       	ldd	r19, Y+61	; 0x3d
    1712:	4e ad       	ldd	r20, Y+62	; 0x3e
    1714:	5f ad       	ldd	r21, Y+63	; 0x3f
    1716:	29 97       	sbiw	r28, 0x09	; 9
    1718:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    171c:	c9 01       	movw	r24, r18
    171e:	da 01       	movw	r26, r20
    1720:	5c 01       	movw	r10, r24
    1722:	6d 01       	movw	r12, r26
    1724:	c6 01       	movw	r24, r12
    1726:	b5 01       	movw	r22, r10
    1728:	2d 96       	adiw	r28, 0x0d	; 13
    172a:	2c ad       	ldd	r18, Y+60	; 0x3c
    172c:	3d ad       	ldd	r19, Y+61	; 0x3d
    172e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1730:	5f ad       	ldd	r21, Y+63	; 0x3f
    1732:	2d 97       	sbiw	r28, 0x0d	; 13
    1734:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	87 01       	movw	r16, r14
    173e:	ff 24       	eor	r15, r15
    1740:	ee 24       	eor	r14, r14
    1742:	8d a5       	ldd	r24, Y+45	; 0x2d
    1744:	9e a5       	ldd	r25, Y+46	; 0x2e
    1746:	af a5       	ldd	r26, Y+47	; 0x2f
    1748:	b8 a9       	ldd	r27, Y+48	; 0x30
    174a:	a0 70       	andi	r26, 0x00	; 0
    174c:	b0 70       	andi	r27, 0x00	; 0
    174e:	e8 2a       	or	r14, r24
    1750:	f9 2a       	or	r15, r25
    1752:	0a 2b       	or	r16, r26
    1754:	1b 2b       	or	r17, r27
    1756:	e2 16       	cp	r14, r18
    1758:	f3 06       	cpc	r15, r19
    175a:	04 07       	cpc	r16, r20
    175c:	15 07       	cpc	r17, r21
    175e:	c0 f4       	brcc	.+48     	; 0x1790 <__stack+0x691>
    1760:	08 94       	sec
    1762:	a1 08       	sbc	r10, r1
    1764:	b1 08       	sbc	r11, r1
    1766:	c1 08       	sbc	r12, r1
    1768:	d1 08       	sbc	r13, r1
    176a:	e2 0c       	add	r14, r2
    176c:	f3 1c       	adc	r15, r3
    176e:	04 1d       	adc	r16, r4
    1770:	15 1d       	adc	r17, r5
    1772:	e2 14       	cp	r14, r2
    1774:	f3 04       	cpc	r15, r3
    1776:	04 05       	cpc	r16, r4
    1778:	15 05       	cpc	r17, r5
    177a:	50 f0       	brcs	.+20     	; 0x1790 <__stack+0x691>
    177c:	e2 16       	cp	r14, r18
    177e:	f3 06       	cpc	r15, r19
    1780:	04 07       	cpc	r16, r20
    1782:	15 07       	cpc	r17, r21
    1784:	28 f4       	brcc	.+10     	; 0x1790 <__stack+0x691>
    1786:	08 94       	sec
    1788:	a1 08       	sbc	r10, r1
    178a:	b1 08       	sbc	r11, r1
    178c:	c1 08       	sbc	r12, r1
    178e:	d1 08       	sbc	r13, r1
    1790:	61 96       	adiw	r28, 0x11	; 17
    1792:	ec ac       	ldd	r14, Y+60	; 0x3c
    1794:	fd ac       	ldd	r15, Y+61	; 0x3d
    1796:	0e ad       	ldd	r16, Y+62	; 0x3e
    1798:	1f ad       	ldd	r17, Y+63	; 0x3f
    179a:	61 97       	sbiw	r28, 0x11	; 17
    179c:	d7 01       	movw	r26, r14
    179e:	99 27       	eor	r25, r25
    17a0:	88 27       	eor	r24, r24
    17a2:	96 01       	movw	r18, r12
    17a4:	85 01       	movw	r16, r10
    17a6:	08 2b       	or	r16, r24
    17a8:	19 2b       	or	r17, r25
    17aa:	2a 2b       	or	r18, r26
    17ac:	3b 2b       	or	r19, r27
    17ae:	09 ab       	std	Y+49, r16	; 0x31
    17b0:	1a ab       	std	Y+50, r17	; 0x32
    17b2:	2b ab       	std	Y+51, r18	; 0x33
    17b4:	3c ab       	std	Y+52, r19	; 0x34
    17b6:	62 c2       	rjmp	.+1220   	; 0x1c7c <__stack+0xb7d>
    17b8:	6e 14       	cp	r6, r14
    17ba:	7f 04       	cpc	r7, r15
    17bc:	80 06       	cpc	r8, r16
    17be:	91 06       	cpc	r9, r17
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <__stack+0x6c5>
    17c2:	51 c2       	rjmp	.+1186   	; 0x1c66 <__stack+0xb67>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	e2 16       	cp	r14, r18
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	f2 06       	cpc	r15, r18
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	02 07       	cpc	r16, r18
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	12 07       	cpc	r17, r18
    17d4:	88 f4       	brcc	.+34     	; 0x17f8 <__stack+0x6f9>
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	e3 16       	cp	r14, r19
    17da:	f1 04       	cpc	r15, r1
    17dc:	01 05       	cpc	r16, r1
    17de:	11 05       	cpc	r17, r1
    17e0:	31 f0       	breq	.+12     	; 0x17ee <__stack+0x6ef>
    17e2:	28 f0       	brcs	.+10     	; 0x17ee <__stack+0x6ef>
    17e4:	48 e0       	ldi	r20, 0x08	; 8
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	17 c0       	rjmp	.+46     	; 0x181c <__stack+0x71d>
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	12 c0       	rjmp	.+36     	; 0x181c <__stack+0x71d>
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	e4 16       	cp	r14, r20
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	f4 06       	cpc	r15, r20
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	04 07       	cpc	r16, r20
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	14 07       	cpc	r17, r20
    1808:	28 f0       	brcs	.+10     	; 0x1814 <__stack+0x715>
    180a:	48 e1       	ldi	r20, 0x18	; 24
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	04 c0       	rjmp	.+8      	; 0x181c <__stack+0x71d>
    1814:	40 e1       	ldi	r20, 0x10	; 16
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	d8 01       	movw	r26, r16
    181e:	c7 01       	movw	r24, r14
    1820:	04 2e       	mov	r0, r20
    1822:	04 c0       	rjmp	.+8      	; 0x182c <__stack+0x72d>
    1824:	b6 95       	lsr	r27
    1826:	a7 95       	ror	r26
    1828:	97 95       	ror	r25
    182a:	87 95       	ror	r24
    182c:	0a 94       	dec	r0
    182e:	d2 f7       	brpl	.-12     	; 0x1824 <__stack+0x725>
    1830:	88 5f       	subi	r24, 0xF8	; 248
    1832:	9e 4f       	sbci	r25, 0xFE	; 254
    1834:	dc 01       	movw	r26, r24
    1836:	2c 91       	ld	r18, X
    1838:	30 e2       	ldi	r19, 0x20	; 32
    183a:	a3 2e       	mov	r10, r19
    183c:	b1 2c       	mov	r11, r1
    183e:	c1 2c       	mov	r12, r1
    1840:	d1 2c       	mov	r13, r1
    1842:	d6 01       	movw	r26, r12
    1844:	c5 01       	movw	r24, r10
    1846:	84 1b       	sub	r24, r20
    1848:	95 0b       	sbc	r25, r21
    184a:	a6 0b       	sbc	r26, r22
    184c:	b7 0b       	sbc	r27, r23
    184e:	82 1b       	sub	r24, r18
    1850:	91 09       	sbc	r25, r1
    1852:	a1 09       	sbc	r26, r1
    1854:	b1 09       	sbc	r27, r1
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	89 f4       	brne	.+34     	; 0x1880 <__stack+0x781>
    185e:	e6 14       	cp	r14, r6
    1860:	f7 04       	cpc	r15, r7
    1862:	08 05       	cpc	r16, r8
    1864:	19 05       	cpc	r17, r9
    1866:	08 f4       	brcc	.+2      	; 0x186a <__stack+0x76b>
    1868:	f2 c1       	rjmp	.+996    	; 0x1c4e <__stack+0xb4f>
    186a:	6d a4       	ldd	r6, Y+45	; 0x2d
    186c:	7e a4       	ldd	r7, Y+46	; 0x2e
    186e:	8f a4       	ldd	r8, Y+47	; 0x2f
    1870:	98 a8       	ldd	r9, Y+48	; 0x30
    1872:	62 14       	cp	r6, r2
    1874:	73 04       	cpc	r7, r3
    1876:	84 04       	cpc	r8, r4
    1878:	95 04       	cpc	r9, r5
    187a:	08 f0       	brcs	.+2      	; 0x187e <__stack+0x77f>
    187c:	e8 c1       	rjmp	.+976    	; 0x1c4e <__stack+0xb4f>
    187e:	f3 c1       	rjmp	.+998    	; 0x1c66 <__stack+0xb67>
    1880:	6e 96       	adiw	r28, 0x1e	; 30
    1882:	8f af       	std	Y+63, r24	; 0x3f
    1884:	6e 97       	sbiw	r28, 0x1e	; 30
    1886:	08 2e       	mov	r0, r24
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__stack+0x793>
    188a:	ee 0c       	add	r14, r14
    188c:	ff 1c       	adc	r15, r15
    188e:	00 1f       	adc	r16, r16
    1890:	11 1f       	adc	r17, r17
    1892:	0a 94       	dec	r0
    1894:	d2 f7       	brpl	.-12     	; 0x188a <__stack+0x78b>
    1896:	6a 2d       	mov	r22, r10
    1898:	68 1b       	sub	r22, r24
    189a:	d2 01       	movw	r26, r4
    189c:	c1 01       	movw	r24, r2
    189e:	06 2e       	mov	r0, r22
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__stack+0x7ab>
    18a2:	b6 95       	lsr	r27
    18a4:	a7 95       	ror	r26
    18a6:	97 95       	ror	r25
    18a8:	87 95       	ror	r24
    18aa:	0a 94       	dec	r0
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <__stack+0x7a3>
    18ae:	5c 01       	movw	r10, r24
    18b0:	6d 01       	movw	r12, r26
    18b2:	ae 28       	or	r10, r14
    18b4:	bf 28       	or	r11, r15
    18b6:	c0 2a       	or	r12, r16
    18b8:	d1 2a       	or	r13, r17
    18ba:	ad a2       	std	Y+37, r10	; 0x25
    18bc:	be a2       	std	Y+38, r11	; 0x26
    18be:	cf a2       	std	Y+39, r12	; 0x27
    18c0:	d8 a6       	std	Y+40, r13	; 0x28
    18c2:	72 01       	movw	r14, r4
    18c4:	61 01       	movw	r12, r2
    18c6:	6e 96       	adiw	r28, 0x1e	; 30
    18c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ca:	6e 97       	sbiw	r28, 0x1e	; 30
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__stack+0x7d7>
    18ce:	cc 0c       	add	r12, r12
    18d0:	dd 1c       	adc	r13, r13
    18d2:	ee 1c       	adc	r14, r14
    18d4:	ff 1c       	adc	r15, r15
    18d6:	0a 94       	dec	r0
    18d8:	d2 f7       	brpl	.-12     	; 0x18ce <__stack+0x7cf>
    18da:	c9 a2       	std	Y+33, r12	; 0x21
    18dc:	da a2       	std	Y+34, r13	; 0x22
    18de:	eb a2       	std	Y+35, r14	; 0x23
    18e0:	fc a2       	std	Y+36, r15	; 0x24
    18e2:	64 01       	movw	r12, r8
    18e4:	53 01       	movw	r10, r6
    18e6:	06 2e       	mov	r0, r22
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <__stack+0x7f3>
    18ea:	d6 94       	lsr	r13
    18ec:	c7 94       	ror	r12
    18ee:	b7 94       	ror	r11
    18f0:	a7 94       	ror	r10
    18f2:	0a 94       	dec	r0
    18f4:	d2 f7       	brpl	.-12     	; 0x18ea <__stack+0x7eb>
    18f6:	d4 01       	movw	r26, r8
    18f8:	c3 01       	movw	r24, r6
    18fa:	6e 96       	adiw	r28, 0x1e	; 30
    18fc:	0f ac       	ldd	r0, Y+63	; 0x3f
    18fe:	6e 97       	sbiw	r28, 0x1e	; 30
    1900:	04 c0       	rjmp	.+8      	; 0x190a <__stack+0x80b>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	aa 1f       	adc	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	0a 94       	dec	r0
    190c:	d2 f7       	brpl	.-12     	; 0x1902 <__stack+0x803>
    190e:	ed a4       	ldd	r14, Y+45	; 0x2d
    1910:	fe a4       	ldd	r15, Y+46	; 0x2e
    1912:	0f a5       	ldd	r16, Y+47	; 0x2f
    1914:	18 a9       	ldd	r17, Y+48	; 0x30
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <__stack+0x821>
    1918:	16 95       	lsr	r17
    191a:	07 95       	ror	r16
    191c:	f7 94       	ror	r15
    191e:	e7 94       	ror	r14
    1920:	6a 95       	dec	r22
    1922:	d2 f7       	brpl	.-12     	; 0x1918 <__stack+0x819>
    1924:	37 01       	movw	r6, r14
    1926:	48 01       	movw	r8, r16
    1928:	68 2a       	or	r6, r24
    192a:	79 2a       	or	r7, r25
    192c:	8a 2a       	or	r8, r26
    192e:	9b 2a       	or	r9, r27
    1930:	6d 8e       	std	Y+29, r6	; 0x1d
    1932:	7e 8e       	std	Y+30, r7	; 0x1e
    1934:	8f 8e       	std	Y+31, r8	; 0x1f
    1936:	98 a2       	std	Y+32, r9	; 0x20
    1938:	ed a0       	ldd	r14, Y+37	; 0x25
    193a:	fe a0       	ldd	r15, Y+38	; 0x26
    193c:	0f a1       	ldd	r16, Y+39	; 0x27
    193e:	18 a5       	ldd	r17, Y+40	; 0x28
    1940:	38 01       	movw	r6, r16
    1942:	88 24       	eor	r8, r8
    1944:	99 24       	eor	r9, r9
    1946:	98 01       	movw	r18, r16
    1948:	87 01       	movw	r16, r14
    194a:	20 70       	andi	r18, 0x00	; 0
    194c:	30 70       	andi	r19, 0x00	; 0
    194e:	65 96       	adiw	r28, 0x15	; 21
    1950:	0c af       	std	Y+60, r16	; 0x3c
    1952:	1d af       	std	Y+61, r17	; 0x3d
    1954:	2e af       	std	Y+62, r18	; 0x3e
    1956:	3f af       	std	Y+63, r19	; 0x3f
    1958:	65 97       	sbiw	r28, 0x15	; 21
    195a:	c6 01       	movw	r24, r12
    195c:	b5 01       	movw	r22, r10
    195e:	a4 01       	movw	r20, r8
    1960:	93 01       	movw	r18, r6
    1962:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1966:	7b 01       	movw	r14, r22
    1968:	8c 01       	movw	r16, r24
    196a:	c6 01       	movw	r24, r12
    196c:	b5 01       	movw	r22, r10
    196e:	a4 01       	movw	r20, r8
    1970:	93 01       	movw	r18, r6
    1972:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1976:	c9 01       	movw	r24, r18
    1978:	da 01       	movw	r26, r20
    197a:	1c 01       	movw	r2, r24
    197c:	2d 01       	movw	r4, r26
    197e:	c2 01       	movw	r24, r4
    1980:	b1 01       	movw	r22, r2
    1982:	65 96       	adiw	r28, 0x15	; 21
    1984:	2c ad       	ldd	r18, Y+60	; 0x3c
    1986:	3d ad       	ldd	r19, Y+61	; 0x3d
    1988:	4e ad       	ldd	r20, Y+62	; 0x3e
    198a:	5f ad       	ldd	r21, Y+63	; 0x3f
    198c:	65 97       	sbiw	r28, 0x15	; 21
    198e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	87 01       	movw	r16, r14
    1998:	ff 24       	eor	r15, r15
    199a:	ee 24       	eor	r14, r14
    199c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    199e:	be 8c       	ldd	r11, Y+30	; 0x1e
    19a0:	cf 8c       	ldd	r12, Y+31	; 0x1f
    19a2:	d8 a0       	ldd	r13, Y+32	; 0x20
    19a4:	c6 01       	movw	r24, r12
    19a6:	aa 27       	eor	r26, r26
    19a8:	bb 27       	eor	r27, r27
    19aa:	57 01       	movw	r10, r14
    19ac:	68 01       	movw	r12, r16
    19ae:	a8 2a       	or	r10, r24
    19b0:	b9 2a       	or	r11, r25
    19b2:	ca 2a       	or	r12, r26
    19b4:	db 2a       	or	r13, r27
    19b6:	a2 16       	cp	r10, r18
    19b8:	b3 06       	cpc	r11, r19
    19ba:	c4 06       	cpc	r12, r20
    19bc:	d5 06       	cpc	r13, r21
    19be:	00 f5       	brcc	.+64     	; 0x1a00 <__stack+0x901>
    19c0:	08 94       	sec
    19c2:	21 08       	sbc	r2, r1
    19c4:	31 08       	sbc	r3, r1
    19c6:	41 08       	sbc	r4, r1
    19c8:	51 08       	sbc	r5, r1
    19ca:	ed a0       	ldd	r14, Y+37	; 0x25
    19cc:	fe a0       	ldd	r15, Y+38	; 0x26
    19ce:	0f a1       	ldd	r16, Y+39	; 0x27
    19d0:	18 a5       	ldd	r17, Y+40	; 0x28
    19d2:	ae 0c       	add	r10, r14
    19d4:	bf 1c       	adc	r11, r15
    19d6:	c0 1e       	adc	r12, r16
    19d8:	d1 1e       	adc	r13, r17
    19da:	ae 14       	cp	r10, r14
    19dc:	bf 04       	cpc	r11, r15
    19de:	c0 06       	cpc	r12, r16
    19e0:	d1 06       	cpc	r13, r17
    19e2:	70 f0       	brcs	.+28     	; 0x1a00 <__stack+0x901>
    19e4:	a2 16       	cp	r10, r18
    19e6:	b3 06       	cpc	r11, r19
    19e8:	c4 06       	cpc	r12, r20
    19ea:	d5 06       	cpc	r13, r21
    19ec:	48 f4       	brcc	.+18     	; 0x1a00 <__stack+0x901>
    19ee:	08 94       	sec
    19f0:	21 08       	sbc	r2, r1
    19f2:	31 08       	sbc	r3, r1
    19f4:	41 08       	sbc	r4, r1
    19f6:	51 08       	sbc	r5, r1
    19f8:	ae 0c       	add	r10, r14
    19fa:	bf 1c       	adc	r11, r15
    19fc:	c0 1e       	adc	r12, r16
    19fe:	d1 1e       	adc	r13, r17
    1a00:	a2 1a       	sub	r10, r18
    1a02:	b3 0a       	sbc	r11, r19
    1a04:	c4 0a       	sbc	r12, r20
    1a06:	d5 0a       	sbc	r13, r21
    1a08:	c6 01       	movw	r24, r12
    1a0a:	b5 01       	movw	r22, r10
    1a0c:	a4 01       	movw	r20, r8
    1a0e:	93 01       	movw	r18, r6
    1a10:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1a14:	7b 01       	movw	r14, r22
    1a16:	8c 01       	movw	r16, r24
    1a18:	c6 01       	movw	r24, r12
    1a1a:	b5 01       	movw	r22, r10
    1a1c:	a4 01       	movw	r20, r8
    1a1e:	93 01       	movw	r18, r6
    1a20:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    1a24:	c9 01       	movw	r24, r18
    1a26:	da 01       	movw	r26, r20
    1a28:	3c 01       	movw	r6, r24
    1a2a:	4d 01       	movw	r8, r26
    1a2c:	c4 01       	movw	r24, r8
    1a2e:	b3 01       	movw	r22, r6
    1a30:	65 96       	adiw	r28, 0x15	; 21
    1a32:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a34:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a36:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a38:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a3a:	65 97       	sbiw	r28, 0x15	; 21
    1a3c:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1a40:	9b 01       	movw	r18, r22
    1a42:	ac 01       	movw	r20, r24
    1a44:	87 01       	movw	r16, r14
    1a46:	ff 24       	eor	r15, r15
    1a48:	ee 24       	eor	r14, r14
    1a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a50:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a52:	a0 70       	andi	r26, 0x00	; 0
    1a54:	b0 70       	andi	r27, 0x00	; 0
    1a56:	57 01       	movw	r10, r14
    1a58:	68 01       	movw	r12, r16
    1a5a:	a8 2a       	or	r10, r24
    1a5c:	b9 2a       	or	r11, r25
    1a5e:	ca 2a       	or	r12, r26
    1a60:	db 2a       	or	r13, r27
    1a62:	a2 16       	cp	r10, r18
    1a64:	b3 06       	cpc	r11, r19
    1a66:	c4 06       	cpc	r12, r20
    1a68:	d5 06       	cpc	r13, r21
    1a6a:	00 f5       	brcc	.+64     	; 0x1aac <__stack+0x9ad>
    1a6c:	08 94       	sec
    1a6e:	61 08       	sbc	r6, r1
    1a70:	71 08       	sbc	r7, r1
    1a72:	81 08       	sbc	r8, r1
    1a74:	91 08       	sbc	r9, r1
    1a76:	6d a1       	ldd	r22, Y+37	; 0x25
    1a78:	7e a1       	ldd	r23, Y+38	; 0x26
    1a7a:	8f a1       	ldd	r24, Y+39	; 0x27
    1a7c:	98 a5       	ldd	r25, Y+40	; 0x28
    1a7e:	a6 0e       	add	r10, r22
    1a80:	b7 1e       	adc	r11, r23
    1a82:	c8 1e       	adc	r12, r24
    1a84:	d9 1e       	adc	r13, r25
    1a86:	a6 16       	cp	r10, r22
    1a88:	b7 06       	cpc	r11, r23
    1a8a:	c8 06       	cpc	r12, r24
    1a8c:	d9 06       	cpc	r13, r25
    1a8e:	70 f0       	brcs	.+28     	; 0x1aac <__stack+0x9ad>
    1a90:	a2 16       	cp	r10, r18
    1a92:	b3 06       	cpc	r11, r19
    1a94:	c4 06       	cpc	r12, r20
    1a96:	d5 06       	cpc	r13, r21
    1a98:	48 f4       	brcc	.+18     	; 0x1aac <__stack+0x9ad>
    1a9a:	08 94       	sec
    1a9c:	61 08       	sbc	r6, r1
    1a9e:	71 08       	sbc	r7, r1
    1aa0:	81 08       	sbc	r8, r1
    1aa2:	91 08       	sbc	r9, r1
    1aa4:	a6 0e       	add	r10, r22
    1aa6:	b7 1e       	adc	r11, r23
    1aa8:	c8 1e       	adc	r12, r24
    1aaa:	d9 1e       	adc	r13, r25
    1aac:	d6 01       	movw	r26, r12
    1aae:	c5 01       	movw	r24, r10
    1ab0:	82 1b       	sub	r24, r18
    1ab2:	93 0b       	sbc	r25, r19
    1ab4:	a4 0b       	sbc	r26, r20
    1ab6:	b5 0b       	sbc	r27, r21
    1ab8:	89 8f       	std	Y+25, r24	; 0x19
    1aba:	9a 8f       	std	Y+26, r25	; 0x1a
    1abc:	ab 8f       	std	Y+27, r26	; 0x1b
    1abe:	bc 8f       	std	Y+28, r27	; 0x1c
    1ac0:	d1 01       	movw	r26, r2
    1ac2:	99 27       	eor	r25, r25
    1ac4:	88 27       	eor	r24, r24
    1ac6:	64 01       	movw	r12, r8
    1ac8:	53 01       	movw	r10, r6
    1aca:	a8 2a       	or	r10, r24
    1acc:	b9 2a       	or	r11, r25
    1ace:	ca 2a       	or	r12, r26
    1ad0:	db 2a       	or	r13, r27
    1ad2:	a9 aa       	std	Y+49, r10	; 0x31
    1ad4:	ba aa       	std	Y+50, r11	; 0x32
    1ad6:	cb aa       	std	Y+51, r12	; 0x33
    1ad8:	dc aa       	std	Y+52, r13	; 0x34
    1ada:	86 01       	movw	r16, r12
    1adc:	75 01       	movw	r14, r10
    1ade:	2f ef       	ldi	r18, 0xFF	; 255
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	e2 22       	and	r14, r18
    1ae8:	f3 22       	and	r15, r19
    1aea:	04 23       	and	r16, r20
    1aec:	15 23       	and	r17, r21
    1aee:	a6 01       	movw	r20, r12
    1af0:	66 27       	eor	r22, r22
    1af2:	77 27       	eor	r23, r23
    1af4:	6d 96       	adiw	r28, 0x1d	; 29
    1af6:	4c af       	std	Y+60, r20	; 0x3c
    1af8:	5d af       	std	Y+61, r21	; 0x3d
    1afa:	6e af       	std	Y+62, r22	; 0x3e
    1afc:	7f af       	std	Y+63, r23	; 0x3f
    1afe:	6d 97       	sbiw	r28, 0x1d	; 29
    1b00:	a9 a0       	ldd	r10, Y+33	; 0x21
    1b02:	ba a0       	ldd	r11, Y+34	; 0x22
    1b04:	cb a0       	ldd	r12, Y+35	; 0x23
    1b06:	dc a0       	ldd	r13, Y+36	; 0x24
    1b08:	6f ef       	ldi	r22, 0xFF	; 255
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a6 22       	and	r10, r22
    1b12:	b7 22       	and	r11, r23
    1b14:	c8 22       	and	r12, r24
    1b16:	d9 22       	and	r13, r25
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	ab a1       	ldd	r26, Y+35	; 0x23
    1b1e:	bc a1       	ldd	r27, Y+36	; 0x24
    1b20:	1d 01       	movw	r2, r26
    1b22:	44 24       	eor	r4, r4
    1b24:	55 24       	eor	r5, r5
    1b26:	c8 01       	movw	r24, r16
    1b28:	b7 01       	movw	r22, r14
    1b2a:	a6 01       	movw	r20, r12
    1b2c:	95 01       	movw	r18, r10
    1b2e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1b32:	69 96       	adiw	r28, 0x19	; 25
    1b34:	6c af       	std	Y+60, r22	; 0x3c
    1b36:	7d af       	std	Y+61, r23	; 0x3d
    1b38:	8e af       	std	Y+62, r24	; 0x3e
    1b3a:	9f af       	std	Y+63, r25	; 0x3f
    1b3c:	69 97       	sbiw	r28, 0x19	; 25
    1b3e:	c8 01       	movw	r24, r16
    1b40:	b7 01       	movw	r22, r14
    1b42:	a2 01       	movw	r20, r4
    1b44:	91 01       	movw	r18, r2
    1b46:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1b4a:	3b 01       	movw	r6, r22
    1b4c:	4c 01       	movw	r8, r24
    1b4e:	6d 96       	adiw	r28, 0x1d	; 29
    1b50:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b52:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b58:	6d 97       	sbiw	r28, 0x1d	; 29
    1b5a:	a6 01       	movw	r20, r12
    1b5c:	95 01       	movw	r18, r10
    1b5e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1b62:	7b 01       	movw	r14, r22
    1b64:	8c 01       	movw	r16, r24
    1b66:	6d 96       	adiw	r28, 0x1d	; 29
    1b68:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b70:	6d 97       	sbiw	r28, 0x1d	; 29
    1b72:	a2 01       	movw	r20, r4
    1b74:	91 01       	movw	r18, r2
    1b76:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    1b7a:	5b 01       	movw	r10, r22
    1b7c:	6c 01       	movw	r12, r24
    1b7e:	a8 01       	movw	r20, r16
    1b80:	97 01       	movw	r18, r14
    1b82:	26 0d       	add	r18, r6
    1b84:	37 1d       	adc	r19, r7
    1b86:	48 1d       	adc	r20, r8
    1b88:	59 1d       	adc	r21, r9
    1b8a:	69 96       	adiw	r28, 0x19	; 25
    1b8c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b8e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b90:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b92:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b94:	69 97       	sbiw	r28, 0x19	; 25
    1b96:	c4 01       	movw	r24, r8
    1b98:	aa 27       	eor	r26, r26
    1b9a:	bb 27       	eor	r27, r27
    1b9c:	28 0f       	add	r18, r24
    1b9e:	39 1f       	adc	r19, r25
    1ba0:	4a 1f       	adc	r20, r26
    1ba2:	5b 1f       	adc	r21, r27
    1ba4:	2e 15       	cp	r18, r14
    1ba6:	3f 05       	cpc	r19, r15
    1ba8:	40 07       	cpc	r20, r16
    1baa:	51 07       	cpc	r21, r17
    1bac:	48 f4       	brcc	.+18     	; 0x1bc0 <__stack+0xac1>
    1bae:	e1 2c       	mov	r14, r1
    1bb0:	f1 2c       	mov	r15, r1
    1bb2:	61 e0       	ldi	r22, 0x01	; 1
    1bb4:	06 2f       	mov	r16, r22
    1bb6:	11 2d       	mov	r17, r1
    1bb8:	ae 0c       	add	r10, r14
    1bba:	bf 1c       	adc	r11, r15
    1bbc:	c0 1e       	adc	r12, r16
    1bbe:	d1 1e       	adc	r13, r17
    1bc0:	ca 01       	movw	r24, r20
    1bc2:	aa 27       	eor	r26, r26
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	6a 0d       	add	r22, r10
    1bcc:	7b 1d       	adc	r23, r11
    1bce:	8c 1d       	adc	r24, r12
    1bd0:	9d 1d       	adc	r25, r13
    1bd2:	69 8c       	ldd	r6, Y+25	; 0x19
    1bd4:	7a 8c       	ldd	r7, Y+26	; 0x1a
    1bd6:	8b 8c       	ldd	r8, Y+27	; 0x1b
    1bd8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    1bda:	66 16       	cp	r6, r22
    1bdc:	77 06       	cpc	r7, r23
    1bde:	88 06       	cpc	r8, r24
    1be0:	99 06       	cpc	r9, r25
    1be2:	40 f1       	brcs	.+80     	; 0x1c34 <__stack+0xb35>
    1be4:	66 15       	cp	r22, r6
    1be6:	77 05       	cpc	r23, r7
    1be8:	88 05       	cpc	r24, r8
    1bea:	99 05       	cpc	r25, r9
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <__stack+0xaf1>
    1bee:	43 c0       	rjmp	.+134    	; 0x1c76 <__stack+0xb77>
    1bf0:	d9 01       	movw	r26, r18
    1bf2:	99 27       	eor	r25, r25
    1bf4:	88 27       	eor	r24, r24
    1bf6:	69 96       	adiw	r28, 0x19	; 25
    1bf8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bfa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bfc:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bfe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c00:	69 97       	sbiw	r28, 0x19	; 25
    1c02:	40 70       	andi	r20, 0x00	; 0
    1c04:	50 70       	andi	r21, 0x00	; 0
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	a4 1f       	adc	r26, r20
    1c0c:	b5 1f       	adc	r27, r21
    1c0e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1c10:	3e a5       	ldd	r19, Y+46	; 0x2e
    1c12:	4f a5       	ldd	r20, Y+47	; 0x2f
    1c14:	58 a9       	ldd	r21, Y+48	; 0x30
    1c16:	6e 96       	adiw	r28, 0x1e	; 30
    1c18:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c1a:	6e 97       	sbiw	r28, 0x1e	; 30
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <__stack+0xb27>
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	44 1f       	adc	r20, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	0a 94       	dec	r0
    1c28:	d2 f7       	brpl	.-12     	; 0x1c1e <__stack+0xb1f>
    1c2a:	28 17       	cp	r18, r24
    1c2c:	39 07       	cpc	r19, r25
    1c2e:	4a 07       	cpc	r20, r26
    1c30:	5b 07       	cpc	r21, r27
    1c32:	08 f5       	brcc	.+66     	; 0x1c76 <__stack+0xb77>
    1c34:	09 a9       	ldd	r16, Y+49	; 0x31
    1c36:	1a a9       	ldd	r17, Y+50	; 0x32
    1c38:	2b a9       	ldd	r18, Y+51	; 0x33
    1c3a:	3c a9       	ldd	r19, Y+52	; 0x34
    1c3c:	01 50       	subi	r16, 0x01	; 1
    1c3e:	10 40       	sbci	r17, 0x00	; 0
    1c40:	20 40       	sbci	r18, 0x00	; 0
    1c42:	30 40       	sbci	r19, 0x00	; 0
    1c44:	09 ab       	std	Y+49, r16	; 0x31
    1c46:	1a ab       	std	Y+50, r17	; 0x32
    1c48:	2b ab       	std	Y+51, r18	; 0x33
    1c4a:	3c ab       	std	Y+52, r19	; 0x34
    1c4c:	14 c0       	rjmp	.+40     	; 0x1c76 <__stack+0xb77>
    1c4e:	66 24       	eor	r6, r6
    1c50:	77 24       	eor	r7, r7
    1c52:	43 01       	movw	r8, r6
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	29 ab       	std	Y+49, r18	; 0x31
    1c5e:	3a ab       	std	Y+50, r19	; 0x32
    1c60:	4b ab       	std	Y+51, r20	; 0x33
    1c62:	5c ab       	std	Y+52, r21	; 0x34
    1c64:	0b c0       	rjmp	.+22     	; 0x1c7c <__stack+0xb7d>
    1c66:	66 24       	eor	r6, r6
    1c68:	77 24       	eor	r7, r7
    1c6a:	43 01       	movw	r8, r6
    1c6c:	19 aa       	std	Y+49, r1	; 0x31
    1c6e:	1a aa       	std	Y+50, r1	; 0x32
    1c70:	1b aa       	std	Y+51, r1	; 0x33
    1c72:	1c aa       	std	Y+52, r1	; 0x34
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <__stack+0xb7d>
    1c76:	66 24       	eor	r6, r6
    1c78:	77 24       	eor	r7, r7
    1c7a:	43 01       	movw	r8, r6
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	71 96       	adiw	r30, 0x11	; 17
    1c80:	88 e0       	ldi	r24, 0x08	; 8
    1c82:	df 01       	movw	r26, r30
    1c84:	1d 92       	st	X+, r1
    1c86:	8a 95       	dec	r24
    1c88:	e9 f7       	brne	.-6      	; 0x1c84 <__stack+0xb85>
    1c8a:	a9 a8       	ldd	r10, Y+49	; 0x31
    1c8c:	ba a8       	ldd	r11, Y+50	; 0x32
    1c8e:	cb a8       	ldd	r12, Y+51	; 0x33
    1c90:	dc a8       	ldd	r13, Y+52	; 0x34
    1c92:	a9 8a       	std	Y+17, r10	; 0x11
    1c94:	ba 8a       	std	Y+18, r11	; 0x12
    1c96:	cb 8a       	std	Y+19, r12	; 0x13
    1c98:	dc 8a       	std	Y+20, r13	; 0x14
    1c9a:	6d 8a       	std	Y+21, r6	; 0x15
    1c9c:	7e 8a       	std	Y+22, r7	; 0x16
    1c9e:	8f 8a       	std	Y+23, r8	; 0x17
    1ca0:	98 8e       	std	Y+24, r9	; 0x18
    1ca2:	29 a9       	ldd	r18, Y+49	; 0x31
    1ca4:	3a 89       	ldd	r19, Y+18	; 0x12
    1ca6:	4b 89       	ldd	r20, Y+19	; 0x13
    1ca8:	5c 89       	ldd	r21, Y+20	; 0x14
    1caa:	66 2d       	mov	r22, r6
    1cac:	7e 89       	ldd	r23, Y+22	; 0x16
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	c2 5a       	subi	r28, 0xA2	; 162
    1cb4:	df 4f       	sbci	r29, 0xFF	; 255
    1cb6:	e2 e1       	ldi	r30, 0x12	; 18
    1cb8:	0c 94 31 3d 	jmp	0x7a62	; 0x7a62 <__epilogue_restores__>

00001cbc <_fpadd_parts>:
    1cbc:	a0 e0       	ldi	r26, 0x00	; 0
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e4 e6       	ldi	r30, 0x64	; 100
    1cc2:	fe e0       	ldi	r31, 0x0E	; 14
    1cc4:	0c 94 15 3d 	jmp	0x7a2a	; 0x7a2a <__prologue_saves__>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	2b 01       	movw	r4, r22
    1ccc:	fa 01       	movw	r30, r20
    1cce:	9c 91       	ld	r25, X
    1cd0:	92 30       	cpi	r25, 0x02	; 2
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <_fpadd_parts+0x1a>
    1cd4:	39 c1       	rjmp	.+626    	; 0x1f48 <_fpadd_parts+0x28c>
    1cd6:	eb 01       	movw	r28, r22
    1cd8:	88 81       	ld	r24, Y
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <_fpadd_parts+0x24>
    1cde:	33 c1       	rjmp	.+614    	; 0x1f46 <_fpadd_parts+0x28a>
    1ce0:	94 30       	cpi	r25, 0x04	; 4
    1ce2:	69 f4       	brne	.+26     	; 0x1cfe <_fpadd_parts+0x42>
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <_fpadd_parts+0x2e>
    1ce8:	2f c1       	rjmp	.+606    	; 0x1f48 <_fpadd_parts+0x28c>
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	9c 91       	ld	r25, X
    1cee:	11 97       	sbiw	r26, 0x01	; 1
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	98 17       	cp	r25, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <_fpadd_parts+0x3c>
    1cf6:	28 c1       	rjmp	.+592    	; 0x1f48 <_fpadd_parts+0x28c>
    1cf8:	a0 e0       	ldi	r26, 0x00	; 0
    1cfa:	b1 e0       	ldi	r27, 0x01	; 1
    1cfc:	25 c1       	rjmp	.+586    	; 0x1f48 <_fpadd_parts+0x28c>
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <_fpadd_parts+0x48>
    1d02:	21 c1       	rjmp	.+578    	; 0x1f46 <_fpadd_parts+0x28a>
    1d04:	82 30       	cpi	r24, 0x02	; 2
    1d06:	a9 f4       	brne	.+42     	; 0x1d32 <_fpadd_parts+0x76>
    1d08:	92 30       	cpi	r25, 0x02	; 2
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <_fpadd_parts+0x52>
    1d0c:	1d c1       	rjmp	.+570    	; 0x1f48 <_fpadd_parts+0x28c>
    1d0e:	9a 01       	movw	r18, r20
    1d10:	ad 01       	movw	r20, r26
    1d12:	88 e0       	ldi	r24, 0x08	; 8
    1d14:	ea 01       	movw	r28, r20
    1d16:	09 90       	ld	r0, Y+
    1d18:	ae 01       	movw	r20, r28
    1d1a:	e9 01       	movw	r28, r18
    1d1c:	09 92       	st	Y+, r0
    1d1e:	9e 01       	movw	r18, r28
    1d20:	81 50       	subi	r24, 0x01	; 1
    1d22:	c1 f7       	brne	.-16     	; 0x1d14 <_fpadd_parts+0x58>
    1d24:	e2 01       	movw	r28, r4
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	11 96       	adiw	r26, 0x01	; 1
    1d2a:	9c 91       	ld	r25, X
    1d2c:	89 23       	and	r24, r25
    1d2e:	81 83       	std	Z+1, r24	; 0x01
    1d30:	08 c1       	rjmp	.+528    	; 0x1f42 <_fpadd_parts+0x286>
    1d32:	92 30       	cpi	r25, 0x02	; 2
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <_fpadd_parts+0x7c>
    1d36:	07 c1       	rjmp	.+526    	; 0x1f46 <_fpadd_parts+0x28a>
    1d38:	12 96       	adiw	r26, 0x02	; 2
    1d3a:	2d 90       	ld	r2, X+
    1d3c:	3c 90       	ld	r3, X
    1d3e:	13 97       	sbiw	r26, 0x03	; 3
    1d40:	eb 01       	movw	r28, r22
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	14 96       	adiw	r26, 0x04	; 4
    1d48:	ad 90       	ld	r10, X+
    1d4a:	bd 90       	ld	r11, X+
    1d4c:	cd 90       	ld	r12, X+
    1d4e:	dc 90       	ld	r13, X
    1d50:	17 97       	sbiw	r26, 0x07	; 7
    1d52:	ec 80       	ldd	r14, Y+4	; 0x04
    1d54:	fd 80       	ldd	r15, Y+5	; 0x05
    1d56:	0e 81       	ldd	r16, Y+6	; 0x06
    1d58:	1f 81       	ldd	r17, Y+7	; 0x07
    1d5a:	91 01       	movw	r18, r2
    1d5c:	28 1b       	sub	r18, r24
    1d5e:	39 0b       	sbc	r19, r25
    1d60:	b9 01       	movw	r22, r18
    1d62:	37 ff       	sbrs	r19, 7
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <_fpadd_parts+0xb2>
    1d66:	66 27       	eor	r22, r22
    1d68:	77 27       	eor	r23, r23
    1d6a:	62 1b       	sub	r22, r18
    1d6c:	73 0b       	sbc	r23, r19
    1d6e:	60 32       	cpi	r22, 0x20	; 32
    1d70:	71 05       	cpc	r23, r1
    1d72:	0c f0       	brlt	.+2      	; 0x1d76 <_fpadd_parts+0xba>
    1d74:	61 c0       	rjmp	.+194    	; 0x1e38 <_fpadd_parts+0x17c>
    1d76:	12 16       	cp	r1, r18
    1d78:	13 06       	cpc	r1, r19
    1d7a:	6c f5       	brge	.+90     	; 0x1dd6 <_fpadd_parts+0x11a>
    1d7c:	37 01       	movw	r6, r14
    1d7e:	48 01       	movw	r8, r16
    1d80:	06 2e       	mov	r0, r22
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <_fpadd_parts+0xd0>
    1d84:	96 94       	lsr	r9
    1d86:	87 94       	ror	r8
    1d88:	77 94       	ror	r7
    1d8a:	67 94       	ror	r6
    1d8c:	0a 94       	dec	r0
    1d8e:	d2 f7       	brpl	.-12     	; 0x1d84 <_fpadd_parts+0xc8>
    1d90:	21 e0       	ldi	r18, 0x01	; 1
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <_fpadd_parts+0xe6>
    1d9a:	22 0f       	add	r18, r18
    1d9c:	33 1f       	adc	r19, r19
    1d9e:	44 1f       	adc	r20, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	6a 95       	dec	r22
    1da4:	d2 f7       	brpl	.-12     	; 0x1d9a <_fpadd_parts+0xde>
    1da6:	21 50       	subi	r18, 0x01	; 1
    1da8:	30 40       	sbci	r19, 0x00	; 0
    1daa:	40 40       	sbci	r20, 0x00	; 0
    1dac:	50 40       	sbci	r21, 0x00	; 0
    1dae:	2e 21       	and	r18, r14
    1db0:	3f 21       	and	r19, r15
    1db2:	40 23       	and	r20, r16
    1db4:	51 23       	and	r21, r17
    1db6:	21 15       	cp	r18, r1
    1db8:	31 05       	cpc	r19, r1
    1dba:	41 05       	cpc	r20, r1
    1dbc:	51 05       	cpc	r21, r1
    1dbe:	21 f0       	breq	.+8      	; 0x1dc8 <_fpadd_parts+0x10c>
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	79 01       	movw	r14, r18
    1dca:	8a 01       	movw	r16, r20
    1dcc:	e6 28       	or	r14, r6
    1dce:	f7 28       	or	r15, r7
    1dd0:	08 29       	or	r16, r8
    1dd2:	19 29       	or	r17, r9
    1dd4:	3c c0       	rjmp	.+120    	; 0x1e4e <_fpadd_parts+0x192>
    1dd6:	23 2b       	or	r18, r19
    1dd8:	d1 f1       	breq	.+116    	; 0x1e4e <_fpadd_parts+0x192>
    1dda:	26 0e       	add	r2, r22
    1ddc:	37 1e       	adc	r3, r23
    1dde:	35 01       	movw	r6, r10
    1de0:	46 01       	movw	r8, r12
    1de2:	06 2e       	mov	r0, r22
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <_fpadd_parts+0x132>
    1de6:	96 94       	lsr	r9
    1de8:	87 94       	ror	r8
    1dea:	77 94       	ror	r7
    1dec:	67 94       	ror	r6
    1dee:	0a 94       	dec	r0
    1df0:	d2 f7       	brpl	.-12     	; 0x1de6 <_fpadd_parts+0x12a>
    1df2:	21 e0       	ldi	r18, 0x01	; 1
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <_fpadd_parts+0x148>
    1dfc:	22 0f       	add	r18, r18
    1dfe:	33 1f       	adc	r19, r19
    1e00:	44 1f       	adc	r20, r20
    1e02:	55 1f       	adc	r21, r21
    1e04:	6a 95       	dec	r22
    1e06:	d2 f7       	brpl	.-12     	; 0x1dfc <_fpadd_parts+0x140>
    1e08:	21 50       	subi	r18, 0x01	; 1
    1e0a:	30 40       	sbci	r19, 0x00	; 0
    1e0c:	40 40       	sbci	r20, 0x00	; 0
    1e0e:	50 40       	sbci	r21, 0x00	; 0
    1e10:	2a 21       	and	r18, r10
    1e12:	3b 21       	and	r19, r11
    1e14:	4c 21       	and	r20, r12
    1e16:	5d 21       	and	r21, r13
    1e18:	21 15       	cp	r18, r1
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	41 05       	cpc	r20, r1
    1e1e:	51 05       	cpc	r21, r1
    1e20:	21 f0       	breq	.+8      	; 0x1e2a <_fpadd_parts+0x16e>
    1e22:	21 e0       	ldi	r18, 0x01	; 1
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	59 01       	movw	r10, r18
    1e2c:	6a 01       	movw	r12, r20
    1e2e:	a6 28       	or	r10, r6
    1e30:	b7 28       	or	r11, r7
    1e32:	c8 28       	or	r12, r8
    1e34:	d9 28       	or	r13, r9
    1e36:	0b c0       	rjmp	.+22     	; 0x1e4e <_fpadd_parts+0x192>
    1e38:	82 15       	cp	r24, r2
    1e3a:	93 05       	cpc	r25, r3
    1e3c:	2c f0       	brlt	.+10     	; 0x1e48 <_fpadd_parts+0x18c>
    1e3e:	1c 01       	movw	r2, r24
    1e40:	aa 24       	eor	r10, r10
    1e42:	bb 24       	eor	r11, r11
    1e44:	65 01       	movw	r12, r10
    1e46:	03 c0       	rjmp	.+6      	; 0x1e4e <_fpadd_parts+0x192>
    1e48:	ee 24       	eor	r14, r14
    1e4a:	ff 24       	eor	r15, r15
    1e4c:	87 01       	movw	r16, r14
    1e4e:	11 96       	adiw	r26, 0x01	; 1
    1e50:	9c 91       	ld	r25, X
    1e52:	d2 01       	movw	r26, r4
    1e54:	11 96       	adiw	r26, 0x01	; 1
    1e56:	8c 91       	ld	r24, X
    1e58:	98 17       	cp	r25, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <_fpadd_parts+0x1a2>
    1e5c:	45 c0       	rjmp	.+138    	; 0x1ee8 <_fpadd_parts+0x22c>
    1e5e:	99 23       	and	r25, r25
    1e60:	39 f0       	breq	.+14     	; 0x1e70 <_fpadd_parts+0x1b4>
    1e62:	a8 01       	movw	r20, r16
    1e64:	97 01       	movw	r18, r14
    1e66:	2a 19       	sub	r18, r10
    1e68:	3b 09       	sbc	r19, r11
    1e6a:	4c 09       	sbc	r20, r12
    1e6c:	5d 09       	sbc	r21, r13
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <_fpadd_parts+0x1c0>
    1e70:	a6 01       	movw	r20, r12
    1e72:	95 01       	movw	r18, r10
    1e74:	2e 19       	sub	r18, r14
    1e76:	3f 09       	sbc	r19, r15
    1e78:	40 0b       	sbc	r20, r16
    1e7a:	51 0b       	sbc	r21, r17
    1e7c:	57 fd       	sbrc	r21, 7
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <_fpadd_parts+0x1d4>
    1e80:	11 82       	std	Z+1, r1	; 0x01
    1e82:	33 82       	std	Z+3, r3	; 0x03
    1e84:	22 82       	std	Z+2, r2	; 0x02
    1e86:	24 83       	std	Z+4, r18	; 0x04
    1e88:	35 83       	std	Z+5, r19	; 0x05
    1e8a:	46 83       	std	Z+6, r20	; 0x06
    1e8c:	57 83       	std	Z+7, r21	; 0x07
    1e8e:	1d c0       	rjmp	.+58     	; 0x1eca <_fpadd_parts+0x20e>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	81 83       	std	Z+1, r24	; 0x01
    1e94:	33 82       	std	Z+3, r3	; 0x03
    1e96:	22 82       	std	Z+2, r2	; 0x02
    1e98:	88 27       	eor	r24, r24
    1e9a:	99 27       	eor	r25, r25
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	82 1b       	sub	r24, r18
    1ea0:	93 0b       	sbc	r25, r19
    1ea2:	a4 0b       	sbc	r26, r20
    1ea4:	b5 0b       	sbc	r27, r21
    1ea6:	84 83       	std	Z+4, r24	; 0x04
    1ea8:	95 83       	std	Z+5, r25	; 0x05
    1eaa:	a6 83       	std	Z+6, r26	; 0x06
    1eac:	b7 83       	std	Z+7, r27	; 0x07
    1eae:	0d c0       	rjmp	.+26     	; 0x1eca <_fpadd_parts+0x20e>
    1eb0:	22 0f       	add	r18, r18
    1eb2:	33 1f       	adc	r19, r19
    1eb4:	44 1f       	adc	r20, r20
    1eb6:	55 1f       	adc	r21, r21
    1eb8:	24 83       	std	Z+4, r18	; 0x04
    1eba:	35 83       	std	Z+5, r19	; 0x05
    1ebc:	46 83       	std	Z+6, r20	; 0x06
    1ebe:	57 83       	std	Z+7, r21	; 0x07
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	93 83       	std	Z+3, r25	; 0x03
    1ec8:	82 83       	std	Z+2, r24	; 0x02
    1eca:	24 81       	ldd	r18, Z+4	; 0x04
    1ecc:	35 81       	ldd	r19, Z+5	; 0x05
    1ece:	46 81       	ldd	r20, Z+6	; 0x06
    1ed0:	57 81       	ldd	r21, Z+7	; 0x07
    1ed2:	da 01       	movw	r26, r20
    1ed4:	c9 01       	movw	r24, r18
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	a1 09       	sbc	r26, r1
    1eda:	b1 09       	sbc	r27, r1
    1edc:	8f 5f       	subi	r24, 0xFF	; 255
    1ede:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee0:	af 4f       	sbci	r26, 0xFF	; 255
    1ee2:	bf 43       	sbci	r27, 0x3F	; 63
    1ee4:	28 f3       	brcs	.-54     	; 0x1eb0 <_fpadd_parts+0x1f4>
    1ee6:	0b c0       	rjmp	.+22     	; 0x1efe <_fpadd_parts+0x242>
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	33 82       	std	Z+3, r3	; 0x03
    1eec:	22 82       	std	Z+2, r2	; 0x02
    1eee:	ea 0c       	add	r14, r10
    1ef0:	fb 1c       	adc	r15, r11
    1ef2:	0c 1d       	adc	r16, r12
    1ef4:	1d 1d       	adc	r17, r13
    1ef6:	e4 82       	std	Z+4, r14	; 0x04
    1ef8:	f5 82       	std	Z+5, r15	; 0x05
    1efa:	06 83       	std	Z+6, r16	; 0x06
    1efc:	17 83       	std	Z+7, r17	; 0x07
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	80 83       	st	Z, r24
    1f02:	24 81       	ldd	r18, Z+4	; 0x04
    1f04:	35 81       	ldd	r19, Z+5	; 0x05
    1f06:	46 81       	ldd	r20, Z+6	; 0x06
    1f08:	57 81       	ldd	r21, Z+7	; 0x07
    1f0a:	57 ff       	sbrs	r21, 7
    1f0c:	1a c0       	rjmp	.+52     	; 0x1f42 <_fpadd_parts+0x286>
    1f0e:	c9 01       	movw	r24, r18
    1f10:	aa 27       	eor	r26, r26
    1f12:	97 fd       	sbrc	r25, 7
    1f14:	a0 95       	com	r26
    1f16:	ba 2f       	mov	r27, r26
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	90 70       	andi	r25, 0x00	; 0
    1f1c:	a0 70       	andi	r26, 0x00	; 0
    1f1e:	b0 70       	andi	r27, 0x00	; 0
    1f20:	56 95       	lsr	r21
    1f22:	47 95       	ror	r20
    1f24:	37 95       	ror	r19
    1f26:	27 95       	ror	r18
    1f28:	82 2b       	or	r24, r18
    1f2a:	93 2b       	or	r25, r19
    1f2c:	a4 2b       	or	r26, r20
    1f2e:	b5 2b       	or	r27, r21
    1f30:	84 83       	std	Z+4, r24	; 0x04
    1f32:	95 83       	std	Z+5, r25	; 0x05
    1f34:	a6 83       	std	Z+6, r26	; 0x06
    1f36:	b7 83       	std	Z+7, r27	; 0x07
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	93 83       	std	Z+3, r25	; 0x03
    1f40:	82 83       	std	Z+2, r24	; 0x02
    1f42:	df 01       	movw	r26, r30
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <_fpadd_parts+0x28c>
    1f46:	d2 01       	movw	r26, r4
    1f48:	cd 01       	movw	r24, r26
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	e2 e1       	ldi	r30, 0x12	; 18
    1f50:	0c 94 31 3d 	jmp	0x7a62	; 0x7a62 <__epilogue_restores__>

00001f54 <__subsf3>:
    1f54:	a0 e2       	ldi	r26, 0x20	; 32
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <__prologue_saves__+0x18>
    1f60:	69 83       	std	Y+1, r22	; 0x01
    1f62:	7a 83       	std	Y+2, r23	; 0x02
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	2d 83       	std	Y+5, r18	; 0x05
    1f6a:	3e 83       	std	Y+6, r19	; 0x06
    1f6c:	4f 83       	std	Y+7, r20	; 0x07
    1f6e:	58 87       	std	Y+8, r21	; 0x08
    1f70:	e9 e0       	ldi	r30, 0x09	; 9
    1f72:	ee 2e       	mov	r14, r30
    1f74:	f1 2c       	mov	r15, r1
    1f76:	ec 0e       	add	r14, r28
    1f78:	fd 1e       	adc	r15, r29
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	b7 01       	movw	r22, r14
    1f80:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    1f84:	8e 01       	movw	r16, r28
    1f86:	0f 5e       	subi	r16, 0xEF	; 239
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	05 96       	adiw	r24, 0x05	; 5
    1f8e:	b8 01       	movw	r22, r16
    1f90:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    1f94:	8a 89       	ldd	r24, Y+18	; 0x12
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	89 27       	eor	r24, r25
    1f9a:	8a 8b       	std	Y+18, r24	; 0x12
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	b8 01       	movw	r22, r16
    1fa0:	ae 01       	movw	r20, r28
    1fa2:	47 5e       	subi	r20, 0xE7	; 231
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_fpadd_parts>
    1faa:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__pack_f>
    1fae:	a0 96       	adiw	r28, 0x20	; 32
    1fb0:	e6 e0       	ldi	r30, 0x06	; 6
    1fb2:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <__epilogue_restores__+0x18>

00001fb6 <__addsf3>:
    1fb6:	a0 e2       	ldi	r26, 0x20	; 32
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e1 ee       	ldi	r30, 0xE1	; 225
    1fbc:	ff e0       	ldi	r31, 0x0F	; 15
    1fbe:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <__prologue_saves__+0x18>
    1fc2:	69 83       	std	Y+1, r22	; 0x01
    1fc4:	7a 83       	std	Y+2, r23	; 0x02
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	2d 83       	std	Y+5, r18	; 0x05
    1fcc:	3e 83       	std	Y+6, r19	; 0x06
    1fce:	4f 83       	std	Y+7, r20	; 0x07
    1fd0:	58 87       	std	Y+8, r21	; 0x08
    1fd2:	f9 e0       	ldi	r31, 0x09	; 9
    1fd4:	ef 2e       	mov	r14, r31
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	ec 0e       	add	r14, r28
    1fda:	fd 1e       	adc	r15, r29
    1fdc:	ce 01       	movw	r24, r28
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	b7 01       	movw	r22, r14
    1fe2:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    1fe6:	8e 01       	movw	r16, r28
    1fe8:	0f 5e       	subi	r16, 0xEF	; 239
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	ce 01       	movw	r24, r28
    1fee:	05 96       	adiw	r24, 0x05	; 5
    1ff0:	b8 01       	movw	r22, r16
    1ff2:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    1ff6:	c7 01       	movw	r24, r14
    1ff8:	b8 01       	movw	r22, r16
    1ffa:	ae 01       	movw	r20, r28
    1ffc:	47 5e       	subi	r20, 0xE7	; 231
    1ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    2000:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_fpadd_parts>
    2004:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__pack_f>
    2008:	a0 96       	adiw	r28, 0x20	; 32
    200a:	e6 e0       	ldi	r30, 0x06	; 6
    200c:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <__epilogue_restores__+0x18>

00002010 <__mulsf3>:
    2010:	a0 e2       	ldi	r26, 0x20	; 32
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ee e0       	ldi	r30, 0x0E	; 14
    2016:	f0 e1       	ldi	r31, 0x10	; 16
    2018:	0c 94 15 3d 	jmp	0x7a2a	; 0x7a2a <__prologue_saves__>
    201c:	69 83       	std	Y+1, r22	; 0x01
    201e:	7a 83       	std	Y+2, r23	; 0x02
    2020:	8b 83       	std	Y+3, r24	; 0x03
    2022:	9c 83       	std	Y+4, r25	; 0x04
    2024:	2d 83       	std	Y+5, r18	; 0x05
    2026:	3e 83       	std	Y+6, r19	; 0x06
    2028:	4f 83       	std	Y+7, r20	; 0x07
    202a:	58 87       	std	Y+8, r21	; 0x08
    202c:	ce 01       	movw	r24, r28
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	be 01       	movw	r22, r28
    2032:	67 5f       	subi	r22, 0xF7	; 247
    2034:	7f 4f       	sbci	r23, 0xFF	; 255
    2036:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    203a:	ce 01       	movw	r24, r28
    203c:	05 96       	adiw	r24, 0x05	; 5
    203e:	be 01       	movw	r22, r28
    2040:	6f 5e       	subi	r22, 0xEF	; 239
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    2048:	99 85       	ldd	r25, Y+9	; 0x09
    204a:	92 30       	cpi	r25, 0x02	; 2
    204c:	88 f0       	brcs	.+34     	; 0x2070 <__mulsf3+0x60>
    204e:	89 89       	ldd	r24, Y+17	; 0x11
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	c8 f0       	brcs	.+50     	; 0x2086 <__mulsf3+0x76>
    2054:	94 30       	cpi	r25, 0x04	; 4
    2056:	19 f4       	brne	.+6      	; 0x205e <__mulsf3+0x4e>
    2058:	82 30       	cpi	r24, 0x02	; 2
    205a:	51 f4       	brne	.+20     	; 0x2070 <__mulsf3+0x60>
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <__mulsf3+0x56>
    205e:	84 30       	cpi	r24, 0x04	; 4
    2060:	29 f4       	brne	.+10     	; 0x206c <__mulsf3+0x5c>
    2062:	92 30       	cpi	r25, 0x02	; 2
    2064:	81 f4       	brne	.+32     	; 0x2086 <__mulsf3+0x76>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	c6 c0       	rjmp	.+396    	; 0x21f8 <__mulsf3+0x1e8>
    206c:	92 30       	cpi	r25, 0x02	; 2
    206e:	49 f4       	brne	.+18     	; 0x2082 <__mulsf3+0x72>
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	8a 89       	ldd	r24, Y+18	; 0x12
    2076:	98 13       	cpse	r25, r24
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	2a 87       	std	Y+10, r18	; 0x0a
    207c:	ce 01       	movw	r24, r28
    207e:	09 96       	adiw	r24, 0x09	; 9
    2080:	bb c0       	rjmp	.+374    	; 0x21f8 <__mulsf3+0x1e8>
    2082:	82 30       	cpi	r24, 0x02	; 2
    2084:	49 f4       	brne	.+18     	; 0x2098 <__mulsf3+0x88>
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	8a 89       	ldd	r24, Y+18	; 0x12
    208c:	98 13       	cpse	r25, r24
    208e:	21 e0       	ldi	r18, 0x01	; 1
    2090:	2a 8b       	std	Y+18, r18	; 0x12
    2092:	ce 01       	movw	r24, r28
    2094:	41 96       	adiw	r24, 0x11	; 17
    2096:	b0 c0       	rjmp	.+352    	; 0x21f8 <__mulsf3+0x1e8>
    2098:	2d 84       	ldd	r2, Y+13	; 0x0d
    209a:	3e 84       	ldd	r3, Y+14	; 0x0e
    209c:	4f 84       	ldd	r4, Y+15	; 0x0f
    209e:	58 88       	ldd	r5, Y+16	; 0x10
    20a0:	6d 88       	ldd	r6, Y+21	; 0x15
    20a2:	7e 88       	ldd	r7, Y+22	; 0x16
    20a4:	8f 88       	ldd	r8, Y+23	; 0x17
    20a6:	98 8c       	ldd	r9, Y+24	; 0x18
    20a8:	ee 24       	eor	r14, r14
    20aa:	ff 24       	eor	r15, r15
    20ac:	87 01       	movw	r16, r14
    20ae:	aa 24       	eor	r10, r10
    20b0:	bb 24       	eor	r11, r11
    20b2:	65 01       	movw	r12, r10
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	e0 e0       	ldi	r30, 0x00	; 0
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	c1 01       	movw	r24, r2
    20c2:	81 70       	andi	r24, 0x01	; 1
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	89 2b       	or	r24, r25
    20c8:	e9 f0       	breq	.+58     	; 0x2104 <__mulsf3+0xf4>
    20ca:	e6 0c       	add	r14, r6
    20cc:	f7 1c       	adc	r15, r7
    20ce:	08 1d       	adc	r16, r8
    20d0:	19 1d       	adc	r17, r9
    20d2:	9a 01       	movw	r18, r20
    20d4:	ab 01       	movw	r20, r22
    20d6:	2a 0d       	add	r18, r10
    20d8:	3b 1d       	adc	r19, r11
    20da:	4c 1d       	adc	r20, r12
    20dc:	5d 1d       	adc	r21, r13
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e6 14       	cp	r14, r6
    20e8:	f7 04       	cpc	r15, r7
    20ea:	08 05       	cpc	r16, r8
    20ec:	19 05       	cpc	r17, r9
    20ee:	20 f4       	brcc	.+8      	; 0x20f8 <__mulsf3+0xe8>
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e0       	ldi	r26, 0x00	; 0
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	ba 01       	movw	r22, r20
    20fa:	a9 01       	movw	r20, r18
    20fc:	48 0f       	add	r20, r24
    20fe:	59 1f       	adc	r21, r25
    2100:	6a 1f       	adc	r22, r26
    2102:	7b 1f       	adc	r23, r27
    2104:	aa 0c       	add	r10, r10
    2106:	bb 1c       	adc	r11, r11
    2108:	cc 1c       	adc	r12, r12
    210a:	dd 1c       	adc	r13, r13
    210c:	97 fe       	sbrs	r9, 7
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <__mulsf3+0x110>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e0       	ldi	r26, 0x00	; 0
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	a8 2a       	or	r10, r24
    211a:	b9 2a       	or	r11, r25
    211c:	ca 2a       	or	r12, r26
    211e:	db 2a       	or	r13, r27
    2120:	31 96       	adiw	r30, 0x01	; 1
    2122:	e0 32       	cpi	r30, 0x20	; 32
    2124:	f1 05       	cpc	r31, r1
    2126:	49 f0       	breq	.+18     	; 0x213a <__mulsf3+0x12a>
    2128:	66 0c       	add	r6, r6
    212a:	77 1c       	adc	r7, r7
    212c:	88 1c       	adc	r8, r8
    212e:	99 1c       	adc	r9, r9
    2130:	56 94       	lsr	r5
    2132:	47 94       	ror	r4
    2134:	37 94       	ror	r3
    2136:	27 94       	ror	r2
    2138:	c3 cf       	rjmp	.-122    	; 0x20c0 <__mulsf3+0xb0>
    213a:	fa 85       	ldd	r31, Y+10	; 0x0a
    213c:	ea 89       	ldd	r30, Y+18	; 0x12
    213e:	2b 89       	ldd	r18, Y+19	; 0x13
    2140:	3c 89       	ldd	r19, Y+20	; 0x14
    2142:	8b 85       	ldd	r24, Y+11	; 0x0b
    2144:	9c 85       	ldd	r25, Y+12	; 0x0c
    2146:	28 0f       	add	r18, r24
    2148:	39 1f       	adc	r19, r25
    214a:	2e 5f       	subi	r18, 0xFE	; 254
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	17 c0       	rjmp	.+46     	; 0x217e <__mulsf3+0x16e>
    2150:	ca 01       	movw	r24, r20
    2152:	81 70       	andi	r24, 0x01	; 1
    2154:	90 70       	andi	r25, 0x00	; 0
    2156:	89 2b       	or	r24, r25
    2158:	61 f0       	breq	.+24     	; 0x2172 <__mulsf3+0x162>
    215a:	16 95       	lsr	r17
    215c:	07 95       	ror	r16
    215e:	f7 94       	ror	r15
    2160:	e7 94       	ror	r14
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e8       	ldi	r27, 0x80	; 128
    216a:	e8 2a       	or	r14, r24
    216c:	f9 2a       	or	r15, r25
    216e:	0a 2b       	or	r16, r26
    2170:	1b 2b       	or	r17, r27
    2172:	76 95       	lsr	r23
    2174:	67 95       	ror	r22
    2176:	57 95       	ror	r21
    2178:	47 95       	ror	r20
    217a:	2f 5f       	subi	r18, 0xFF	; 255
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	77 fd       	sbrc	r23, 7
    2180:	e7 cf       	rjmp	.-50     	; 0x2150 <__mulsf3+0x140>
    2182:	0c c0       	rjmp	.+24     	; 0x219c <__mulsf3+0x18c>
    2184:	44 0f       	add	r20, r20
    2186:	55 1f       	adc	r21, r21
    2188:	66 1f       	adc	r22, r22
    218a:	77 1f       	adc	r23, r23
    218c:	17 fd       	sbrc	r17, 7
    218e:	41 60       	ori	r20, 0x01	; 1
    2190:	ee 0c       	add	r14, r14
    2192:	ff 1c       	adc	r15, r15
    2194:	00 1f       	adc	r16, r16
    2196:	11 1f       	adc	r17, r17
    2198:	21 50       	subi	r18, 0x01	; 1
    219a:	30 40       	sbci	r19, 0x00	; 0
    219c:	40 30       	cpi	r20, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	59 07       	cpc	r21, r25
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	69 07       	cpc	r22, r25
    21a6:	90 e4       	ldi	r25, 0x40	; 64
    21a8:	79 07       	cpc	r23, r25
    21aa:	60 f3       	brcs	.-40     	; 0x2184 <__mulsf3+0x174>
    21ac:	2b 8f       	std	Y+27, r18	; 0x1b
    21ae:	3c 8f       	std	Y+28, r19	; 0x1c
    21b0:	db 01       	movw	r26, r22
    21b2:	ca 01       	movw	r24, r20
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	90 70       	andi	r25, 0x00	; 0
    21b8:	a0 70       	andi	r26, 0x00	; 0
    21ba:	b0 70       	andi	r27, 0x00	; 0
    21bc:	80 34       	cpi	r24, 0x40	; 64
    21be:	91 05       	cpc	r25, r1
    21c0:	a1 05       	cpc	r26, r1
    21c2:	b1 05       	cpc	r27, r1
    21c4:	61 f4       	brne	.+24     	; 0x21de <__mulsf3+0x1ce>
    21c6:	47 fd       	sbrc	r20, 7
    21c8:	0a c0       	rjmp	.+20     	; 0x21de <__mulsf3+0x1ce>
    21ca:	e1 14       	cp	r14, r1
    21cc:	f1 04       	cpc	r15, r1
    21ce:	01 05       	cpc	r16, r1
    21d0:	11 05       	cpc	r17, r1
    21d2:	29 f0       	breq	.+10     	; 0x21de <__mulsf3+0x1ce>
    21d4:	40 5c       	subi	r20, 0xC0	; 192
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	6f 4f       	sbci	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	40 78       	andi	r20, 0x80	; 128
    21de:	1a 8e       	std	Y+26, r1	; 0x1a
    21e0:	fe 17       	cp	r31, r30
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <__mulsf3+0x1d8>
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	8a 8f       	std	Y+26, r24	; 0x1a
    21e8:	4d 8f       	std	Y+29, r20	; 0x1d
    21ea:	5e 8f       	std	Y+30, r21	; 0x1e
    21ec:	6f 8f       	std	Y+31, r22	; 0x1f
    21ee:	78 a3       	std	Y+32, r23	; 0x20
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	89 8f       	std	Y+25, r24	; 0x19
    21f4:	ce 01       	movw	r24, r28
    21f6:	49 96       	adiw	r24, 0x19	; 25
    21f8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__pack_f>
    21fc:	a0 96       	adiw	r28, 0x20	; 32
    21fe:	e2 e1       	ldi	r30, 0x12	; 18
    2200:	0c 94 31 3d 	jmp	0x7a62	; 0x7a62 <__epilogue_restores__>

00002204 <__divsf3>:
    2204:	a8 e1       	ldi	r26, 0x18	; 24
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e8 e0       	ldi	r30, 0x08	; 8
    220a:	f1 e1       	ldi	r31, 0x11	; 17
    220c:	0c 94 1d 3d 	jmp	0x7a3a	; 0x7a3a <__prologue_saves__+0x10>
    2210:	69 83       	std	Y+1, r22	; 0x01
    2212:	7a 83       	std	Y+2, r23	; 0x02
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	2d 83       	std	Y+5, r18	; 0x05
    221a:	3e 83       	std	Y+6, r19	; 0x06
    221c:	4f 83       	std	Y+7, r20	; 0x07
    221e:	58 87       	std	Y+8, r21	; 0x08
    2220:	b9 e0       	ldi	r27, 0x09	; 9
    2222:	eb 2e       	mov	r14, r27
    2224:	f1 2c       	mov	r15, r1
    2226:	ec 0e       	add	r14, r28
    2228:	fd 1e       	adc	r15, r29
    222a:	ce 01       	movw	r24, r28
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	b7 01       	movw	r22, r14
    2230:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    2234:	8e 01       	movw	r16, r28
    2236:	0f 5e       	subi	r16, 0xEF	; 239
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	ce 01       	movw	r24, r28
    223c:	05 96       	adiw	r24, 0x05	; 5
    223e:	b8 01       	movw	r22, r16
    2240:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    2244:	29 85       	ldd	r18, Y+9	; 0x09
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	08 f4       	brcc	.+2      	; 0x224c <__divsf3+0x48>
    224a:	7e c0       	rjmp	.+252    	; 0x2348 <__divsf3+0x144>
    224c:	39 89       	ldd	r19, Y+17	; 0x11
    224e:	32 30       	cpi	r19, 0x02	; 2
    2250:	10 f4       	brcc	.+4      	; 0x2256 <__divsf3+0x52>
    2252:	b8 01       	movw	r22, r16
    2254:	7c c0       	rjmp	.+248    	; 0x234e <__divsf3+0x14a>
    2256:	8a 85       	ldd	r24, Y+10	; 0x0a
    2258:	9a 89       	ldd	r25, Y+18	; 0x12
    225a:	89 27       	eor	r24, r25
    225c:	8a 87       	std	Y+10, r24	; 0x0a
    225e:	24 30       	cpi	r18, 0x04	; 4
    2260:	11 f0       	breq	.+4      	; 0x2266 <__divsf3+0x62>
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 f4       	brne	.+12     	; 0x2272 <__divsf3+0x6e>
    2266:	23 17       	cp	r18, r19
    2268:	09 f0       	breq	.+2      	; 0x226c <__divsf3+0x68>
    226a:	6e c0       	rjmp	.+220    	; 0x2348 <__divsf3+0x144>
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	71 e0       	ldi	r23, 0x01	; 1
    2270:	6e c0       	rjmp	.+220    	; 0x234e <__divsf3+0x14a>
    2272:	34 30       	cpi	r19, 0x04	; 4
    2274:	39 f4       	brne	.+14     	; 0x2284 <__divsf3+0x80>
    2276:	1d 86       	std	Y+13, r1	; 0x0d
    2278:	1e 86       	std	Y+14, r1	; 0x0e
    227a:	1f 86       	std	Y+15, r1	; 0x0f
    227c:	18 8a       	std	Y+16, r1	; 0x10
    227e:	1c 86       	std	Y+12, r1	; 0x0c
    2280:	1b 86       	std	Y+11, r1	; 0x0b
    2282:	04 c0       	rjmp	.+8      	; 0x228c <__divsf3+0x88>
    2284:	32 30       	cpi	r19, 0x02	; 2
    2286:	21 f4       	brne	.+8      	; 0x2290 <__divsf3+0x8c>
    2288:	84 e0       	ldi	r24, 0x04	; 4
    228a:	89 87       	std	Y+9, r24	; 0x09
    228c:	b7 01       	movw	r22, r14
    228e:	5f c0       	rjmp	.+190    	; 0x234e <__divsf3+0x14a>
    2290:	2b 85       	ldd	r18, Y+11	; 0x0b
    2292:	3c 85       	ldd	r19, Y+12	; 0x0c
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	28 1b       	sub	r18, r24
    229a:	39 0b       	sbc	r19, r25
    229c:	3c 87       	std	Y+12, r19	; 0x0c
    229e:	2b 87       	std	Y+11, r18	; 0x0b
    22a0:	ed 84       	ldd	r14, Y+13	; 0x0d
    22a2:	fe 84       	ldd	r15, Y+14	; 0x0e
    22a4:	0f 85       	ldd	r16, Y+15	; 0x0f
    22a6:	18 89       	ldd	r17, Y+16	; 0x10
    22a8:	ad 88       	ldd	r10, Y+21	; 0x15
    22aa:	be 88       	ldd	r11, Y+22	; 0x16
    22ac:	cf 88       	ldd	r12, Y+23	; 0x17
    22ae:	d8 8c       	ldd	r13, Y+24	; 0x18
    22b0:	ea 14       	cp	r14, r10
    22b2:	fb 04       	cpc	r15, r11
    22b4:	0c 05       	cpc	r16, r12
    22b6:	1d 05       	cpc	r17, r13
    22b8:	40 f4       	brcc	.+16     	; 0x22ca <__divsf3+0xc6>
    22ba:	ee 0c       	add	r14, r14
    22bc:	ff 1c       	adc	r15, r15
    22be:	00 1f       	adc	r16, r16
    22c0:	11 1f       	adc	r17, r17
    22c2:	21 50       	subi	r18, 0x01	; 1
    22c4:	30 40       	sbci	r19, 0x00	; 0
    22c6:	3c 87       	std	Y+12, r19	; 0x0c
    22c8:	2b 87       	std	Y+11, r18	; 0x0b
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 e0       	ldi	r26, 0x00	; 0
    22d8:	b0 e4       	ldi	r27, 0x40	; 64
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	ea 14       	cp	r14, r10
    22e0:	fb 04       	cpc	r15, r11
    22e2:	0c 05       	cpc	r16, r12
    22e4:	1d 05       	cpc	r17, r13
    22e6:	40 f0       	brcs	.+16     	; 0x22f8 <__divsf3+0xf4>
    22e8:	28 2b       	or	r18, r24
    22ea:	39 2b       	or	r19, r25
    22ec:	4a 2b       	or	r20, r26
    22ee:	5b 2b       	or	r21, r27
    22f0:	ea 18       	sub	r14, r10
    22f2:	fb 08       	sbc	r15, r11
    22f4:	0c 09       	sbc	r16, r12
    22f6:	1d 09       	sbc	r17, r13
    22f8:	b6 95       	lsr	r27
    22fa:	a7 95       	ror	r26
    22fc:	97 95       	ror	r25
    22fe:	87 95       	ror	r24
    2300:	ee 0c       	add	r14, r14
    2302:	ff 1c       	adc	r15, r15
    2304:	00 1f       	adc	r16, r16
    2306:	11 1f       	adc	r17, r17
    2308:	6f 5f       	subi	r22, 0xFF	; 255
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	6f 31       	cpi	r22, 0x1F	; 31
    230e:	71 05       	cpc	r23, r1
    2310:	31 f7       	brne	.-52     	; 0x22de <__divsf3+0xda>
    2312:	da 01       	movw	r26, r20
    2314:	c9 01       	movw	r24, r18
    2316:	8f 77       	andi	r24, 0x7F	; 127
    2318:	90 70       	andi	r25, 0x00	; 0
    231a:	a0 70       	andi	r26, 0x00	; 0
    231c:	b0 70       	andi	r27, 0x00	; 0
    231e:	80 34       	cpi	r24, 0x40	; 64
    2320:	91 05       	cpc	r25, r1
    2322:	a1 05       	cpc	r26, r1
    2324:	b1 05       	cpc	r27, r1
    2326:	61 f4       	brne	.+24     	; 0x2340 <__divsf3+0x13c>
    2328:	27 fd       	sbrc	r18, 7
    232a:	0a c0       	rjmp	.+20     	; 0x2340 <__divsf3+0x13c>
    232c:	e1 14       	cp	r14, r1
    232e:	f1 04       	cpc	r15, r1
    2330:	01 05       	cpc	r16, r1
    2332:	11 05       	cpc	r17, r1
    2334:	29 f0       	breq	.+10     	; 0x2340 <__divsf3+0x13c>
    2336:	20 5c       	subi	r18, 0xC0	; 192
    2338:	3f 4f       	sbci	r19, 0xFF	; 255
    233a:	4f 4f       	sbci	r20, 0xFF	; 255
    233c:	5f 4f       	sbci	r21, 0xFF	; 255
    233e:	20 78       	andi	r18, 0x80	; 128
    2340:	2d 87       	std	Y+13, r18	; 0x0d
    2342:	3e 87       	std	Y+14, r19	; 0x0e
    2344:	4f 87       	std	Y+15, r20	; 0x0f
    2346:	58 8b       	std	Y+16, r21	; 0x10
    2348:	be 01       	movw	r22, r28
    234a:	67 5f       	subi	r22, 0xF7	; 247
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	cb 01       	movw	r24, r22
    2350:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__pack_f>
    2354:	68 96       	adiw	r28, 0x18	; 24
    2356:	ea e0       	ldi	r30, 0x0A	; 10
    2358:	0c 94 39 3d 	jmp	0x7a72	; 0x7a72 <__epilogue_restores__+0x10>

0000235c <__gtsf2>:
    235c:	a8 e1       	ldi	r26, 0x18	; 24
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 eb       	ldi	r30, 0xB4	; 180
    2362:	f1 e1       	ldi	r31, 0x11	; 17
    2364:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <__prologue_saves__+0x18>
    2368:	69 83       	std	Y+1, r22	; 0x01
    236a:	7a 83       	std	Y+2, r23	; 0x02
    236c:	8b 83       	std	Y+3, r24	; 0x03
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	2d 83       	std	Y+5, r18	; 0x05
    2372:	3e 83       	std	Y+6, r19	; 0x06
    2374:	4f 83       	std	Y+7, r20	; 0x07
    2376:	58 87       	std	Y+8, r21	; 0x08
    2378:	89 e0       	ldi	r24, 0x09	; 9
    237a:	e8 2e       	mov	r14, r24
    237c:	f1 2c       	mov	r15, r1
    237e:	ec 0e       	add	r14, r28
    2380:	fd 1e       	adc	r15, r29
    2382:	ce 01       	movw	r24, r28
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	b7 01       	movw	r22, r14
    2388:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    238c:	8e 01       	movw	r16, r28
    238e:	0f 5e       	subi	r16, 0xEF	; 239
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	ce 01       	movw	r24, r28
    2394:	05 96       	adiw	r24, 0x05	; 5
    2396:	b8 01       	movw	r22, r16
    2398:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	82 30       	cpi	r24, 0x02	; 2
    23a0:	40 f0       	brcs	.+16     	; 0x23b2 <__gtsf2+0x56>
    23a2:	89 89       	ldd	r24, Y+17	; 0x11
    23a4:	82 30       	cpi	r24, 0x02	; 2
    23a6:	28 f0       	brcs	.+10     	; 0x23b2 <__gtsf2+0x56>
    23a8:	c7 01       	movw	r24, r14
    23aa:	b8 01       	movw	r22, r16
    23ac:	0e 94 a7 14 	call	0x294e	; 0x294e <__fpcmp_parts_f>
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <__gtsf2+0x58>
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	68 96       	adiw	r28, 0x18	; 24
    23b6:	e6 e0       	ldi	r30, 0x06	; 6
    23b8:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <__epilogue_restores__+0x18>

000023bc <__gesf2>:
    23bc:	a8 e1       	ldi	r26, 0x18	; 24
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e4 ee       	ldi	r30, 0xE4	; 228
    23c2:	f1 e1       	ldi	r31, 0x11	; 17
    23c4:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <__prologue_saves__+0x18>
    23c8:	69 83       	std	Y+1, r22	; 0x01
    23ca:	7a 83       	std	Y+2, r23	; 0x02
    23cc:	8b 83       	std	Y+3, r24	; 0x03
    23ce:	9c 83       	std	Y+4, r25	; 0x04
    23d0:	2d 83       	std	Y+5, r18	; 0x05
    23d2:	3e 83       	std	Y+6, r19	; 0x06
    23d4:	4f 83       	std	Y+7, r20	; 0x07
    23d6:	58 87       	std	Y+8, r21	; 0x08
    23d8:	89 e0       	ldi	r24, 0x09	; 9
    23da:	e8 2e       	mov	r14, r24
    23dc:	f1 2c       	mov	r15, r1
    23de:	ec 0e       	add	r14, r28
    23e0:	fd 1e       	adc	r15, r29
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	b7 01       	movw	r22, r14
    23e8:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    23ec:	8e 01       	movw	r16, r28
    23ee:	0f 5e       	subi	r16, 0xEF	; 239
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	ce 01       	movw	r24, r28
    23f4:	05 96       	adiw	r24, 0x05	; 5
    23f6:	b8 01       	movw	r22, r16
    23f8:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	82 30       	cpi	r24, 0x02	; 2
    2400:	40 f0       	brcs	.+16     	; 0x2412 <__gesf2+0x56>
    2402:	89 89       	ldd	r24, Y+17	; 0x11
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	28 f0       	brcs	.+10     	; 0x2412 <__gesf2+0x56>
    2408:	c7 01       	movw	r24, r14
    240a:	b8 01       	movw	r22, r16
    240c:	0e 94 a7 14 	call	0x294e	; 0x294e <__fpcmp_parts_f>
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <__gesf2+0x58>
    2412:	8f ef       	ldi	r24, 0xFF	; 255
    2414:	68 96       	adiw	r28, 0x18	; 24
    2416:	e6 e0       	ldi	r30, 0x06	; 6
    2418:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <__epilogue_restores__+0x18>

0000241c <__ltsf2>:
    241c:	a8 e1       	ldi	r26, 0x18	; 24
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e4 e1       	ldi	r30, 0x14	; 20
    2422:	f2 e1       	ldi	r31, 0x12	; 18
    2424:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <__prologue_saves__+0x18>
    2428:	69 83       	std	Y+1, r22	; 0x01
    242a:	7a 83       	std	Y+2, r23	; 0x02
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	9c 83       	std	Y+4, r25	; 0x04
    2430:	2d 83       	std	Y+5, r18	; 0x05
    2432:	3e 83       	std	Y+6, r19	; 0x06
    2434:	4f 83       	std	Y+7, r20	; 0x07
    2436:	58 87       	std	Y+8, r21	; 0x08
    2438:	89 e0       	ldi	r24, 0x09	; 9
    243a:	e8 2e       	mov	r14, r24
    243c:	f1 2c       	mov	r15, r1
    243e:	ec 0e       	add	r14, r28
    2440:	fd 1e       	adc	r15, r29
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	b7 01       	movw	r22, r14
    2448:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    244c:	8e 01       	movw	r16, r28
    244e:	0f 5e       	subi	r16, 0xEF	; 239
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	ce 01       	movw	r24, r28
    2454:	05 96       	adiw	r24, 0x05	; 5
    2456:	b8 01       	movw	r22, r16
    2458:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	82 30       	cpi	r24, 0x02	; 2
    2460:	40 f0       	brcs	.+16     	; 0x2472 <__ltsf2+0x56>
    2462:	89 89       	ldd	r24, Y+17	; 0x11
    2464:	82 30       	cpi	r24, 0x02	; 2
    2466:	28 f0       	brcs	.+10     	; 0x2472 <__ltsf2+0x56>
    2468:	c7 01       	movw	r24, r14
    246a:	b8 01       	movw	r22, r16
    246c:	0e 94 a7 14 	call	0x294e	; 0x294e <__fpcmp_parts_f>
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <__ltsf2+0x58>
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	68 96       	adiw	r28, 0x18	; 24
    2476:	e6 e0       	ldi	r30, 0x06	; 6
    2478:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <__epilogue_restores__+0x18>

0000247c <__fixsfsi>:
    247c:	ac e0       	ldi	r26, 0x0C	; 12
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e4 e4       	ldi	r30, 0x44	; 68
    2482:	f2 e1       	ldi	r31, 0x12	; 18
    2484:	0c 94 25 3d 	jmp	0x7a4a	; 0x7a4a <__prologue_saves__+0x20>
    2488:	69 83       	std	Y+1, r22	; 0x01
    248a:	7a 83       	std	Y+2, r23	; 0x02
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	ce 01       	movw	r24, r28
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	be 01       	movw	r22, r28
    2496:	6b 5f       	subi	r22, 0xFB	; 251
    2498:	7f 4f       	sbci	r23, 0xFF	; 255
    249a:	0e 94 2f 14 	call	0x285e	; 0x285e <__unpack_f>
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	61 f1       	breq	.+88     	; 0x24fc <__fixsfsi+0x80>
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	50 f1       	brcs	.+84     	; 0x24fc <__fixsfsi+0x80>
    24a8:	84 30       	cpi	r24, 0x04	; 4
    24aa:	21 f4       	brne	.+8      	; 0x24b4 <__fixsfsi+0x38>
    24ac:	8e 81       	ldd	r24, Y+6	; 0x06
    24ae:	88 23       	and	r24, r24
    24b0:	51 f1       	breq	.+84     	; 0x2506 <__fixsfsi+0x8a>
    24b2:	2e c0       	rjmp	.+92     	; 0x2510 <__fixsfsi+0x94>
    24b4:	2f 81       	ldd	r18, Y+7	; 0x07
    24b6:	38 85       	ldd	r19, Y+8	; 0x08
    24b8:	37 fd       	sbrc	r19, 7
    24ba:	20 c0       	rjmp	.+64     	; 0x24fc <__fixsfsi+0x80>
    24bc:	6e 81       	ldd	r22, Y+6	; 0x06
    24be:	2f 31       	cpi	r18, 0x1F	; 31
    24c0:	31 05       	cpc	r19, r1
    24c2:	1c f0       	brlt	.+6      	; 0x24ca <__fixsfsi+0x4e>
    24c4:	66 23       	and	r22, r22
    24c6:	f9 f0       	breq	.+62     	; 0x2506 <__fixsfsi+0x8a>
    24c8:	23 c0       	rjmp	.+70     	; 0x2510 <__fixsfsi+0x94>
    24ca:	8e e1       	ldi	r24, 0x1E	; 30
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	82 1b       	sub	r24, r18
    24d0:	93 0b       	sbc	r25, r19
    24d2:	29 85       	ldd	r18, Y+9	; 0x09
    24d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    24d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <__fixsfsi+0x68>
    24dc:	56 95       	lsr	r21
    24de:	47 95       	ror	r20
    24e0:	37 95       	ror	r19
    24e2:	27 95       	ror	r18
    24e4:	8a 95       	dec	r24
    24e6:	d2 f7       	brpl	.-12     	; 0x24dc <__fixsfsi+0x60>
    24e8:	66 23       	and	r22, r22
    24ea:	b1 f0       	breq	.+44     	; 0x2518 <__fixsfsi+0x9c>
    24ec:	50 95       	com	r21
    24ee:	40 95       	com	r20
    24f0:	30 95       	com	r19
    24f2:	21 95       	neg	r18
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	4f 4f       	sbci	r20, 0xFF	; 255
    24f8:	5f 4f       	sbci	r21, 0xFF	; 255
    24fa:	0e c0       	rjmp	.+28     	; 0x2518 <__fixsfsi+0x9c>
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	09 c0       	rjmp	.+18     	; 0x2518 <__fixsfsi+0x9c>
    2506:	2f ef       	ldi	r18, 0xFF	; 255
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f ef       	ldi	r20, 0xFF	; 255
    250c:	5f e7       	ldi	r21, 0x7F	; 127
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <__fixsfsi+0x9c>
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	50 e8       	ldi	r21, 0x80	; 128
    2518:	b9 01       	movw	r22, r18
    251a:	ca 01       	movw	r24, r20
    251c:	2c 96       	adiw	r28, 0x0c	; 12
    251e:	e2 e0       	ldi	r30, 0x02	; 2
    2520:	0c 94 41 3d 	jmp	0x7a82	; 0x7a82 <__epilogue_restores__+0x20>

00002524 <__floatunsisf>:
    2524:	a8 e0       	ldi	r26, 0x08	; 8
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e8 e9       	ldi	r30, 0x98	; 152
    252a:	f2 e1       	ldi	r31, 0x12	; 18
    252c:	0c 94 1d 3d 	jmp	0x7a3a	; 0x7a3a <__prologue_saves__+0x10>
    2530:	7b 01       	movw	r14, r22
    2532:	8c 01       	movw	r16, r24
    2534:	61 15       	cp	r22, r1
    2536:	71 05       	cpc	r23, r1
    2538:	81 05       	cpc	r24, r1
    253a:	91 05       	cpc	r25, r1
    253c:	19 f4       	brne	.+6      	; 0x2544 <__floatunsisf+0x20>
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	60 c0       	rjmp	.+192    	; 0x2604 <__floatunsisf+0xe0>
    2544:	83 e0       	ldi	r24, 0x03	; 3
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	8e e1       	ldi	r24, 0x1E	; 30
    254a:	c8 2e       	mov	r12, r24
    254c:	d1 2c       	mov	r13, r1
    254e:	dc 82       	std	Y+4, r13	; 0x04
    2550:	cb 82       	std	Y+3, r12	; 0x03
    2552:	ed 82       	std	Y+5, r14	; 0x05
    2554:	fe 82       	std	Y+6, r15	; 0x06
    2556:	0f 83       	std	Y+7, r16	; 0x07
    2558:	18 87       	std	Y+8, r17	; 0x08
    255a:	c8 01       	movw	r24, r16
    255c:	b7 01       	movw	r22, r14
    255e:	0e 94 0b 13 	call	0x2616	; 0x2616 <__clzsi2>
    2562:	fc 01       	movw	r30, r24
    2564:	31 97       	sbiw	r30, 0x01	; 1
    2566:	f7 ff       	sbrs	r31, 7
    2568:	3b c0       	rjmp	.+118    	; 0x25e0 <__floatunsisf+0xbc>
    256a:	22 27       	eor	r18, r18
    256c:	33 27       	eor	r19, r19
    256e:	2e 1b       	sub	r18, r30
    2570:	3f 0b       	sbc	r19, r31
    2572:	57 01       	movw	r10, r14
    2574:	68 01       	movw	r12, r16
    2576:	02 2e       	mov	r0, r18
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <__floatunsisf+0x5e>
    257a:	d6 94       	lsr	r13
    257c:	c7 94       	ror	r12
    257e:	b7 94       	ror	r11
    2580:	a7 94       	ror	r10
    2582:	0a 94       	dec	r0
    2584:	d2 f7       	brpl	.-12     	; 0x257a <__floatunsisf+0x56>
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__floatunsisf+0x7c>
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	aa 1f       	adc	r26, r26
    259e:	bb 1f       	adc	r27, r27
    25a0:	2a 95       	dec	r18
    25a2:	d2 f7       	brpl	.-12     	; 0x2598 <__floatunsisf+0x74>
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	a1 09       	sbc	r26, r1
    25a8:	b1 09       	sbc	r27, r1
    25aa:	8e 21       	and	r24, r14
    25ac:	9f 21       	and	r25, r15
    25ae:	a0 23       	and	r26, r16
    25b0:	b1 23       	and	r27, r17
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	a1 05       	cpc	r26, r1
    25b6:	b1 05       	cpc	r27, r1
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <__floatunsisf+0x9e>
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	4a 29       	or	r20, r10
    25c4:	5b 29       	or	r21, r11
    25c6:	6c 29       	or	r22, r12
    25c8:	7d 29       	or	r23, r13
    25ca:	4d 83       	std	Y+5, r20	; 0x05
    25cc:	5e 83       	std	Y+6, r21	; 0x06
    25ce:	6f 83       	std	Y+7, r22	; 0x07
    25d0:	78 87       	std	Y+8, r23	; 0x08
    25d2:	8e e1       	ldi	r24, 0x1E	; 30
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	8e 1b       	sub	r24, r30
    25d8:	9f 0b       	sbc	r25, r31
    25da:	9c 83       	std	Y+4, r25	; 0x04
    25dc:	8b 83       	std	Y+3, r24	; 0x03
    25de:	12 c0       	rjmp	.+36     	; 0x2604 <__floatunsisf+0xe0>
    25e0:	30 97       	sbiw	r30, 0x00	; 0
    25e2:	81 f0       	breq	.+32     	; 0x2604 <__floatunsisf+0xe0>
    25e4:	0e 2e       	mov	r0, r30
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <__floatunsisf+0xcc>
    25e8:	ee 0c       	add	r14, r14
    25ea:	ff 1c       	adc	r15, r15
    25ec:	00 1f       	adc	r16, r16
    25ee:	11 1f       	adc	r17, r17
    25f0:	0a 94       	dec	r0
    25f2:	d2 f7       	brpl	.-12     	; 0x25e8 <__floatunsisf+0xc4>
    25f4:	ed 82       	std	Y+5, r14	; 0x05
    25f6:	fe 82       	std	Y+6, r15	; 0x06
    25f8:	0f 83       	std	Y+7, r16	; 0x07
    25fa:	18 87       	std	Y+8, r17	; 0x08
    25fc:	ce 1a       	sub	r12, r30
    25fe:	df 0a       	sbc	r13, r31
    2600:	dc 82       	std	Y+4, r13	; 0x04
    2602:	cb 82       	std	Y+3, r12	; 0x03
    2604:	1a 82       	std	Y+2, r1	; 0x02
    2606:	ce 01       	movw	r24, r28
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__pack_f>
    260e:	28 96       	adiw	r28, 0x08	; 8
    2610:	ea e0       	ldi	r30, 0x0A	; 10
    2612:	0c 94 39 3d 	jmp	0x7a72	; 0x7a72 <__epilogue_restores__+0x10>

00002616 <__clzsi2>:
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	7b 01       	movw	r14, r22
    2620:	8c 01       	movw	r16, r24
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	e8 16       	cp	r14, r24
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	f8 06       	cpc	r15, r24
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	08 07       	cpc	r16, r24
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	18 07       	cpc	r17, r24
    2632:	88 f4       	brcc	.+34     	; 0x2656 <__clzsi2+0x40>
    2634:	8f ef       	ldi	r24, 0xFF	; 255
    2636:	e8 16       	cp	r14, r24
    2638:	f1 04       	cpc	r15, r1
    263a:	01 05       	cpc	r16, r1
    263c:	11 05       	cpc	r17, r1
    263e:	31 f0       	breq	.+12     	; 0x264c <__clzsi2+0x36>
    2640:	28 f0       	brcs	.+10     	; 0x264c <__clzsi2+0x36>
    2642:	88 e0       	ldi	r24, 0x08	; 8
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e0       	ldi	r26, 0x00	; 0
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	17 c0       	rjmp	.+46     	; 0x267a <__clzsi2+0x64>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	12 c0       	rjmp	.+36     	; 0x267a <__clzsi2+0x64>
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	e8 16       	cp	r14, r24
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	f8 06       	cpc	r15, r24
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	08 07       	cpc	r16, r24
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	18 07       	cpc	r17, r24
    2666:	28 f0       	brcs	.+10     	; 0x2672 <__clzsi2+0x5c>
    2668:	88 e1       	ldi	r24, 0x18	; 24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a0 e0       	ldi	r26, 0x00	; 0
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	04 c0       	rjmp	.+8      	; 0x267a <__clzsi2+0x64>
    2672:	80 e1       	ldi	r24, 0x10	; 16
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e0       	ldi	r26, 0x00	; 0
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	20 e2       	ldi	r18, 0x20	; 32
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	28 1b       	sub	r18, r24
    2684:	39 0b       	sbc	r19, r25
    2686:	4a 0b       	sbc	r20, r26
    2688:	5b 0b       	sbc	r21, r27
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <__clzsi2+0x7e>
    268c:	16 95       	lsr	r17
    268e:	07 95       	ror	r16
    2690:	f7 94       	ror	r15
    2692:	e7 94       	ror	r14
    2694:	8a 95       	dec	r24
    2696:	d2 f7       	brpl	.-12     	; 0x268c <__clzsi2+0x76>
    2698:	f7 01       	movw	r30, r14
    269a:	e8 5f       	subi	r30, 0xF8	; 248
    269c:	fe 4f       	sbci	r31, 0xFE	; 254
    269e:	80 81       	ld	r24, Z
    26a0:	28 1b       	sub	r18, r24
    26a2:	31 09       	sbc	r19, r1
    26a4:	41 09       	sbc	r20, r1
    26a6:	51 09       	sbc	r21, r1
    26a8:	c9 01       	movw	r24, r18
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	ff 90       	pop	r15
    26b0:	ef 90       	pop	r14
    26b2:	08 95       	ret

000026b4 <__pack_f>:
    26b4:	df 92       	push	r13
    26b6:	ef 92       	push	r14
    26b8:	ff 92       	push	r15
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	fc 01       	movw	r30, r24
    26c0:	e4 80       	ldd	r14, Z+4	; 0x04
    26c2:	f5 80       	ldd	r15, Z+5	; 0x05
    26c4:	06 81       	ldd	r16, Z+6	; 0x06
    26c6:	17 81       	ldd	r17, Z+7	; 0x07
    26c8:	d1 80       	ldd	r13, Z+1	; 0x01
    26ca:	80 81       	ld	r24, Z
    26cc:	82 30       	cpi	r24, 0x02	; 2
    26ce:	48 f4       	brcc	.+18     	; 0x26e2 <__pack_f+0x2e>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e1       	ldi	r26, 0x10	; 16
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e8 2a       	or	r14, r24
    26da:	f9 2a       	or	r15, r25
    26dc:	0a 2b       	or	r16, r26
    26de:	1b 2b       	or	r17, r27
    26e0:	a5 c0       	rjmp	.+330    	; 0x282c <__pack_f+0x178>
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <__pack_f+0x34>
    26e6:	9f c0       	rjmp	.+318    	; 0x2826 <__pack_f+0x172>
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	21 f4       	brne	.+8      	; 0x26f4 <__pack_f+0x40>
    26ec:	ee 24       	eor	r14, r14
    26ee:	ff 24       	eor	r15, r15
    26f0:	87 01       	movw	r16, r14
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <__pack_f+0x4a>
    26f4:	e1 14       	cp	r14, r1
    26f6:	f1 04       	cpc	r15, r1
    26f8:	01 05       	cpc	r16, r1
    26fa:	11 05       	cpc	r17, r1
    26fc:	19 f4       	brne	.+6      	; 0x2704 <__pack_f+0x50>
    26fe:	e0 e0       	ldi	r30, 0x00	; 0
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	96 c0       	rjmp	.+300    	; 0x2830 <__pack_f+0x17c>
    2704:	62 81       	ldd	r22, Z+2	; 0x02
    2706:	73 81       	ldd	r23, Z+3	; 0x03
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	62 38       	cpi	r22, 0x82	; 130
    270c:	79 07       	cpc	r23, r25
    270e:	0c f0       	brlt	.+2      	; 0x2712 <__pack_f+0x5e>
    2710:	5b c0       	rjmp	.+182    	; 0x27c8 <__pack_f+0x114>
    2712:	22 e8       	ldi	r18, 0x82	; 130
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	26 1b       	sub	r18, r22
    2718:	37 0b       	sbc	r19, r23
    271a:	2a 31       	cpi	r18, 0x1A	; 26
    271c:	31 05       	cpc	r19, r1
    271e:	2c f0       	brlt	.+10     	; 0x272a <__pack_f+0x76>
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	2a c0       	rjmp	.+84     	; 0x277e <__pack_f+0xca>
    272a:	b8 01       	movw	r22, r16
    272c:	a7 01       	movw	r20, r14
    272e:	02 2e       	mov	r0, r18
    2730:	04 c0       	rjmp	.+8      	; 0x273a <__pack_f+0x86>
    2732:	76 95       	lsr	r23
    2734:	67 95       	ror	r22
    2736:	57 95       	ror	r21
    2738:	47 95       	ror	r20
    273a:	0a 94       	dec	r0
    273c:	d2 f7       	brpl	.-12     	; 0x2732 <__pack_f+0x7e>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e0       	ldi	r26, 0x00	; 0
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <__pack_f+0x9c>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	aa 1f       	adc	r26, r26
    274e:	bb 1f       	adc	r27, r27
    2750:	2a 95       	dec	r18
    2752:	d2 f7       	brpl	.-12     	; 0x2748 <__pack_f+0x94>
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	a1 09       	sbc	r26, r1
    2758:	b1 09       	sbc	r27, r1
    275a:	8e 21       	and	r24, r14
    275c:	9f 21       	and	r25, r15
    275e:	a0 23       	and	r26, r16
    2760:	b1 23       	and	r27, r17
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	a1 05       	cpc	r26, r1
    2766:	b1 05       	cpc	r27, r1
    2768:	21 f0       	breq	.+8      	; 0x2772 <__pack_f+0xbe>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e0       	ldi	r26, 0x00	; 0
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	9a 01       	movw	r18, r20
    2774:	ab 01       	movw	r20, r22
    2776:	28 2b       	or	r18, r24
    2778:	39 2b       	or	r19, r25
    277a:	4a 2b       	or	r20, r26
    277c:	5b 2b       	or	r21, r27
    277e:	da 01       	movw	r26, r20
    2780:	c9 01       	movw	r24, r18
    2782:	8f 77       	andi	r24, 0x7F	; 127
    2784:	90 70       	andi	r25, 0x00	; 0
    2786:	a0 70       	andi	r26, 0x00	; 0
    2788:	b0 70       	andi	r27, 0x00	; 0
    278a:	80 34       	cpi	r24, 0x40	; 64
    278c:	91 05       	cpc	r25, r1
    278e:	a1 05       	cpc	r26, r1
    2790:	b1 05       	cpc	r27, r1
    2792:	39 f4       	brne	.+14     	; 0x27a2 <__pack_f+0xee>
    2794:	27 ff       	sbrs	r18, 7
    2796:	09 c0       	rjmp	.+18     	; 0x27aa <__pack_f+0xf6>
    2798:	20 5c       	subi	r18, 0xC0	; 192
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	4f 4f       	sbci	r20, 0xFF	; 255
    279e:	5f 4f       	sbci	r21, 0xFF	; 255
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <__pack_f+0xf6>
    27a2:	21 5c       	subi	r18, 0xC1	; 193
    27a4:	3f 4f       	sbci	r19, 0xFF	; 255
    27a6:	4f 4f       	sbci	r20, 0xFF	; 255
    27a8:	5f 4f       	sbci	r21, 0xFF	; 255
    27aa:	e0 e0       	ldi	r30, 0x00	; 0
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	20 30       	cpi	r18, 0x00	; 0
    27b0:	a0 e0       	ldi	r26, 0x00	; 0
    27b2:	3a 07       	cpc	r19, r26
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	4a 07       	cpc	r20, r26
    27b8:	a0 e4       	ldi	r26, 0x40	; 64
    27ba:	5a 07       	cpc	r21, r26
    27bc:	10 f0       	brcs	.+4      	; 0x27c2 <__pack_f+0x10e>
    27be:	e1 e0       	ldi	r30, 0x01	; 1
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	79 01       	movw	r14, r18
    27c4:	8a 01       	movw	r16, r20
    27c6:	27 c0       	rjmp	.+78     	; 0x2816 <__pack_f+0x162>
    27c8:	60 38       	cpi	r22, 0x80	; 128
    27ca:	71 05       	cpc	r23, r1
    27cc:	64 f5       	brge	.+88     	; 0x2826 <__pack_f+0x172>
    27ce:	fb 01       	movw	r30, r22
    27d0:	e1 58       	subi	r30, 0x81	; 129
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	d8 01       	movw	r26, r16
    27d6:	c7 01       	movw	r24, r14
    27d8:	8f 77       	andi	r24, 0x7F	; 127
    27da:	90 70       	andi	r25, 0x00	; 0
    27dc:	a0 70       	andi	r26, 0x00	; 0
    27de:	b0 70       	andi	r27, 0x00	; 0
    27e0:	80 34       	cpi	r24, 0x40	; 64
    27e2:	91 05       	cpc	r25, r1
    27e4:	a1 05       	cpc	r26, r1
    27e6:	b1 05       	cpc	r27, r1
    27e8:	39 f4       	brne	.+14     	; 0x27f8 <__pack_f+0x144>
    27ea:	e7 fe       	sbrs	r14, 7
    27ec:	0d c0       	rjmp	.+26     	; 0x2808 <__pack_f+0x154>
    27ee:	80 e4       	ldi	r24, 0x40	; 64
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <__pack_f+0x14c>
    27f8:	8f e3       	ldi	r24, 0x3F	; 63
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e8 0e       	add	r14, r24
    2802:	f9 1e       	adc	r15, r25
    2804:	0a 1f       	adc	r16, r26
    2806:	1b 1f       	adc	r17, r27
    2808:	17 ff       	sbrs	r17, 7
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <__pack_f+0x162>
    280c:	16 95       	lsr	r17
    280e:	07 95       	ror	r16
    2810:	f7 94       	ror	r15
    2812:	e7 94       	ror	r14
    2814:	31 96       	adiw	r30, 0x01	; 1
    2816:	87 e0       	ldi	r24, 0x07	; 7
    2818:	16 95       	lsr	r17
    281a:	07 95       	ror	r16
    281c:	f7 94       	ror	r15
    281e:	e7 94       	ror	r14
    2820:	8a 95       	dec	r24
    2822:	d1 f7       	brne	.-12     	; 0x2818 <__pack_f+0x164>
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <__pack_f+0x17c>
    2826:	ee 24       	eor	r14, r14
    2828:	ff 24       	eor	r15, r15
    282a:	87 01       	movw	r16, r14
    282c:	ef ef       	ldi	r30, 0xFF	; 255
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	6e 2f       	mov	r22, r30
    2832:	67 95       	ror	r22
    2834:	66 27       	eor	r22, r22
    2836:	67 95       	ror	r22
    2838:	90 2f       	mov	r25, r16
    283a:	9f 77       	andi	r25, 0x7F	; 127
    283c:	d7 94       	ror	r13
    283e:	dd 24       	eor	r13, r13
    2840:	d7 94       	ror	r13
    2842:	8e 2f       	mov	r24, r30
    2844:	86 95       	lsr	r24
    2846:	49 2f       	mov	r20, r25
    2848:	46 2b       	or	r20, r22
    284a:	58 2f       	mov	r21, r24
    284c:	5d 29       	or	r21, r13
    284e:	b7 01       	movw	r22, r14
    2850:	ca 01       	movw	r24, r20
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	08 95       	ret

0000285e <__unpack_f>:
    285e:	fc 01       	movw	r30, r24
    2860:	db 01       	movw	r26, r22
    2862:	40 81       	ld	r20, Z
    2864:	51 81       	ldd	r21, Z+1	; 0x01
    2866:	22 81       	ldd	r18, Z+2	; 0x02
    2868:	62 2f       	mov	r22, r18
    286a:	6f 77       	andi	r22, 0x7F	; 127
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	22 1f       	adc	r18, r18
    2870:	22 27       	eor	r18, r18
    2872:	22 1f       	adc	r18, r18
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	89 2f       	mov	r24, r25
    2878:	88 0f       	add	r24, r24
    287a:	82 2b       	or	r24, r18
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	99 1f       	adc	r25, r25
    2882:	99 27       	eor	r25, r25
    2884:	99 1f       	adc	r25, r25
    2886:	11 96       	adiw	r26, 0x01	; 1
    2888:	9c 93       	st	X, r25
    288a:	11 97       	sbiw	r26, 0x01	; 1
    288c:	21 15       	cp	r18, r1
    288e:	31 05       	cpc	r19, r1
    2890:	a9 f5       	brne	.+106    	; 0x28fc <__unpack_f+0x9e>
    2892:	41 15       	cp	r20, r1
    2894:	51 05       	cpc	r21, r1
    2896:	61 05       	cpc	r22, r1
    2898:	71 05       	cpc	r23, r1
    289a:	11 f4       	brne	.+4      	; 0x28a0 <__unpack_f+0x42>
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	37 c0       	rjmp	.+110    	; 0x290e <__unpack_f+0xb0>
    28a0:	82 e8       	ldi	r24, 0x82	; 130
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	13 96       	adiw	r26, 0x03	; 3
    28a6:	9c 93       	st	X, r25
    28a8:	8e 93       	st	-X, r24
    28aa:	12 97       	sbiw	r26, 0x02	; 2
    28ac:	9a 01       	movw	r18, r20
    28ae:	ab 01       	movw	r20, r22
    28b0:	67 e0       	ldi	r22, 0x07	; 7
    28b2:	22 0f       	add	r18, r18
    28b4:	33 1f       	adc	r19, r19
    28b6:	44 1f       	adc	r20, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	6a 95       	dec	r22
    28bc:	d1 f7       	brne	.-12     	; 0x28b2 <__unpack_f+0x54>
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	8c 93       	st	X, r24
    28c2:	0d c0       	rjmp	.+26     	; 0x28de <__unpack_f+0x80>
    28c4:	22 0f       	add	r18, r18
    28c6:	33 1f       	adc	r19, r19
    28c8:	44 1f       	adc	r20, r20
    28ca:	55 1f       	adc	r21, r21
    28cc:	12 96       	adiw	r26, 0x02	; 2
    28ce:	8d 91       	ld	r24, X+
    28d0:	9c 91       	ld	r25, X
    28d2:	13 97       	sbiw	r26, 0x03	; 3
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	13 96       	adiw	r26, 0x03	; 3
    28d8:	9c 93       	st	X, r25
    28da:	8e 93       	st	-X, r24
    28dc:	12 97       	sbiw	r26, 0x02	; 2
    28de:	20 30       	cpi	r18, 0x00	; 0
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	38 07       	cpc	r19, r24
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	48 07       	cpc	r20, r24
    28e8:	80 e4       	ldi	r24, 0x40	; 64
    28ea:	58 07       	cpc	r21, r24
    28ec:	58 f3       	brcs	.-42     	; 0x28c4 <__unpack_f+0x66>
    28ee:	14 96       	adiw	r26, 0x04	; 4
    28f0:	2d 93       	st	X+, r18
    28f2:	3d 93       	st	X+, r19
    28f4:	4d 93       	st	X+, r20
    28f6:	5c 93       	st	X, r21
    28f8:	17 97       	sbiw	r26, 0x07	; 7
    28fa:	08 95       	ret
    28fc:	2f 3f       	cpi	r18, 0xFF	; 255
    28fe:	31 05       	cpc	r19, r1
    2900:	79 f4       	brne	.+30     	; 0x2920 <__unpack_f+0xc2>
    2902:	41 15       	cp	r20, r1
    2904:	51 05       	cpc	r21, r1
    2906:	61 05       	cpc	r22, r1
    2908:	71 05       	cpc	r23, r1
    290a:	19 f4       	brne	.+6      	; 0x2912 <__unpack_f+0xb4>
    290c:	84 e0       	ldi	r24, 0x04	; 4
    290e:	8c 93       	st	X, r24
    2910:	08 95       	ret
    2912:	64 ff       	sbrs	r22, 4
    2914:	03 c0       	rjmp	.+6      	; 0x291c <__unpack_f+0xbe>
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	8c 93       	st	X, r24
    291a:	12 c0       	rjmp	.+36     	; 0x2940 <__unpack_f+0xe2>
    291c:	1c 92       	st	X, r1
    291e:	10 c0       	rjmp	.+32     	; 0x2940 <__unpack_f+0xe2>
    2920:	2f 57       	subi	r18, 0x7F	; 127
    2922:	30 40       	sbci	r19, 0x00	; 0
    2924:	13 96       	adiw	r26, 0x03	; 3
    2926:	3c 93       	st	X, r19
    2928:	2e 93       	st	-X, r18
    292a:	12 97       	sbiw	r26, 0x02	; 2
    292c:	83 e0       	ldi	r24, 0x03	; 3
    292e:	8c 93       	st	X, r24
    2930:	87 e0       	ldi	r24, 0x07	; 7
    2932:	44 0f       	add	r20, r20
    2934:	55 1f       	adc	r21, r21
    2936:	66 1f       	adc	r22, r22
    2938:	77 1f       	adc	r23, r23
    293a:	8a 95       	dec	r24
    293c:	d1 f7       	brne	.-12     	; 0x2932 <__unpack_f+0xd4>
    293e:	70 64       	ori	r23, 0x40	; 64
    2940:	14 96       	adiw	r26, 0x04	; 4
    2942:	4d 93       	st	X+, r20
    2944:	5d 93       	st	X+, r21
    2946:	6d 93       	st	X+, r22
    2948:	7c 93       	st	X, r23
    294a:	17 97       	sbiw	r26, 0x07	; 7
    294c:	08 95       	ret

0000294e <__fpcmp_parts_f>:
    294e:	1f 93       	push	r17
    2950:	dc 01       	movw	r26, r24
    2952:	fb 01       	movw	r30, r22
    2954:	9c 91       	ld	r25, X
    2956:	92 30       	cpi	r25, 0x02	; 2
    2958:	08 f4       	brcc	.+2      	; 0x295c <__fpcmp_parts_f+0xe>
    295a:	47 c0       	rjmp	.+142    	; 0x29ea <__fpcmp_parts_f+0x9c>
    295c:	80 81       	ld	r24, Z
    295e:	82 30       	cpi	r24, 0x02	; 2
    2960:	08 f4       	brcc	.+2      	; 0x2964 <__fpcmp_parts_f+0x16>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <__fpcmp_parts_f+0x9c>
    2964:	94 30       	cpi	r25, 0x04	; 4
    2966:	51 f4       	brne	.+20     	; 0x297c <__fpcmp_parts_f+0x2e>
    2968:	11 96       	adiw	r26, 0x01	; 1
    296a:	1c 91       	ld	r17, X
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	99 f5       	brne	.+102    	; 0x29d6 <__fpcmp_parts_f+0x88>
    2970:	81 81       	ldd	r24, Z+1	; 0x01
    2972:	68 2f       	mov	r22, r24
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	61 1b       	sub	r22, r17
    2978:	71 09       	sbc	r23, r1
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <__fpcmp_parts_f+0xac>
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	21 f0       	breq	.+8      	; 0x2988 <__fpcmp_parts_f+0x3a>
    2980:	92 30       	cpi	r25, 0x02	; 2
    2982:	31 f4       	brne	.+12     	; 0x2990 <__fpcmp_parts_f+0x42>
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	b9 f1       	breq	.+110    	; 0x29f6 <__fpcmp_parts_f+0xa8>
    2988:	81 81       	ldd	r24, Z+1	; 0x01
    298a:	88 23       	and	r24, r24
    298c:	89 f1       	breq	.+98     	; 0x29f0 <__fpcmp_parts_f+0xa2>
    298e:	2d c0       	rjmp	.+90     	; 0x29ea <__fpcmp_parts_f+0x9c>
    2990:	11 96       	adiw	r26, 0x01	; 1
    2992:	1c 91       	ld	r17, X
    2994:	11 97       	sbiw	r26, 0x01	; 1
    2996:	82 30       	cpi	r24, 0x02	; 2
    2998:	f1 f0       	breq	.+60     	; 0x29d6 <__fpcmp_parts_f+0x88>
    299a:	81 81       	ldd	r24, Z+1	; 0x01
    299c:	18 17       	cp	r17, r24
    299e:	d9 f4       	brne	.+54     	; 0x29d6 <__fpcmp_parts_f+0x88>
    29a0:	12 96       	adiw	r26, 0x02	; 2
    29a2:	2d 91       	ld	r18, X+
    29a4:	3c 91       	ld	r19, X
    29a6:	13 97       	sbiw	r26, 0x03	; 3
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	82 17       	cp	r24, r18
    29ae:	93 07       	cpc	r25, r19
    29b0:	94 f0       	brlt	.+36     	; 0x29d6 <__fpcmp_parts_f+0x88>
    29b2:	28 17       	cp	r18, r24
    29b4:	39 07       	cpc	r19, r25
    29b6:	bc f0       	brlt	.+46     	; 0x29e6 <__fpcmp_parts_f+0x98>
    29b8:	14 96       	adiw	r26, 0x04	; 4
    29ba:	8d 91       	ld	r24, X+
    29bc:	9d 91       	ld	r25, X+
    29be:	0d 90       	ld	r0, X+
    29c0:	bc 91       	ld	r27, X
    29c2:	a0 2d       	mov	r26, r0
    29c4:	24 81       	ldd	r18, Z+4	; 0x04
    29c6:	35 81       	ldd	r19, Z+5	; 0x05
    29c8:	46 81       	ldd	r20, Z+6	; 0x06
    29ca:	57 81       	ldd	r21, Z+7	; 0x07
    29cc:	28 17       	cp	r18, r24
    29ce:	39 07       	cpc	r19, r25
    29d0:	4a 07       	cpc	r20, r26
    29d2:	5b 07       	cpc	r21, r27
    29d4:	18 f4       	brcc	.+6      	; 0x29dc <__fpcmp_parts_f+0x8e>
    29d6:	11 23       	and	r17, r17
    29d8:	41 f0       	breq	.+16     	; 0x29ea <__fpcmp_parts_f+0x9c>
    29da:	0a c0       	rjmp	.+20     	; 0x29f0 <__fpcmp_parts_f+0xa2>
    29dc:	82 17       	cp	r24, r18
    29de:	93 07       	cpc	r25, r19
    29e0:	a4 07       	cpc	r26, r20
    29e2:	b5 07       	cpc	r27, r21
    29e4:	40 f4       	brcc	.+16     	; 0x29f6 <__fpcmp_parts_f+0xa8>
    29e6:	11 23       	and	r17, r17
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <__fpcmp_parts_f+0xa2>
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	70 e0       	ldi	r23, 0x00	; 0
    29ee:	05 c0       	rjmp	.+10     	; 0x29fa <__fpcmp_parts_f+0xac>
    29f0:	6f ef       	ldi	r22, 0xFF	; 255
    29f2:	7f ef       	ldi	r23, 0xFF	; 255
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <__fpcmp_parts_f+0xac>
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	cb 01       	movw	r24, r22
    29fc:	1f 91       	pop	r17
    29fe:	08 95       	ret

00002a00 <user_io_init>:
static FILE serdebugstream = FDEV_SETUP_STREAM(ser_tx_1, NULL, _FDEV_SETUP_WRITE);

void user_io_init()
{
	// LEDs as output
	sbi(LED_port, LED1_pin);
    2a00:	46 9a       	sbi	0x08, 6	; 8
	sbi(LED_port, LED2_pin);
    2a02:	47 9a       	sbi	0x08, 7	; 8
	sbi(LED_ddr, LED1_pin);
    2a04:	3e 9a       	sbi	0x07, 6	; 7
	sbi(LED_ddr, LED2_pin);
    2a06:	3f 9a       	sbi	0x07, 7	; 7
	
	// button to input with pull-ups
	sbi(button_port, button_pin);
    2a08:	2c 9a       	sbi	0x05, 4	; 5
	cbi(button_ddr, button_pin);
    2a0a:	24 98       	cbi	0x04, 4	; 4
	
	// switches to input with pull-ups
	sbi(switch_port, switch_1_pin);
    2a0c:	2b 9a       	sbi	0x05, 3	; 5
	sbi(switch_port, switch_2_pin);
    2a0e:	2a 9a       	sbi	0x05, 2	; 5
	sbi(switch_port, switch_3_pin);
    2a10:	29 9a       	sbi	0x05, 1	; 5
	sbi(switch_port, switch_4_pin);
    2a12:	28 9a       	sbi	0x05, 0	; 5
	cbi(switch_ddr, switch_1_pin);
    2a14:	23 98       	cbi	0x04, 3	; 4
	cbi(switch_ddr, switch_2_pin);
    2a16:	22 98       	cbi	0x04, 2	; 4
	cbi(switch_ddr, switch_3_pin);
    2a18:	21 98       	cbi	0x04, 1	; 4
	cbi(switch_ddr, switch_4_pin);
    2a1a:	20 98       	cbi	0x04, 0	; 4
}
    2a1c:	08 95       	ret

00002a1e <hold_esc>:

void hold_esc()
{
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
	esc_safe(1);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	0e 94 3a 21 	call	0x4274	; 0x4274 <esc_safe>
	int flashcnt = 0;
	int presscnt = 0;
	
	for (uint8_t i = 0; i < 6; i++)
	{
		esc_set_width(i, ticks_500us * 2);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	60 e2       	ldi	r22, 0x20	; 32
    2a38:	7e e4       	ldi	r23, 0x4E	; 78
    2a3a:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	60 e2       	ldi	r22, 0x20	; 32
    2a42:	7e e4       	ldi	r23, 0x4E	; 78
    2a44:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	60 e2       	ldi	r22, 0x20	; 32
    2a4c:	7e e4       	ldi	r23, 0x4E	; 78
    2a4e:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2a52:	83 e0       	ldi	r24, 0x03	; 3
    2a54:	60 e2       	ldi	r22, 0x20	; 32
    2a56:	7e e4       	ldi	r23, 0x4E	; 78
    2a58:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2a5c:	84 e0       	ldi	r24, 0x04	; 4
    2a5e:	60 e2       	ldi	r22, 0x20	; 32
    2a60:	7e e4       	ldi	r23, 0x4E	; 78
    2a62:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2a66:	85 e0       	ldi	r24, 0x05	; 5
    2a68:	60 e2       	ldi	r22, 0x20	; 32
    2a6a:	7e e4       	ldi	r23, 0x4E	; 78
    2a6c:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
	}
	
	ppm_is_new_data(0);
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
	while (ppm_is_new_data(0xFF) == 0);
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    2a7c:	88 23       	and	r24, r24
    2a7e:	d9 f3       	breq	.-10     	; 0x2a76 <hold_esc+0x58>
    2a80:	c0 e0       	ldi	r28, 0x00	; 0
    2a82:	d0 e0       	ldi	r29, 0x00	; 0
    2a84:	cc 24       	eor	r12, r12
    2a86:	dd 24       	eor	r13, r13
	
	while (1)
	{
		debug_check_msg(&cal_data);
    2a88:	86 e4       	ldi	r24, 0x46	; 70
    2a8a:	92 e0       	ldi	r25, 0x02	; 2
    2a8c:	0e 94 bf 3b 	call	0x777e	; 0x777e <debug_check_msg>
		
		if (flashcnt < 25)
    2a90:	c9 31       	cpi	r28, 0x19	; 25
    2a92:	d1 05       	cpc	r29, r1
    2a94:	9c f5       	brge	.+102    	; 0x2afc <hold_esc+0xde>
		{
			LED2_on();
    2a96:	47 98       	cbi	0x08, 7	; 8
			LED1_on();
    2a98:	46 98       	cbi	0x08, 6	; 8
		{
			LED2_off();
			LED1_off();
		}
			
		if (ppm_tx_is_good(0xFF))
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
    2a9c:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
    2aa0:	88 23       	and	r24, r24
    2aa2:	99 f1       	breq	.+102    	; 0x2b0a <hold_esc+0xec>
		{
			if (ppm_is_new_data(0xFF) != 0)
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    2aaa:	88 23       	and	r24, r24
    2aac:	91 f5       	brne	.+100    	; 0x2b12 <hold_esc+0xf4>
    2aae:	76 01       	movw	r14, r12
    2ab0:	00 27       	eor	r16, r16
    2ab2:	f7 fc       	sbrc	r15, 7
    2ab4:	00 95       	com	r16
    2ab6:	10 2f       	mov	r17, r16
				}
			
				ppm_is_new_data(0);
			}
			
			if (presscnt >= cal_data.button_hold_down) // if held down long enough
    2ab8:	80 91 08 03 	lds	r24, 0x0308
    2abc:	90 91 09 03 	lds	r25, 0x0309
    2ac0:	a0 91 0a 03 	lds	r26, 0x030A
    2ac4:	b0 91 0b 03 	lds	r27, 0x030B
    2ac8:	e8 16       	cp	r14, r24
    2aca:	f9 06       	cpc	r15, r25
    2acc:	0a 07       	cpc	r16, r26
    2ace:	1b 07       	cpc	r17, r27
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <hold_esc+0xb6>
    2ad2:	41 c0       	rjmp	.+130    	; 0x2b56 <hold_esc+0x138>
		{
			LED1_on();
			presscnt = 0;
		}
			
		if (esc_is_done())
    2ad4:	0e 94 34 21 	call	0x4268	; 0x4268 <esc_is_done>
    2ad8:	88 23       	and	r24, r24
    2ada:	b1 f2       	breq	.-84     	; 0x2a88 <hold_esc+0x6a>
		{
			flashcnt = (flashcnt + 1) % 50;
    2adc:	ce 01       	movw	r24, r28
    2ade:	01 96       	adiw	r24, 0x01	; 1
    2ae0:	62 e3       	ldi	r22, 0x32	; 50
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	0e 94 c5 3c 	call	0x798a	; 0x798a <__divmodhi4>
    2ae8:	ec 01       	movw	r28, r24
			esc_start_next();
    2aea:	0e 94 dd 21 	call	0x43ba	; 0x43ba <esc_start_next>
	ppm_is_new_data(0);
	while (ppm_is_new_data(0xFF) == 0);
	
	while (1)
	{
		debug_check_msg(&cal_data);
    2aee:	86 e4       	ldi	r24, 0x46	; 70
    2af0:	92 e0       	ldi	r25, 0x02	; 2
    2af2:	0e 94 bf 3b 	call	0x777e	; 0x777e <debug_check_msg>
		
		if (flashcnt < 25)
    2af6:	c9 31       	cpi	r28, 0x19	; 25
    2af8:	d1 05       	cpc	r29, r1
    2afa:	6c f2       	brlt	.-102    	; 0x2a96 <hold_esc+0x78>
			LED2_on();
			LED1_on();
		}
		else
		{
			LED2_off();
    2afc:	47 9a       	sbi	0x08, 7	; 8
			LED1_off();
    2afe:	46 9a       	sbi	0x08, 6	; 8
		}
			
		if (ppm_tx_is_good(0xFF))
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
    2b06:	88 23       	and	r24, r24
    2b08:	69 f6       	brne	.-102    	; 0x2aa4 <hold_esc+0x86>
				break;
			}
		}
		else
		{
			LED1_on();
    2b0a:	46 98       	cbi	0x08, 6	; 8
    2b0c:	cc 24       	eor	r12, r12
    2b0e:	dd 24       	eor	r13, r13
    2b10:	e1 cf       	rjmp	.-62     	; 0x2ad4 <hold_esc+0xb6>
			
		if (ppm_tx_is_good(0xFF))
		{
			if (ppm_is_new_data(0xFF) != 0)
			{
				if (ppm_chan_read(cal_data.unlock_ppm_chan) + ppm_center(cal_data.unlock_ppm_chan) < (ticks_500us * 3) - (ticks_500us / 2) || button_is_pressed()) // channel 6 button is pressed
    2b12:	80 91 ff 02 	lds	r24, 0x02FF
    2b16:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    2b1a:	8c 01       	movw	r16, r24
    2b1c:	80 91 ff 02 	lds	r24, 0x02FF
    2b20:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    2b24:	08 0f       	add	r16, r24
    2b26:	19 1f       	adc	r17, r25
    2b28:	08 5a       	subi	r16, 0xA8	; 168
    2b2a:	11 46       	sbci	r17, 0x61	; 97
    2b2c:	58 f0       	brcs	.+22     	; 0x2b44 <hold_esc+0x126>
    2b2e:	1c 9b       	sbis	0x03, 4	; 3
    2b30:	09 c0       	rjmp	.+18     	; 0x2b44 <hold_esc+0x126>
    2b32:	cc 24       	eor	r12, r12
    2b34:	dd 24       	eor	r13, r13
    2b36:	ee 24       	eor	r14, r14
    2b38:	ff 24       	eor	r15, r15
    2b3a:	87 01       	movw	r16, r14
				else
				{
					presscnt = 0;
				}
			
				ppm_is_new_data(0);
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    2b42:	ba cf       	rjmp	.-140    	; 0x2ab8 <hold_esc+0x9a>
		{
			if (ppm_is_new_data(0xFF) != 0)
			{
				if (ppm_chan_read(cal_data.unlock_ppm_chan) + ppm_center(cal_data.unlock_ppm_chan) < (ticks_500us * 3) - (ticks_500us / 2) || button_is_pressed()) // channel 6 button is pressed
				{
					presscnt++;
    2b44:	08 94       	sec
    2b46:	c1 1c       	adc	r12, r1
    2b48:	d1 1c       	adc	r13, r1
    2b4a:	76 01       	movw	r14, r12
    2b4c:	00 27       	eor	r16, r16
    2b4e:	f7 fc       	sbrc	r15, 7
    2b50:	00 95       	com	r16
    2b52:	10 2f       	mov	r17, r16
    2b54:	f3 cf       	rjmp	.-26     	; 0x2b3c <hold_esc+0x11e>
		{
			flashcnt = (flashcnt + 1) % 50;
			esc_start_next();
		}
	}
}
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	08 95       	ret

00002b68 <main>:

int main()
{
    2b68:	2f 92       	push	r2
    2b6a:	3f 92       	push	r3
    2b6c:	4f 92       	push	r4
    2b6e:	5f 92       	push	r5
    2b70:	6f 92       	push	r6
    2b72:	7f 92       	push	r7
    2b74:	8f 92       	push	r8
    2b76:	9f 92       	push	r9
    2b78:	af 92       	push	r10
    2b7a:	bf 92       	push	r11
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
static FILE serdebugstream = FDEV_SETUP_STREAM(ser_tx_1, NULL, _FDEV_SETUP_WRITE);

void user_io_init()
{
	// LEDs as output
	sbi(LED_port, LED1_pin);
    2b8c:	46 9a       	sbi	0x08, 6	; 8
	sbi(LED_port, LED2_pin);
    2b8e:	47 9a       	sbi	0x08, 7	; 8
	sbi(LED_ddr, LED1_pin);
    2b90:	3e 9a       	sbi	0x07, 6	; 7
	sbi(LED_ddr, LED2_pin);
    2b92:	3f 9a       	sbi	0x07, 7	; 7
	
	// button to input with pull-ups
	sbi(button_port, button_pin);
    2b94:	2c 9a       	sbi	0x05, 4	; 5
	cbi(button_ddr, button_pin);
    2b96:	24 98       	cbi	0x04, 4	; 4
	
	// switches to input with pull-ups
	sbi(switch_port, switch_1_pin);
    2b98:	2b 9a       	sbi	0x05, 3	; 5
	sbi(switch_port, switch_2_pin);
    2b9a:	2a 9a       	sbi	0x05, 2	; 5
	sbi(switch_port, switch_3_pin);
    2b9c:	29 9a       	sbi	0x05, 1	; 5
	sbi(switch_port, switch_4_pin);
    2b9e:	28 9a       	sbi	0x05, 0	; 5
	cbi(switch_ddr, switch_1_pin);
    2ba0:	23 98       	cbi	0x04, 3	; 4
	cbi(switch_ddr, switch_2_pin);
    2ba2:	22 98       	cbi	0x04, 2	; 4
	cbi(switch_ddr, switch_3_pin);
    2ba4:	21 98       	cbi	0x04, 1	; 4
	cbi(switch_ddr, switch_4_pin);
    2ba6:	20 98       	cbi	0x04, 0	; 4
	
	// actual initialization here
	
	user_io_init();
	
	calibration_default(&cal_data);
    2ba8:	86 e4       	ldi	r24, 0x46	; 70
    2baa:	92 e0       	ldi	r25, 0x02	; 2
    2bac:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <calibration_default>
	
	sei();
    2bb0:	78 94       	sei
	
	// module initialization
	
	debug_initialize();
    2bb2:	0e 94 7f 3c 	call	0x78fe	; 0x78fe <debug_initialize>
	
	sens_init();
    2bb6:	0e 94 47 23 	call	0x468e	; 0x468e <sens_init>
	ppm_init();
    2bba:	0e 94 02 36 	call	0x6c04	; 0x6c04 <ppm_init>
	esc_init();
    2bbe:	0e 94 27 22 	call	0x444e	; 0x444e <esc_init>
	timer0_init();
    2bc2:	0e 94 a8 22 	call	0x4550	; 0x4550 <timer0_init>
	
	ppm_tx_is_good(0);
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
	while (ppm_tx_is_good(0xFF) == 0);
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
    2bd2:	88 23       	and	r24, r24
    2bd4:	d9 f3       	breq	.-10     	; 0x2bcc <main+0x64>
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bda:	44 ef       	ldi	r20, 0xF4	; 244
    2bdc:	51 e0       	ldi	r21, 0x01	; 1
    2bde:	ca 01       	movw	r24, r20
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <main+0x78>
    2be4:	2f 5f       	subi	r18, 0xFF	; 255
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	87 e2       	ldi	r24, 0x27	; 39
    2bea:	20 31       	cpi	r18, 0x10	; 16
    2bec:	38 07       	cpc	r19, r24
    2bee:	b9 f7       	brne	.-18     	; 0x2bde <main+0x76>
	_delay_ms(1000);
	
	ppm_calibrate(50);
    2bf0:	82 e3       	ldi	r24, 0x32	; 50
    2bf2:	0e 94 cb 33 	call	0x6796	; 0x6796 <ppm_calibrate>
	
	// if switch is up, then wait for user to unlock, or else just arm the ESCs
	if (switch_1_is_down() == 0)
    2bf6:	1b 99       	sbic	0x03, 3	; 3
    2bf8:	d3 c2       	rjmp	.+1446   	; 0x31a0 <main+0x638>
	}
	else
	{
		for (uint8_t i = 0; i < 6; i++)
		{
			esc_set_width(i, ticks_500us * 2);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	60 e2       	ldi	r22, 0x20	; 32
    2bfe:	7e e4       	ldi	r23, 0x4E	; 78
    2c00:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	60 e2       	ldi	r22, 0x20	; 32
    2c08:	7e e4       	ldi	r23, 0x4E	; 78
    2c0a:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	60 e2       	ldi	r22, 0x20	; 32
    2c12:	7e e4       	ldi	r23, 0x4E	; 78
    2c14:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2c18:	83 e0       	ldi	r24, 0x03	; 3
    2c1a:	60 e2       	ldi	r22, 0x20	; 32
    2c1c:	7e e4       	ldi	r23, 0x4E	; 78
    2c1e:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2c22:	84 e0       	ldi	r24, 0x04	; 4
    2c24:	60 e2       	ldi	r22, 0x20	; 32
    2c26:	7e e4       	ldi	r23, 0x4E	; 78
    2c28:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2c2c:	85 e0       	ldi	r24, 0x05	; 5
    2c2e:	60 e2       	ldi	r22, 0x20	; 32
    2c30:	7e e4       	ldi	r23, 0x4E	; 78
    2c32:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    2c36:	c0 e0       	ldi	r28, 0x00	; 0
    2c38:	d0 e0       	ldi	r29, 0x00	; 0
    2c3a:	05 c0       	rjmp	.+10     	; 0x2c46 <main+0xde>
	
		for (int i = 0; i < 100 * 5; i++)
		{
			if (esc_is_done())
			{
				esc_start_next();
    2c3c:	21 96       	adiw	r28, 0x01	; 1
		for (uint8_t i = 0; i < 6; i++)
		{
			esc_set_width(i, ticks_500us * 2);
		}
	
		for (int i = 0; i < 100 * 5; i++)
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	c4 3f       	cpi	r28, 0xF4	; 244
    2c42:	d9 07       	cpc	r29, r25
    2c44:	59 f0       	breq	.+22     	; 0x2c5c <main+0xf4>
		{
			if (esc_is_done())
    2c46:	0e 94 34 21 	call	0x4268	; 0x4268 <esc_is_done>
    2c4a:	88 23       	and	r24, r24
    2c4c:	b9 f3       	breq	.-18     	; 0x2c3c <main+0xd4>
			{
				esc_start_next();
    2c4e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <esc_start_next>
    2c52:	21 96       	adiw	r28, 0x01	; 1
		for (uint8_t i = 0; i < 6; i++)
		{
			esc_set_width(i, ticks_500us * 2);
		}
	
		for (int i = 0; i < 100 * 5; i++)
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	c4 3f       	cpi	r28, 0xF4	; 244
    2c58:	d9 07       	cpc	r29, r25
    2c5a:	a9 f7       	brne	.-22     	; 0x2c46 <main+0xde>
				esc_start_next();
			}
		}
	}
	
	ppm_is_new_data(0);
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
	while (ppm_is_new_data(0xFF) == 0);
    2c62:	8f ef       	ldi	r24, 0xFF	; 255
    2c64:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    2c68:	88 23       	and	r24, r24
    2c6a:	d9 f3       	breq	.-10     	; 0x2c62 <main+0xfa>
	
	sens_calibrate(50);
    2c6c:	82 e3       	ldi	r24, 0x32	; 50
    2c6e:	0e 94 c3 23 	call	0x4786	; 0x4786 <sens_calibrate>
	
	for (int i = 0; i < 8; i++)
	{
		fprintf_P(&serdebugstream, PSTR("sensor %d: %d - %d\r\n"), i, sens_read(i), sens_offset(i));
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2c78:	7b 01       	movw	r14, r22
    2c7a:	8c 01       	movw	r16, r24
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2c82:	ad b7       	in	r26, 0x3d	; 61
    2c84:	be b7       	in	r27, 0x3e	; 62
    2c86:	1e 97       	sbiw	r26, 0x0e	; 14
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	be bf       	out	0x3e, r27	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	ad bf       	out	0x3d, r26	; 61
    2c92:	ed b7       	in	r30, 0x3d	; 61
    2c94:	fe b7       	in	r31, 0x3e	; 62
    2c96:	31 96       	adiw	r30, 0x01	; 1
    2c98:	2e e0       	ldi	r18, 0x0E	; 14
    2c9a:	a2 2e       	mov	r10, r18
    2c9c:	22 e0       	ldi	r18, 0x02	; 2
    2c9e:	b2 2e       	mov	r11, r18
    2ca0:	12 96       	adiw	r26, 0x02	; 2
    2ca2:	bc 92       	st	X, r11
    2ca4:	ae 92       	st	-X, r10
    2ca6:	11 97       	sbiw	r26, 0x01	; 1
    2ca8:	ba ef       	ldi	r27, 0xFA	; 250
    2caa:	cb 2e       	mov	r12, r27
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	db 2e       	mov	r13, r27
    2cb0:	d3 82       	std	Z+3, r13	; 0x03
    2cb2:	c2 82       	std	Z+2, r12	; 0x02
    2cb4:	15 82       	std	Z+5, r1	; 0x05
    2cb6:	14 82       	std	Z+4, r1	; 0x04
    2cb8:	e6 82       	std	Z+6, r14	; 0x06
    2cba:	f7 82       	std	Z+7, r15	; 0x07
    2cbc:	00 87       	std	Z+8, r16	; 0x08
    2cbe:	11 87       	std	Z+9, r17	; 0x09
    2cc0:	62 87       	std	Z+10, r22	; 0x0a
    2cc2:	73 87       	std	Z+11, r23	; 0x0b
    2cc4:	84 87       	std	Z+12, r24	; 0x0c
    2cc6:	95 87       	std	Z+13, r25	; 0x0d
    2cc8:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2ccc:	2d b7       	in	r18, 0x3d	; 61
    2cce:	3e b7       	in	r19, 0x3e	; 62
    2cd0:	22 5f       	subi	r18, 0xF2	; 242
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	3e bf       	out	0x3e, r19	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	2d bf       	out	0x3d, r18	; 61
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2ce4:	7b 01       	movw	r14, r22
    2ce6:	8c 01       	movw	r16, r24
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2cee:	ad b7       	in	r26, 0x3d	; 61
    2cf0:	be b7       	in	r27, 0x3e	; 62
    2cf2:	1e 97       	sbiw	r26, 0x0e	; 14
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	be bf       	out	0x3e, r27	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	ad bf       	out	0x3d, r26	; 61
    2cfe:	ed b7       	in	r30, 0x3d	; 61
    2d00:	fe b7       	in	r31, 0x3e	; 62
    2d02:	31 96       	adiw	r30, 0x01	; 1
    2d04:	12 96       	adiw	r26, 0x02	; 2
    2d06:	bc 92       	st	X, r11
    2d08:	ae 92       	st	-X, r10
    2d0a:	11 97       	sbiw	r26, 0x01	; 1
    2d0c:	d3 82       	std	Z+3, r13	; 0x03
    2d0e:	c2 82       	std	Z+2, r12	; 0x02
    2d10:	a1 e0       	ldi	r26, 0x01	; 1
    2d12:	8a 2e       	mov	r8, r26
    2d14:	91 2c       	mov	r9, r1
    2d16:	95 82       	std	Z+5, r9	; 0x05
    2d18:	84 82       	std	Z+4, r8	; 0x04
    2d1a:	e6 82       	std	Z+6, r14	; 0x06
    2d1c:	f7 82       	std	Z+7, r15	; 0x07
    2d1e:	00 87       	std	Z+8, r16	; 0x08
    2d20:	11 87       	std	Z+9, r17	; 0x09
    2d22:	62 87       	std	Z+10, r22	; 0x0a
    2d24:	73 87       	std	Z+11, r23	; 0x0b
    2d26:	84 87       	std	Z+12, r24	; 0x0c
    2d28:	95 87       	std	Z+13, r25	; 0x0d
    2d2a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2d2e:	2d b7       	in	r18, 0x3d	; 61
    2d30:	3e b7       	in	r19, 0x3e	; 62
    2d32:	22 5f       	subi	r18, 0xF2	; 242
    2d34:	3f 4f       	sbci	r19, 0xFF	; 255
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	3e bf       	out	0x3e, r19	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	2d bf       	out	0x3d, r18	; 61
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2d46:	7b 01       	movw	r14, r22
    2d48:	8c 01       	movw	r16, r24
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2d50:	ad b7       	in	r26, 0x3d	; 61
    2d52:	be b7       	in	r27, 0x3e	; 62
    2d54:	1e 97       	sbiw	r26, 0x0e	; 14
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	be bf       	out	0x3e, r27	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	ad bf       	out	0x3d, r26	; 61
    2d60:	ed b7       	in	r30, 0x3d	; 61
    2d62:	fe b7       	in	r31, 0x3e	; 62
    2d64:	31 96       	adiw	r30, 0x01	; 1
    2d66:	12 96       	adiw	r26, 0x02	; 2
    2d68:	bc 92       	st	X, r11
    2d6a:	ae 92       	st	-X, r10
    2d6c:	11 97       	sbiw	r26, 0x01	; 1
    2d6e:	d3 82       	std	Z+3, r13	; 0x03
    2d70:	c2 82       	std	Z+2, r12	; 0x02
    2d72:	52 e0       	ldi	r21, 0x02	; 2
    2d74:	65 2e       	mov	r6, r21
    2d76:	71 2c       	mov	r7, r1
    2d78:	75 82       	std	Z+5, r7	; 0x05
    2d7a:	64 82       	std	Z+4, r6	; 0x04
    2d7c:	e6 82       	std	Z+6, r14	; 0x06
    2d7e:	f7 82       	std	Z+7, r15	; 0x07
    2d80:	00 87       	std	Z+8, r16	; 0x08
    2d82:	11 87       	std	Z+9, r17	; 0x09
    2d84:	62 87       	std	Z+10, r22	; 0x0a
    2d86:	73 87       	std	Z+11, r23	; 0x0b
    2d88:	84 87       	std	Z+12, r24	; 0x0c
    2d8a:	95 87       	std	Z+13, r25	; 0x0d
    2d8c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2d90:	2d b7       	in	r18, 0x3d	; 61
    2d92:	3e b7       	in	r19, 0x3e	; 62
    2d94:	22 5f       	subi	r18, 0xF2	; 242
    2d96:	3f 4f       	sbci	r19, 0xFF	; 255
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	3e bf       	out	0x3e, r19	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	2d bf       	out	0x3d, r18	; 61
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2da8:	7b 01       	movw	r14, r22
    2daa:	8c 01       	movw	r16, r24
    2dac:	83 e0       	ldi	r24, 0x03	; 3
    2dae:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2db2:	ad b7       	in	r26, 0x3d	; 61
    2db4:	be b7       	in	r27, 0x3e	; 62
    2db6:	1e 97       	sbiw	r26, 0x0e	; 14
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	be bf       	out	0x3e, r27	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	ad bf       	out	0x3d, r26	; 61
    2dc2:	ed b7       	in	r30, 0x3d	; 61
    2dc4:	fe b7       	in	r31, 0x3e	; 62
    2dc6:	31 96       	adiw	r30, 0x01	; 1
    2dc8:	12 96       	adiw	r26, 0x02	; 2
    2dca:	bc 92       	st	X, r11
    2dcc:	ae 92       	st	-X, r10
    2dce:	11 97       	sbiw	r26, 0x01	; 1
    2dd0:	d3 82       	std	Z+3, r13	; 0x03
    2dd2:	c2 82       	std	Z+2, r12	; 0x02
    2dd4:	43 e0       	ldi	r20, 0x03	; 3
    2dd6:	44 2e       	mov	r4, r20
    2dd8:	51 2c       	mov	r5, r1
    2dda:	55 82       	std	Z+5, r5	; 0x05
    2ddc:	44 82       	std	Z+4, r4	; 0x04
    2dde:	e6 82       	std	Z+6, r14	; 0x06
    2de0:	f7 82       	std	Z+7, r15	; 0x07
    2de2:	00 87       	std	Z+8, r16	; 0x08
    2de4:	11 87       	std	Z+9, r17	; 0x09
    2de6:	62 87       	std	Z+10, r22	; 0x0a
    2de8:	73 87       	std	Z+11, r23	; 0x0b
    2dea:	84 87       	std	Z+12, r24	; 0x0c
    2dec:	95 87       	std	Z+13, r25	; 0x0d
    2dee:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2df2:	2d b7       	in	r18, 0x3d	; 61
    2df4:	3e b7       	in	r19, 0x3e	; 62
    2df6:	22 5f       	subi	r18, 0xF2	; 242
    2df8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	3e bf       	out	0x3e, r19	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	2d bf       	out	0x3d, r18	; 61
    2e04:	84 e0       	ldi	r24, 0x04	; 4
    2e06:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2e0a:	7b 01       	movw	r14, r22
    2e0c:	8c 01       	movw	r16, r24
    2e0e:	84 e0       	ldi	r24, 0x04	; 4
    2e10:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2e14:	ad b7       	in	r26, 0x3d	; 61
    2e16:	be b7       	in	r27, 0x3e	; 62
    2e18:	1e 97       	sbiw	r26, 0x0e	; 14
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	be bf       	out	0x3e, r27	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	ad bf       	out	0x3d, r26	; 61
    2e24:	ed b7       	in	r30, 0x3d	; 61
    2e26:	fe b7       	in	r31, 0x3e	; 62
    2e28:	31 96       	adiw	r30, 0x01	; 1
    2e2a:	12 96       	adiw	r26, 0x02	; 2
    2e2c:	bc 92       	st	X, r11
    2e2e:	ae 92       	st	-X, r10
    2e30:	11 97       	sbiw	r26, 0x01	; 1
    2e32:	d3 82       	std	Z+3, r13	; 0x03
    2e34:	c2 82       	std	Z+2, r12	; 0x02
    2e36:	34 e0       	ldi	r19, 0x04	; 4
    2e38:	23 2e       	mov	r2, r19
    2e3a:	31 2c       	mov	r3, r1
    2e3c:	35 82       	std	Z+5, r3	; 0x05
    2e3e:	24 82       	std	Z+4, r2	; 0x04
    2e40:	e6 82       	std	Z+6, r14	; 0x06
    2e42:	f7 82       	std	Z+7, r15	; 0x07
    2e44:	00 87       	std	Z+8, r16	; 0x08
    2e46:	11 87       	std	Z+9, r17	; 0x09
    2e48:	62 87       	std	Z+10, r22	; 0x0a
    2e4a:	73 87       	std	Z+11, r23	; 0x0b
    2e4c:	84 87       	std	Z+12, r24	; 0x0c
    2e4e:	95 87       	std	Z+13, r25	; 0x0d
    2e50:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2e54:	2d b7       	in	r18, 0x3d	; 61
    2e56:	3e b7       	in	r19, 0x3e	; 62
    2e58:	22 5f       	subi	r18, 0xF2	; 242
    2e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	3e bf       	out	0x3e, r19	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	2d bf       	out	0x3d, r18	; 61
    2e66:	85 e0       	ldi	r24, 0x05	; 5
    2e68:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2e6c:	7b 01       	movw	r14, r22
    2e6e:	8c 01       	movw	r16, r24
    2e70:	85 e0       	ldi	r24, 0x05	; 5
    2e72:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2e76:	ad b7       	in	r26, 0x3d	; 61
    2e78:	be b7       	in	r27, 0x3e	; 62
    2e7a:	1e 97       	sbiw	r26, 0x0e	; 14
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	be bf       	out	0x3e, r27	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	ad bf       	out	0x3d, r26	; 61
    2e86:	ed b7       	in	r30, 0x3d	; 61
    2e88:	fe b7       	in	r31, 0x3e	; 62
    2e8a:	31 96       	adiw	r30, 0x01	; 1
    2e8c:	12 96       	adiw	r26, 0x02	; 2
    2e8e:	bc 92       	st	X, r11
    2e90:	ae 92       	st	-X, r10
    2e92:	11 97       	sbiw	r26, 0x01	; 1
    2e94:	d3 82       	std	Z+3, r13	; 0x03
    2e96:	c2 82       	std	Z+2, r12	; 0x02
    2e98:	c5 e0       	ldi	r28, 0x05	; 5
    2e9a:	d0 e0       	ldi	r29, 0x00	; 0
    2e9c:	d5 83       	std	Z+5, r29	; 0x05
    2e9e:	c4 83       	std	Z+4, r28	; 0x04
    2ea0:	e6 82       	std	Z+6, r14	; 0x06
    2ea2:	f7 82       	std	Z+7, r15	; 0x07
    2ea4:	00 87       	std	Z+8, r16	; 0x08
    2ea6:	11 87       	std	Z+9, r17	; 0x09
    2ea8:	62 87       	std	Z+10, r22	; 0x0a
    2eaa:	73 87       	std	Z+11, r23	; 0x0b
    2eac:	84 87       	std	Z+12, r24	; 0x0c
    2eae:	95 87       	std	Z+13, r25	; 0x0d
    2eb0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2eb4:	2d b7       	in	r18, 0x3d	; 61
    2eb6:	3e b7       	in	r19, 0x3e	; 62
    2eb8:	22 5f       	subi	r18, 0xF2	; 242
    2eba:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	3e bf       	out	0x3e, r19	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	2d bf       	out	0x3d, r18	; 61
    2ec6:	86 e0       	ldi	r24, 0x06	; 6
    2ec8:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2ecc:	7b 01       	movw	r14, r22
    2ece:	8c 01       	movw	r16, r24
    2ed0:	86 e0       	ldi	r24, 0x06	; 6
    2ed2:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2ed6:	ad b7       	in	r26, 0x3d	; 61
    2ed8:	be b7       	in	r27, 0x3e	; 62
    2eda:	1e 97       	sbiw	r26, 0x0e	; 14
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	be bf       	out	0x3e, r27	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	ad bf       	out	0x3d, r26	; 61
    2ee6:	ed b7       	in	r30, 0x3d	; 61
    2ee8:	fe b7       	in	r31, 0x3e	; 62
    2eea:	31 96       	adiw	r30, 0x01	; 1
    2eec:	12 96       	adiw	r26, 0x02	; 2
    2eee:	bc 92       	st	X, r11
    2ef0:	ae 92       	st	-X, r10
    2ef2:	11 97       	sbiw	r26, 0x01	; 1
    2ef4:	d3 82       	std	Z+3, r13	; 0x03
    2ef6:	c2 82       	std	Z+2, r12	; 0x02
    2ef8:	26 e0       	ldi	r18, 0x06	; 6
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	35 83       	std	Z+5, r19	; 0x05
    2efe:	24 83       	std	Z+4, r18	; 0x04
    2f00:	e6 82       	std	Z+6, r14	; 0x06
    2f02:	f7 82       	std	Z+7, r15	; 0x07
    2f04:	00 87       	std	Z+8, r16	; 0x08
    2f06:	11 87       	std	Z+9, r17	; 0x09
    2f08:	62 87       	std	Z+10, r22	; 0x0a
    2f0a:	73 87       	std	Z+11, r23	; 0x0b
    2f0c:	84 87       	std	Z+12, r24	; 0x0c
    2f0e:	95 87       	std	Z+13, r25	; 0x0d
    2f10:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2f14:	2d b7       	in	r18, 0x3d	; 61
    2f16:	3e b7       	in	r19, 0x3e	; 62
    2f18:	22 5f       	subi	r18, 0xF2	; 242
    2f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	3e bf       	out	0x3e, r19	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	2d bf       	out	0x3d, r18	; 61
    2f26:	87 e0       	ldi	r24, 0x07	; 7
    2f28:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    2f2c:	7b 01       	movw	r14, r22
    2f2e:	8c 01       	movw	r16, r24
    2f30:	87 e0       	ldi	r24, 0x07	; 7
    2f32:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    2f36:	ad b7       	in	r26, 0x3d	; 61
    2f38:	be b7       	in	r27, 0x3e	; 62
    2f3a:	1e 97       	sbiw	r26, 0x0e	; 14
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	be bf       	out	0x3e, r27	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	ad bf       	out	0x3d, r26	; 61
    2f46:	ed b7       	in	r30, 0x3d	; 61
    2f48:	fe b7       	in	r31, 0x3e	; 62
    2f4a:	31 96       	adiw	r30, 0x01	; 1
    2f4c:	12 96       	adiw	r26, 0x02	; 2
    2f4e:	bc 92       	st	X, r11
    2f50:	ae 92       	st	-X, r10
    2f52:	11 97       	sbiw	r26, 0x01	; 1
    2f54:	d3 82       	std	Z+3, r13	; 0x03
    2f56:	c2 82       	std	Z+2, r12	; 0x02
    2f58:	27 e0       	ldi	r18, 0x07	; 7
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	35 83       	std	Z+5, r19	; 0x05
    2f5e:	24 83       	std	Z+4, r18	; 0x04
    2f60:	e6 82       	std	Z+6, r14	; 0x06
    2f62:	f7 82       	std	Z+7, r15	; 0x07
    2f64:	00 87       	std	Z+8, r16	; 0x08
    2f66:	11 87       	std	Z+9, r17	; 0x09
    2f68:	62 87       	std	Z+10, r22	; 0x0a
    2f6a:	73 87       	std	Z+11, r23	; 0x0b
    2f6c:	84 87       	std	Z+12, r24	; 0x0c
    2f6e:	95 87       	std	Z+13, r25	; 0x0d
    2f70:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	}
	
	for (int i = 0; i < 6; i++)
	{
		fprintf_P(&serdebugstream, PSTR("ppm %d: %d + %d\r\n"), i, ppm_chan_read(i), ppm_center(i));
    2f74:	2d b7       	in	r18, 0x3d	; 61
    2f76:	3e b7       	in	r19, 0x3e	; 62
    2f78:	22 5f       	subi	r18, 0xF2	; 242
    2f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	3e bf       	out	0x3e, r19	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	2d bf       	out	0x3d, r18	; 61
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    2f8c:	8c 01       	movw	r16, r24
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    2f94:	ad b7       	in	r26, 0x3d	; 61
    2f96:	be b7       	in	r27, 0x3e	; 62
    2f98:	1a 97       	sbiw	r26, 0x0a	; 10
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	be bf       	out	0x3e, r27	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	ad bf       	out	0x3d, r26	; 61
    2fa4:	ed b7       	in	r30, 0x3d	; 61
    2fa6:	fe b7       	in	r31, 0x3e	; 62
    2fa8:	31 96       	adiw	r30, 0x01	; 1
    2faa:	12 96       	adiw	r26, 0x02	; 2
    2fac:	bc 92       	st	X, r11
    2fae:	ae 92       	st	-X, r10
    2fb0:	11 97       	sbiw	r26, 0x01	; 1
    2fb2:	28 ee       	ldi	r18, 0xE8	; 232
    2fb4:	e2 2e       	mov	r14, r18
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	f2 2e       	mov	r15, r18
    2fba:	f3 82       	std	Z+3, r15	; 0x03
    2fbc:	e2 82       	std	Z+2, r14	; 0x02
    2fbe:	15 82       	std	Z+5, r1	; 0x05
    2fc0:	14 82       	std	Z+4, r1	; 0x04
    2fc2:	17 83       	std	Z+7, r17	; 0x07
    2fc4:	06 83       	std	Z+6, r16	; 0x06
    2fc6:	91 87       	std	Z+9, r25	; 0x09
    2fc8:	80 87       	std	Z+8, r24	; 0x08
    2fca:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    2fce:	2d b7       	in	r18, 0x3d	; 61
    2fd0:	3e b7       	in	r19, 0x3e	; 62
    2fd2:	26 5f       	subi	r18, 0xF6	; 246
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	3e bf       	out	0x3e, r19	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	2d bf       	out	0x3d, r18	; 61
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    2fe6:	8c 01       	movw	r16, r24
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    2fee:	ad b7       	in	r26, 0x3d	; 61
    2ff0:	be b7       	in	r27, 0x3e	; 62
    2ff2:	1a 97       	sbiw	r26, 0x0a	; 10
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	be bf       	out	0x3e, r27	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	ad bf       	out	0x3d, r26	; 61
    2ffe:	ed b7       	in	r30, 0x3d	; 61
    3000:	fe b7       	in	r31, 0x3e	; 62
    3002:	31 96       	adiw	r30, 0x01	; 1
    3004:	12 96       	adiw	r26, 0x02	; 2
    3006:	bc 92       	st	X, r11
    3008:	ae 92       	st	-X, r10
    300a:	11 97       	sbiw	r26, 0x01	; 1
    300c:	f3 82       	std	Z+3, r15	; 0x03
    300e:	e2 82       	std	Z+2, r14	; 0x02
    3010:	95 82       	std	Z+5, r9	; 0x05
    3012:	84 82       	std	Z+4, r8	; 0x04
    3014:	17 83       	std	Z+7, r17	; 0x07
    3016:	06 83       	std	Z+6, r16	; 0x06
    3018:	91 87       	std	Z+9, r25	; 0x09
    301a:	80 87       	std	Z+8, r24	; 0x08
    301c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3020:	2d b7       	in	r18, 0x3d	; 61
    3022:	3e b7       	in	r19, 0x3e	; 62
    3024:	26 5f       	subi	r18, 0xF6	; 246
    3026:	3f 4f       	sbci	r19, 0xFF	; 255
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	3e bf       	out	0x3e, r19	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	2d bf       	out	0x3d, r18	; 61
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    3038:	8c 01       	movw	r16, r24
    303a:	82 e0       	ldi	r24, 0x02	; 2
    303c:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3040:	ad b7       	in	r26, 0x3d	; 61
    3042:	be b7       	in	r27, 0x3e	; 62
    3044:	1a 97       	sbiw	r26, 0x0a	; 10
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	be bf       	out	0x3e, r27	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	ad bf       	out	0x3d, r26	; 61
    3050:	ed b7       	in	r30, 0x3d	; 61
    3052:	fe b7       	in	r31, 0x3e	; 62
    3054:	31 96       	adiw	r30, 0x01	; 1
    3056:	12 96       	adiw	r26, 0x02	; 2
    3058:	bc 92       	st	X, r11
    305a:	ae 92       	st	-X, r10
    305c:	11 97       	sbiw	r26, 0x01	; 1
    305e:	f3 82       	std	Z+3, r15	; 0x03
    3060:	e2 82       	std	Z+2, r14	; 0x02
    3062:	75 82       	std	Z+5, r7	; 0x05
    3064:	64 82       	std	Z+4, r6	; 0x04
    3066:	17 83       	std	Z+7, r17	; 0x07
    3068:	06 83       	std	Z+6, r16	; 0x06
    306a:	91 87       	std	Z+9, r25	; 0x09
    306c:	80 87       	std	Z+8, r24	; 0x08
    306e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3072:	2d b7       	in	r18, 0x3d	; 61
    3074:	3e b7       	in	r19, 0x3e	; 62
    3076:	26 5f       	subi	r18, 0xF6	; 246
    3078:	3f 4f       	sbci	r19, 0xFF	; 255
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	3e bf       	out	0x3e, r19	; 62
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	2d bf       	out	0x3d, r18	; 61
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    308a:	8c 01       	movw	r16, r24
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3092:	ad b7       	in	r26, 0x3d	; 61
    3094:	be b7       	in	r27, 0x3e	; 62
    3096:	1a 97       	sbiw	r26, 0x0a	; 10
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	be bf       	out	0x3e, r27	; 62
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	ad bf       	out	0x3d, r26	; 61
    30a2:	ed b7       	in	r30, 0x3d	; 61
    30a4:	fe b7       	in	r31, 0x3e	; 62
    30a6:	31 96       	adiw	r30, 0x01	; 1
    30a8:	12 96       	adiw	r26, 0x02	; 2
    30aa:	bc 92       	st	X, r11
    30ac:	ae 92       	st	-X, r10
    30ae:	11 97       	sbiw	r26, 0x01	; 1
    30b0:	f3 82       	std	Z+3, r15	; 0x03
    30b2:	e2 82       	std	Z+2, r14	; 0x02
    30b4:	55 82       	std	Z+5, r5	; 0x05
    30b6:	44 82       	std	Z+4, r4	; 0x04
    30b8:	17 83       	std	Z+7, r17	; 0x07
    30ba:	06 83       	std	Z+6, r16	; 0x06
    30bc:	91 87       	std	Z+9, r25	; 0x09
    30be:	80 87       	std	Z+8, r24	; 0x08
    30c0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    30c4:	2d b7       	in	r18, 0x3d	; 61
    30c6:	3e b7       	in	r19, 0x3e	; 62
    30c8:	26 5f       	subi	r18, 0xF6	; 246
    30ca:	3f 4f       	sbci	r19, 0xFF	; 255
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	3e bf       	out	0x3e, r19	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	2d bf       	out	0x3d, r18	; 61
    30d6:	84 e0       	ldi	r24, 0x04	; 4
    30d8:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    30dc:	8c 01       	movw	r16, r24
    30de:	84 e0       	ldi	r24, 0x04	; 4
    30e0:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    30e4:	ad b7       	in	r26, 0x3d	; 61
    30e6:	be b7       	in	r27, 0x3e	; 62
    30e8:	1a 97       	sbiw	r26, 0x0a	; 10
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	be bf       	out	0x3e, r27	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	ad bf       	out	0x3d, r26	; 61
    30f4:	ed b7       	in	r30, 0x3d	; 61
    30f6:	fe b7       	in	r31, 0x3e	; 62
    30f8:	31 96       	adiw	r30, 0x01	; 1
    30fa:	12 96       	adiw	r26, 0x02	; 2
    30fc:	bc 92       	st	X, r11
    30fe:	ae 92       	st	-X, r10
    3100:	11 97       	sbiw	r26, 0x01	; 1
    3102:	f3 82       	std	Z+3, r15	; 0x03
    3104:	e2 82       	std	Z+2, r14	; 0x02
    3106:	35 82       	std	Z+5, r3	; 0x05
    3108:	24 82       	std	Z+4, r2	; 0x04
    310a:	17 83       	std	Z+7, r17	; 0x07
    310c:	06 83       	std	Z+6, r16	; 0x06
    310e:	91 87       	std	Z+9, r25	; 0x09
    3110:	80 87       	std	Z+8, r24	; 0x08
    3112:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3116:	2d b7       	in	r18, 0x3d	; 61
    3118:	3e b7       	in	r19, 0x3e	; 62
    311a:	26 5f       	subi	r18, 0xF6	; 246
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	3e bf       	out	0x3e, r19	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	2d bf       	out	0x3d, r18	; 61
    3128:	85 e0       	ldi	r24, 0x05	; 5
    312a:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    312e:	8c 01       	movw	r16, r24
    3130:	85 e0       	ldi	r24, 0x05	; 5
    3132:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3136:	ad b7       	in	r26, 0x3d	; 61
    3138:	be b7       	in	r27, 0x3e	; 62
    313a:	1a 97       	sbiw	r26, 0x0a	; 10
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	be bf       	out	0x3e, r27	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	ad bf       	out	0x3d, r26	; 61
    3146:	ed b7       	in	r30, 0x3d	; 61
    3148:	fe b7       	in	r31, 0x3e	; 62
    314a:	31 96       	adiw	r30, 0x01	; 1
    314c:	12 96       	adiw	r26, 0x02	; 2
    314e:	bc 92       	st	X, r11
    3150:	ae 92       	st	-X, r10
    3152:	11 97       	sbiw	r26, 0x01	; 1
    3154:	f3 82       	std	Z+3, r15	; 0x03
    3156:	e2 82       	std	Z+2, r14	; 0x02
    3158:	d5 83       	std	Z+5, r29	; 0x05
    315a:	c4 83       	std	Z+4, r28	; 0x04
    315c:	17 83       	std	Z+7, r17	; 0x07
    315e:	06 83       	std	Z+6, r16	; 0x06
    3160:	91 87       	std	Z+9, r25	; 0x09
    3162:	80 87       	std	Z+8, r24	; 0x08
    3164:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3168:	2d b7       	in	r18, 0x3d	; 61
    316a:	3e b7       	in	r19, 0x3e	; 62
    316c:	26 5f       	subi	r18, 0xF6	; 246
    316e:	3f 4f       	sbci	r19, 0xFF	; 255
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	3e bf       	out	0x3e, r19	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	2d bf       	out	0x3d, r18	; 61
			esc_start_next();
		}
	}
	
	return 0;
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	bf 90       	pop	r11
    318c:	af 90       	pop	r10
    318e:	9f 90       	pop	r9
    3190:	8f 90       	pop	r8
    3192:	7f 90       	pop	r7
    3194:	6f 90       	pop	r6
    3196:	5f 90       	pop	r5
    3198:	4f 90       	pop	r4
    319a:	3f 90       	pop	r3
    319c:	2f 90       	pop	r2
    319e:	08 95       	ret
	ppm_calibrate(50);
	
	// if switch is up, then wait for user to unlock, or else just arm the ESCs
	if (switch_1_is_down() == 0)
	{
		hold_esc();
    31a0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <hold_esc>
    31a4:	5b cd       	rjmp	.-1354   	; 0x2c5c <main+0xf4>

000031a6 <test_user_io>:
#ifdef __AVR_ATmega644P__
FILE ostream_1 = FDEV_SETUP_STREAM(ser_tx_1, NULL, _FDEV_SETUP_WRITE);
#endif

void test_user_io()
{
    31a6:	4f 92       	push	r4
    31a8:	5f 92       	push	r5
    31aa:	6f 92       	push	r6
    31ac:	7f 92       	push	r7
    31ae:	8f 92       	push	r8
    31b0:	9f 92       	push	r9
    31b2:	af 92       	push	r10
    31b4:	bf 92       	push	r11
    31b6:	cf 92       	push	r12
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
	// test user buttons, dip switches, and the LEDs
	
	user_io_init();
    31c6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
    31ca:	84 ef       	ldi	r24, 0xF4	; 244
    31cc:	48 2e       	mov	r4, r24
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	58 2e       	mov	r5, r24
	
	// perform test forever
	while (1)
	{
		if (button_is_pressed())
    31d2:	1c 99       	sbic	0x03, 4	; 3
    31d4:	04 c0       	rjmp	.+8      	; 0x31de <test_user_io+0x38>
		{
			// LEDs on when button is pressed
			LED1_on();
    31d6:	46 98       	cbi	0x08, 6	; 8
			LED2_on();
    31d8:	47 98       	cbi	0x08, 7	; 8
	user_io_init();
	
	// perform test forever
	while (1)
	{
		if (button_is_pressed())
    31da:	1c 9b       	sbis	0x03, 4	; 3
    31dc:	fc cf       	rjmp	.-8      	; 0x31d6 <test_user_io+0x30>
		else
		{
			int delay1 = 200;
			int delay2 = 200;
			
			if (switch_1_is_down() && switch_2_is_down())
    31de:	1b 99       	sbic	0x03, 3	; 3
    31e0:	88 c0       	rjmp	.+272    	; 0x32f2 <test_user_io+0x14c>
    31e2:	1a 99       	sbic	0x03, 2	; 3
    31e4:	86 c0       	rjmp	.+268    	; 0x32f2 <test_user_io+0x14c>
    31e6:	0f 2e       	mov	r0, r31
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	6f 2e       	mov	r6, r31
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	7f 2e       	mov	r7, r31
    31f0:	f8 ec       	ldi	r31, 0xC8	; 200
    31f2:	8f 2e       	mov	r8, r31
    31f4:	f3 e4       	ldi	r31, 0x43	; 67
    31f6:	9f 2e       	mov	r9, r31
    31f8:	f0 2d       	mov	r31, r0
    31fa:	0f 2e       	mov	r0, r31
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	ef 2e       	mov	r14, r31
    3200:	f4 e2       	ldi	r31, 0x24	; 36
    3202:	ff 2e       	mov	r15, r31
    3204:	f4 ef       	ldi	r31, 0xF4	; 244
    3206:	0f 2f       	mov	r16, r31
    3208:	f9 e4       	ldi	r31, 0x49	; 73
    320a:	1f 2f       	mov	r17, r31
    320c:	f0 2d       	mov	r31, r0
			else if (switch_1_is_down() && !switch_2_is_down())
			{
				delay1 = 800;
			}
			
			if (switch_3_is_down() && switch_4_is_down())
    320e:	19 99       	sbic	0x03, 1	; 3
    3210:	5f c0       	rjmp	.+190    	; 0x32d0 <test_user_io+0x12a>
    3212:	18 99       	sbic	0x03, 0	; 3
    3214:	5d c0       	rjmp	.+186    	; 0x32d0 <test_user_io+0x12a>
    3216:	0f 2e       	mov	r0, r31
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	af 2e       	mov	r10, r31
    321c:	fb e1       	ldi	r31, 0x1B	; 27
    321e:	bf 2e       	mov	r11, r31
    3220:	f7 eb       	ldi	r31, 0xB7	; 183
    3222:	cf 2e       	mov	r12, r31
    3224:	f9 e4       	ldi	r31, 0x49	; 73
    3226:	df 2e       	mov	r13, r31
    3228:	f0 2d       	mov	r31, r0
    322a:	c8 eb       	ldi	r28, 0xB8	; 184
    322c:	db e0       	ldi	r29, 0x0B	; 11
			else if (switch_3_is_down() && !switch_4_is_down())
			{
				delay2 = 800;
			}
			
			LED1_on();
    322e:	46 98       	cbi	0x08, 6	; 8
			LED2_off();
    3230:	47 9a       	sbi	0x08, 7	; 8
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    3232:	c8 01       	movw	r24, r16
    3234:	b7 01       	movw	r22, r14
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 0e 12 	call	0x241c	; 0x241c <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	0c f4       	brge	.+2      	; 0x3248 <test_user_io+0xa2>
    3246:	c5 c0       	rjmp	.+394    	; 0x33d2 <test_user_io+0x22c>
		__ticks = 1;
	else if (__tmp > 65535)
    3248:	c8 01       	movw	r24, r16
    324a:	b7 01       	movw	r22, r14
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 ae 11 	call	0x235c	; 0x235c <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	0c f0       	brlt	.+2      	; 0x325e <test_user_io+0xb8>
    325c:	af c0       	rjmp	.+350    	; 0x33bc <test_user_io+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	c4 01       	movw	r24, r8
    3260:	b3 01       	movw	r22, r6
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e2       	ldi	r20, 0x20	; 32
    3268:	51 e4       	ldi	r21, 0x41	; 65
    326a:	0e 94 08 10 	call	0x2010	; 0x2010 <__mulsf3>
    326e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fixunssfsi>
    3272:	cb 01       	movw	r24, r22
		while(__ticks)
    3274:	67 2b       	or	r22, r23
    3276:	29 f0       	breq	.+10     	; 0x3282 <test_user_io+0xdc>
    3278:	f2 01       	movw	r30, r4
    327a:	31 97       	sbiw	r30, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <test_user_io+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3280:	d9 f7       	brne	.-10     	; 0x3278 <test_user_io+0xd2>
			_delay_ms(delay1);

			LED1_off();
    3282:	46 9a       	sbi	0x08, 6	; 8
			LED2_on();
    3284:	47 98       	cbi	0x08, 7	; 8
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    3286:	c6 01       	movw	r24, r12
    3288:	b5 01       	movw	r22, r10
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e8       	ldi	r20, 0x80	; 128
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	0e 94 0e 12 	call	0x241c	; 0x241c <__ltsf2>
    3296:	87 fd       	sbrc	r24, 7
    3298:	99 c0       	rjmp	.+306    	; 0x33cc <test_user_io+0x226>
		__ticks = 1;
	else if (__tmp > 65535)
    329a:	c6 01       	movw	r24, r12
    329c:	b5 01       	movw	r22, r10
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 ae 11 	call	0x235c	; 0x235c <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	2c f0       	brlt	.+10     	; 0x32b8 <test_user_io+0x112>
    32ae:	8f ef       	ldi	r24, 0xFF	; 255
    32b0:	9f ef       	ldi	r25, 0xFF	; 255
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <test_user_io+0x10c>
    32b6:	8d cf       	rjmp	.-230    	; 0x31d2 <test_user_io+0x2c>
    32b8:	c2 01       	movw	r24, r4
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	f1 f7       	brne	.-4      	; 0x32ba <test_user_io+0x114>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32be:	21 97       	sbiw	r28, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <test_user_io+0x11e>
    32c2:	87 cf       	rjmp	.-242    	; 0x31d2 <test_user_io+0x2c>
    32c4:	c2 01       	movw	r24, r4
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <test_user_io+0x120>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ca:	21 97       	sbiw	r28, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32cc:	a9 f7       	brne	.-22     	; 0x32b8 <test_user_io+0x112>
    32ce:	81 cf       	rjmp	.-254    	; 0x31d2 <test_user_io+0x2c>
			
			if (switch_3_is_down() && switch_4_is_down())
			{
				delay2 = 300;
			}
			else if (!switch_3_is_down() && switch_4_is_down())
    32d0:	19 9b       	sbis	0x03, 1	; 3
    32d2:	28 c0       	rjmp	.+80     	; 0x3324 <test_user_io+0x17e>
    32d4:	18 99       	sbic	0x03, 0	; 3
    32d6:	26 c0       	rjmp	.+76     	; 0x3324 <test_user_io+0x17e>
    32d8:	0f 2e       	mov	r0, r31
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	af 2e       	mov	r10, r31
    32de:	fb e1       	ldi	r31, 0x1B	; 27
    32e0:	bf 2e       	mov	r11, r31
    32e2:	f7 e3       	ldi	r31, 0x37	; 55
    32e4:	cf 2e       	mov	r12, r31
    32e6:	fa e4       	ldi	r31, 0x4A	; 74
    32e8:	df 2e       	mov	r13, r31
    32ea:	f0 2d       	mov	r31, r0
    32ec:	c0 e7       	ldi	r28, 0x70	; 112
    32ee:	d7 e1       	ldi	r29, 0x17	; 23
    32f0:	9e cf       	rjmp	.-196    	; 0x322e <test_user_io+0x88>
			
			if (switch_1_is_down() && switch_2_is_down())
			{
				delay1 = 400;
			}
			else if (!switch_1_is_down() && switch_2_is_down())
    32f2:	1b 9b       	sbis	0x03, 3	; 3
    32f4:	28 c0       	rjmp	.+80     	; 0x3346 <test_user_io+0x1a0>
    32f6:	1a 99       	sbic	0x03, 2	; 3
    32f8:	26 c0       	rjmp	.+76     	; 0x3346 <test_user_io+0x1a0>
    32fa:	0f 2e       	mov	r0, r31
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	6f 2e       	mov	r6, r31
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	7f 2e       	mov	r7, r31
    3304:	f6 e1       	ldi	r31, 0x16	; 22
    3306:	8f 2e       	mov	r8, r31
    3308:	f4 e4       	ldi	r31, 0x44	; 68
    330a:	9f 2e       	mov	r9, r31
    330c:	f0 2d       	mov	r31, r0
    330e:	0f 2e       	mov	r0, r31
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	ef 2e       	mov	r14, r31
    3314:	fb e1       	ldi	r31, 0x1B	; 27
    3316:	ff 2e       	mov	r15, r31
    3318:	f7 e3       	ldi	r31, 0x37	; 55
    331a:	0f 2f       	mov	r16, r31
    331c:	fa e4       	ldi	r31, 0x4A	; 74
    331e:	1f 2f       	mov	r17, r31
    3320:	f0 2d       	mov	r31, r0
    3322:	75 cf       	rjmp	.-278    	; 0x320e <test_user_io+0x68>
			}
			else if (!switch_3_is_down() && switch_4_is_down())
			{
				delay2 = 600;
			}
			else if (switch_3_is_down() && !switch_4_is_down())
    3324:	19 99       	sbic	0x03, 1	; 3
    3326:	28 c0       	rjmp	.+80     	; 0x3378 <test_user_io+0x1d2>
    3328:	18 9b       	sbis	0x03, 0	; 3
    332a:	26 c0       	rjmp	.+76     	; 0x3378 <test_user_io+0x1d2>
    332c:	0f 2e       	mov	r0, r31
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	af 2e       	mov	r10, r31
    3332:	f4 e2       	ldi	r31, 0x24	; 36
    3334:	bf 2e       	mov	r11, r31
    3336:	f4 e7       	ldi	r31, 0x74	; 116
    3338:	cf 2e       	mov	r12, r31
    333a:	fa e4       	ldi	r31, 0x4A	; 74
    333c:	df 2e       	mov	r13, r31
    333e:	f0 2d       	mov	r31, r0
    3340:	c0 e4       	ldi	r28, 0x40	; 64
    3342:	df e1       	ldi	r29, 0x1F	; 31
    3344:	74 cf       	rjmp	.-280    	; 0x322e <test_user_io+0x88>
			}
			else if (!switch_1_is_down() && switch_2_is_down())
			{
				delay1 = 600;
			}
			else if (switch_1_is_down() && !switch_2_is_down())
    3346:	1b 99       	sbic	0x03, 3	; 3
    3348:	24 c0       	rjmp	.+72     	; 0x3392 <test_user_io+0x1ec>
    334a:	1a 9b       	sbis	0x03, 2	; 3
    334c:	22 c0       	rjmp	.+68     	; 0x3392 <test_user_io+0x1ec>
    334e:	0f 2e       	mov	r0, r31
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	6f 2e       	mov	r6, r31
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	7f 2e       	mov	r7, r31
    3358:	f8 e4       	ldi	r31, 0x48	; 72
    335a:	8f 2e       	mov	r8, r31
    335c:	f4 e4       	ldi	r31, 0x44	; 68
    335e:	9f 2e       	mov	r9, r31
    3360:	f0 2d       	mov	r31, r0
    3362:	0f 2e       	mov	r0, r31
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	ef 2e       	mov	r14, r31
    3368:	f4 e2       	ldi	r31, 0x24	; 36
    336a:	ff 2e       	mov	r15, r31
    336c:	f4 e7       	ldi	r31, 0x74	; 116
    336e:	0f 2f       	mov	r16, r31
    3370:	fa e4       	ldi	r31, 0x4A	; 74
    3372:	1f 2f       	mov	r17, r31
    3374:	f0 2d       	mov	r31, r0
    3376:	4b cf       	rjmp	.-362    	; 0x320e <test_user_io+0x68>
			}
			else if (!switch_3_is_down() && switch_4_is_down())
			{
				delay2 = 600;
			}
			else if (switch_3_is_down() && !switch_4_is_down())
    3378:	0f 2e       	mov	r0, r31
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	af 2e       	mov	r10, r31
    337e:	f4 e2       	ldi	r31, 0x24	; 36
    3380:	bf 2e       	mov	r11, r31
    3382:	f4 e7       	ldi	r31, 0x74	; 116
    3384:	cf 2e       	mov	r12, r31
    3386:	f9 e4       	ldi	r31, 0x49	; 73
    3388:	df 2e       	mov	r13, r31
    338a:	f0 2d       	mov	r31, r0
    338c:	c0 ed       	ldi	r28, 0xD0	; 208
    338e:	d7 e0       	ldi	r29, 0x07	; 7
    3390:	4e cf       	rjmp	.-356    	; 0x322e <test_user_io+0x88>
			}
			else if (!switch_1_is_down() && switch_2_is_down())
			{
				delay1 = 600;
			}
			else if (switch_1_is_down() && !switch_2_is_down())
    3392:	0f 2e       	mov	r0, r31
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	6f 2e       	mov	r6, r31
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	7f 2e       	mov	r7, r31
    339c:	f8 e4       	ldi	r31, 0x48	; 72
    339e:	8f 2e       	mov	r8, r31
    33a0:	f3 e4       	ldi	r31, 0x43	; 67
    33a2:	9f 2e       	mov	r9, r31
    33a4:	f0 2d       	mov	r31, r0
    33a6:	0f 2e       	mov	r0, r31
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	ef 2e       	mov	r14, r31
    33ac:	f4 e2       	ldi	r31, 0x24	; 36
    33ae:	ff 2e       	mov	r15, r31
    33b0:	f4 e7       	ldi	r31, 0x74	; 116
    33b2:	0f 2f       	mov	r16, r31
    33b4:	f9 e4       	ldi	r31, 0x49	; 73
    33b6:	1f 2f       	mov	r17, r31
    33b8:	f0 2d       	mov	r31, r0
    33ba:	29 cf       	rjmp	.-430    	; 0x320e <test_user_io+0x68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33bc:	c8 01       	movw	r24, r16
    33be:	b7 01       	movw	r22, r14
    33c0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fixunssfsi>
    33c4:	cb 01       	movw	r24, r22
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <test_user_io+0x220>
    33ca:	5b cf       	rjmp	.-330    	; 0x3282 <test_user_io+0xdc>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	70 cf       	rjmp	.-288    	; 0x32b2 <test_user_io+0x10c>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    33d2:	61 e0       	ldi	r22, 0x01	; 1
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	f6 cf       	rjmp	.-20     	; 0x33c4 <test_user_io+0x21e>

000033d8 <test_calc>:
		}
	}
}

void test_calc(uint8_t port)
{
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
	void (* ser_init)(uint16_t, uint8_t, uint8_t) = ser0_init;
	FILE * ostream = &ostream_0;
	
	#ifdef __AVR_ATmega644P__
	if (port == 1)
    33dc:	81 30       	cpi	r24, 0x01	; 1
    33de:	f1 f0       	breq	.+60     	; 0x341c <test_calc+0x44>
    33e0:	cc e1       	ldi	r28, 0x1C	; 28
    33e2:	d2 e0       	ldi	r29, 0x02	; 2
		ser_init = ser1_init;
		ostream = &ostream_1;
	}
	#endif
	
	user_io_init();
    33e4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	ser0_init(129, 32, 32);
    33e8:	81 e8       	ldi	r24, 0x81	; 129
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	60 e2       	ldi	r22, 0x20	; 32
    33ee:	40 e2       	ldi	r20, 0x20	; 32
    33f0:	0e 94 9b 32 	call	0x6536	; 0x6536 <ser0_init>
	
	sei();
    33f4:	78 94       	sei
	
	fprintf_P(ostream, PSTR("\r\ntest_calc\r\n"));
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <test_calc+0x20>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <test_calc+0x22>
    33fa:	ed b7       	in	r30, 0x3d	; 61
    33fc:	fe b7       	in	r31, 0x3e	; 62
    33fe:	d2 83       	std	Z+2, r29	; 0x02
    3400:	c1 83       	std	Z+1, r28	; 0x01
    3402:	8f e0       	ldi	r24, 0x0F	; 15
    3404:	91 e0       	ldi	r25, 0x01	; 1
    3406:	94 83       	std	Z+4, r25	; 0x04
    3408:	83 83       	std	Z+3, r24	; 0x03
    340a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
	
	
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	08 95       	ret
{
	void (* ser_init)(uint16_t, uint8_t, uint8_t) = ser0_init;
	FILE * ostream = &ostream_0;
	
	#ifdef __AVR_ATmega644P__
	if (port == 1)
    341c:	ca e2       	ldi	r28, 0x2A	; 42
    341e:	d2 e0       	ldi	r29, 0x02	; 2
    3420:	e1 cf       	rjmp	.-62     	; 0x33e4 <test_calc+0xc>

00003422 <test_ppm_to_esc>:
	}
}

// simply let the RC TX control each ESC channel
void test_ppm_to_esc()
{
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
	user_io_init();
    3426:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	LED1_on();
    342a:	46 98       	cbi	0x08, 6	; 8
	LED2_off();
    342c:	47 9a       	sbi	0x08, 7	; 8
	
	esc_init();
    342e:	0e 94 27 22 	call	0x444e	; 0x444e <esc_init>
	ppm_init();
    3432:	0e 94 02 36 	call	0x6c04	; 0x6c04 <ppm_init>
	
	sei();
    3436:	78 94       	sei
	
	ppm_calibrate(10);
    3438:	8a e0       	ldi	r24, 0x0A	; 10
    343a:	0e 94 cb 33 	call	0x6796	; 0x6796 <ppm_calibrate>
	
	hold_esc();
    343e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <hold_esc>
    3442:	07 c0       	rjmp	.+14     	; 0x3452 <test_ppm_to_esc+0x30>
		{
			LED2_on();
			LED1_off();
			if (switch_1_is_down())
			{
				esc_safe(0);
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	0e 94 3a 21 	call	0x4274	; 0x4274 <esc_safe>
			LED1_on();
			LED2_off();
			esc_safe(1);
		}
			
		if(esc_is_done())
    344a:	0e 94 34 21 	call	0x4268	; 0x4268 <esc_is_done>
    344e:	88 23       	and	r24, r24
    3450:	89 f4       	brne	.+34     	; 0x3474 <test_ppm_to_esc+0x52>
	
	while (1)
	{
		// switch 1 is used as safety switch
		// esc safe when tx is off
		if (ppm_tx_is_good(0xFF))
    3452:	8f ef       	ldi	r24, 0xFF	; 255
    3454:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
    3458:	88 23       	and	r24, r24
    345a:	09 f4       	brne	.+2      	; 0x345e <test_ppm_to_esc+0x3c>
    345c:	61 c0       	rjmp	.+194    	; 0x3520 <test_ppm_to_esc+0xfe>
		{
			LED2_on();
    345e:	47 98       	cbi	0x08, 7	; 8
			LED1_off();
    3460:	46 9a       	sbi	0x08, 6	; 8
			if (switch_1_is_down())
    3462:	1b 9b       	sbis	0x03, 3	; 3
    3464:	ef cf       	rjmp	.-34     	; 0x3444 <test_ppm_to_esc+0x22>
		}
		else
		{
			LED1_on();
			LED2_off();
			esc_safe(1);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	0e 94 3a 21 	call	0x4274	; 0x4274 <esc_safe>
		}
			
		if(esc_is_done())
    346c:	0e 94 34 21 	call	0x4268	; 0x4268 <esc_is_done>
    3470:	88 23       	and	r24, r24
    3472:	79 f3       	breq	.-34     	; 0x3452 <test_ppm_to_esc+0x30>
		{			
			for (uint8_t i = 0; i < 6; i++)
			{
				esc_set_width(i, ppm_chan_read(i) + ppm_center(i));
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    347a:	8c 01       	movw	r16, r24
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3482:	08 0f       	add	r16, r24
    3484:	19 1f       	adc	r17, r25
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	b8 01       	movw	r22, r16
    348a:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    3494:	8c 01       	movw	r16, r24
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    349c:	08 0f       	add	r16, r24
    349e:	19 1f       	adc	r17, r25
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	b8 01       	movw	r22, r16
    34a4:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    34ae:	8c 01       	movw	r16, r24
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    34b6:	08 0f       	add	r16, r24
    34b8:	19 1f       	adc	r17, r25
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	b8 01       	movw	r22, r16
    34be:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    34c2:	83 e0       	ldi	r24, 0x03	; 3
    34c4:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    34c8:	8c 01       	movw	r16, r24
    34ca:	83 e0       	ldi	r24, 0x03	; 3
    34cc:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    34d0:	08 0f       	add	r16, r24
    34d2:	19 1f       	adc	r17, r25
    34d4:	83 e0       	ldi	r24, 0x03	; 3
    34d6:	b8 01       	movw	r22, r16
    34d8:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    34dc:	84 e0       	ldi	r24, 0x04	; 4
    34de:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    34e2:	8c 01       	movw	r16, r24
    34e4:	84 e0       	ldi	r24, 0x04	; 4
    34e6:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    34ea:	08 0f       	add	r16, r24
    34ec:	19 1f       	adc	r17, r25
    34ee:	84 e0       	ldi	r24, 0x04	; 4
    34f0:	b8 01       	movw	r22, r16
    34f2:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
    34f6:	85 e0       	ldi	r24, 0x05	; 5
    34f8:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    34fc:	8c 01       	movw	r16, r24
    34fe:	85 e0       	ldi	r24, 0x05	; 5
    3500:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3504:	08 0f       	add	r16, r24
    3506:	19 1f       	adc	r17, r25
    3508:	85 e0       	ldi	r24, 0x05	; 5
    350a:	b8 01       	movw	r22, r16
    350c:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
			}
			
			esc_start_next();
    3510:	0e 94 dd 21 	call	0x43ba	; 0x43ba <esc_start_next>
	
	while (1)
	{
		// switch 1 is used as safety switch
		// esc safe when tx is off
		if (ppm_tx_is_good(0xFF))
    3514:	8f ef       	ldi	r24, 0xFF	; 255
    3516:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
    351a:	88 23       	and	r24, r24
    351c:	09 f0       	breq	.+2      	; 0x3520 <test_ppm_to_esc+0xfe>
    351e:	9f cf       	rjmp	.-194    	; 0x345e <test_ppm_to_esc+0x3c>
				esc_safe(1);
			}
		}
		else
		{
			LED1_on();
    3520:	46 98       	cbi	0x08, 6	; 8
			LED2_off();
    3522:	47 9a       	sbi	0x08, 7	; 8
			esc_safe(1);
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	0e 94 3a 21 	call	0x4274	; 0x4274 <esc_safe>
    352a:	a0 cf       	rjmp	.-192    	; 0x346c <test_ppm_to_esc+0x4a>

0000352c <test_esc>:
*/
void test_esc()
{
	// initialize stuff
	
	user_io_init();
    352c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	esc_init();
    3530:	0e 94 27 22 	call	0x444e	; 0x444e <esc_init>
	
	sei();
    3534:	78 94       	sei
    3536:	07 c0       	rjmp	.+14     	; 0x3546 <test_esc+0x1a>
	
	while (1)
	{
		// switch 1 is used as safety switch
		if (switch_1_is_down())
			esc_safe(0);
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	0e 94 3a 21 	call	0x4274	; 0x4274 <esc_safe>
		else
			esc_safe(1);
			
		if(esc_is_done())
    353e:	0e 94 34 21 	call	0x4268	; 0x4268 <esc_is_done>
    3542:	88 23       	and	r24, r24
    3544:	49 f4       	brne	.+18     	; 0x3558 <test_esc+0x2c>
	sei();
	
	while (1)
	{
		// switch 1 is used as safety switch
		if (switch_1_is_down())
    3546:	1b 9b       	sbis	0x03, 3	; 3
    3548:	f7 cf       	rjmp	.-18     	; 0x3538 <test_esc+0xc>
			esc_safe(0);
		else
			esc_safe(1);
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	0e 94 3a 21 	call	0x4274	; 0x4274 <esc_safe>
			
		if(esc_is_done())
    3550:	0e 94 34 21 	call	0x4268	; 0x4268 <esc_is_done>
    3554:	88 23       	and	r24, r24
    3556:	b9 f3       	breq	.-18     	; 0x3546 <test_esc+0x1a>
		{
			// set test width
			uint16_t testWidth = ticks_500us * 3;
			
			esc_set_width(f_mot_chan, testWidth + testWidth / 2);
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	68 ec       	ldi	r22, 0xC8	; 200
    355c:	7f ea       	ldi	r23, 0xAF	; 175
    355e:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
			esc_set_width(b_mot_chan, testWidth + testWidth / 4);
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	6c e7       	ldi	r22, 0x7C	; 124
    3566:	72 e9       	ldi	r23, 0x92	; 146
    3568:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
			esc_set_width(l_mot_chan, testWidth + testWidth / 8);
    356c:	82 e0       	ldi	r24, 0x02	; 2
    356e:	66 ed       	ldi	r22, 0xD6	; 214
    3570:	73 e8       	ldi	r23, 0x83	; 131
    3572:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
			esc_set_width(r_mot_chan, testWidth + testWidth / 16);
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	63 e8       	ldi	r22, 0x83	; 131
    357a:	7c e7       	ldi	r23, 0x7C	; 124
    357c:	0e 94 a1 21 	call	0x4342	; 0x4342 <esc_set_width>
			
			esc_start_next();
    3580:	0e 94 dd 21 	call	0x43ba	; 0x43ba <esc_start_next>
    3584:	e0 cf       	rjmp	.-64     	; 0x3546 <test_esc+0x1a>

00003586 <test_ppm>:
	}
}

// report PPM readings to serial port
void test_ppm()
{
    3586:	2f 92       	push	r2
    3588:	3f 92       	push	r3
    358a:	4f 92       	push	r4
    358c:	5f 92       	push	r5
    358e:	6f 92       	push	r6
    3590:	7f 92       	push	r7
    3592:	8f 92       	push	r8
    3594:	9f 92       	push	r9
    3596:	af 92       	push	r10
    3598:	bf 92       	push	r11
    359a:	cf 92       	push	r12
    359c:	df 92       	push	r13
    359e:	ef 92       	push	r14
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
	user_io_init();
    35aa:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	ser1_init(129, 128, 128);
    35ae:	81 e8       	ldi	r24, 0x81	; 129
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	60 e8       	ldi	r22, 0x80	; 128
    35b4:	40 e8       	ldi	r20, 0x80	; 128
    35b6:	0e 94 68 32 	call	0x64d0	; 0x64d0 <ser1_init>
	
	ppm_init();
    35ba:	0e 94 02 36 	call	0x6c04	; 0x6c04 <ppm_init>
	
	sei();
    35be:	78 94       	sei
	
	ppm_calibrate(10);
    35c0:	8a e0       	ldi	r24, 0x0A	; 10
    35c2:	0e 94 cb 33 	call	0x6796	; 0x6796 <ppm_calibrate>
	
	fprintf_P(&ostream_0, PSTR("\r\ntest_ppm\r\n"));
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <test_ppm+0x42>
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <test_ppm+0x44>
    35ca:	0c e1       	ldi	r16, 0x1C	; 28
    35cc:	12 e0       	ldi	r17, 0x02	; 2
    35ce:	ad b7       	in	r26, 0x3d	; 61
    35d0:	be b7       	in	r27, 0x3e	; 62
    35d2:	12 96       	adiw	r26, 0x02	; 2
    35d4:	1c 93       	st	X, r17
    35d6:	0e 93       	st	-X, r16
    35d8:	11 97       	sbiw	r26, 0x01	; 1
    35da:	87 e3       	ldi	r24, 0x37	; 55
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	14 96       	adiw	r26, 0x04	; 4
    35e0:	9c 93       	st	X, r25
    35e2:	8e 93       	st	-X, r24
    35e4:	13 97       	sbiw	r26, 0x03	; 3
    35e6:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	7a e2       	ldi	r23, 0x2A	; 42
    35f4:	c7 2e       	mov	r12, r23
    35f6:	71 e0       	ldi	r23, 0x01	; 1
    35f8:	d7 2e       	mov	r13, r23
    35fa:	6d e1       	ldi	r22, 0x1D	; 29
    35fc:	e6 2e       	mov	r14, r22
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	f6 2e       	mov	r15, r22
			else
			{
				// report channel values
				for (uint8_t i = 0; i < 6; i++)
				{
					fprintf_P(&ostream_0, PSTR("ppm %d: %d\r\n"), i, ppm_chan_read(i));
    3602:	51 e0       	ldi	r21, 0x01	; 1
    3604:	a5 2e       	mov	r10, r21
    3606:	b1 2c       	mov	r11, r1
    3608:	42 e0       	ldi	r20, 0x02	; 2
    360a:	84 2e       	mov	r8, r20
    360c:	91 2c       	mov	r9, r1
    360e:	33 e0       	ldi	r19, 0x03	; 3
    3610:	63 2e       	mov	r6, r19
    3612:	71 2c       	mov	r7, r1
    3614:	24 e0       	ldi	r18, 0x04	; 4
    3616:	42 2e       	mov	r4, r18
    3618:	51 2c       	mov	r5, r1
    361a:	95 e0       	ldi	r25, 0x05	; 5
    361c:	29 2e       	mov	r2, r25
    361e:	31 2c       	mov	r3, r1
    3620:	c4 ef       	ldi	r28, 0xF4	; 244
    3622:	d1 e0       	ldi	r29, 0x01	; 1
    3624:	07 c0       	rjmp	.+14     	; 0x3634 <test_ppm+0xae>
	while (1)
	{
		// indicate TX status using LEDs
		if (ppm_tx_is_good(0xFF))
		{
			LED2_on();
    3626:	47 98       	cbi	0x08, 7	; 8
			LED1_off();
    3628:	46 9a       	sbi	0x08, 6	; 8
		{
			LED1_on();
			LED2_off();
		}
		
		if (ppm_is_new_data(0xFF))
    362a:	8f ef       	ldi	r24, 0xFF	; 255
    362c:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    3630:	88 23       	and	r24, r24
    3632:	61 f4       	brne	.+24     	; 0x364c <test_ppm+0xc6>
	fprintf_P(&ostream_0, PSTR("\r\ntest_ppm\r\n"));
	
	while (1)
	{
		// indicate TX status using LEDs
		if (ppm_tx_is_good(0xFF))
    3634:	8f ef       	ldi	r24, 0xFF	; 255
    3636:	0e 94 96 33 	call	0x672c	; 0x672c <ppm_tx_is_good>
    363a:	88 23       	and	r24, r24
    363c:	a1 f7       	brne	.-24     	; 0x3626 <test_ppm+0xa0>
			LED2_on();
			LED1_off();
		}
		else
		{
			LED1_on();
    363e:	46 98       	cbi	0x08, 6	; 8
			LED2_off();
    3640:	47 9a       	sbi	0x08, 7	; 8
		}
		
		if (ppm_is_new_data(0xFF))
    3642:	8f ef       	ldi	r24, 0xFF	; 255
    3644:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    3648:	88 23       	and	r24, r24
    364a:	a1 f3       	breq	.-24     	; 0x3634 <test_ppm+0xae>
		{			
			if (button_is_pressed())
    364c:	1c 99       	sbic	0x03, 4	; 3
    364e:	e5 c0       	rjmp	.+458    	; 0x381a <test_ppm+0x294>
			{
				// report center values
				for (uint8_t i = 0; i < 6; i++)
				{
					fprintf_P(&ostream_0, PSTR("cal %d: %d\r\n"), i, ppm_center(i));
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3656:	ed b7       	in	r30, 0x3d	; 61
    3658:	fe b7       	in	r31, 0x3e	; 62
    365a:	38 97       	sbiw	r30, 0x08	; 8
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	fe bf       	out	0x3e, r31	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	ed bf       	out	0x3d, r30	; 61
    3666:	31 96       	adiw	r30, 0x01	; 1
    3668:	ad b7       	in	r26, 0x3d	; 61
    366a:	be b7       	in	r27, 0x3e	; 62
    366c:	12 96       	adiw	r26, 0x02	; 2
    366e:	1c 93       	st	X, r17
    3670:	0e 93       	st	-X, r16
    3672:	11 97       	sbiw	r26, 0x01	; 1
    3674:	d3 82       	std	Z+3, r13	; 0x03
    3676:	c2 82       	std	Z+2, r12	; 0x02
    3678:	15 82       	std	Z+5, r1	; 0x05
    367a:	14 82       	std	Z+4, r1	; 0x04
    367c:	97 83       	std	Z+7, r25	; 0x07
    367e:	86 83       	std	Z+6, r24	; 0x06
    3680:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3684:	ed b7       	in	r30, 0x3d	; 61
    3686:	fe b7       	in	r31, 0x3e	; 62
    3688:	38 96       	adiw	r30, 0x08	; 8
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	fe bf       	out	0x3e, r31	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	ed bf       	out	0x3d, r30	; 61
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    369a:	2d b7       	in	r18, 0x3d	; 61
    369c:	3e b7       	in	r19, 0x3e	; 62
    369e:	28 50       	subi	r18, 0x08	; 8
    36a0:	30 40       	sbci	r19, 0x00	; 0
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	3e bf       	out	0x3e, r19	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	2d bf       	out	0x3d, r18	; 61
    36ac:	ed b7       	in	r30, 0x3d	; 61
    36ae:	fe b7       	in	r31, 0x3e	; 62
    36b0:	31 96       	adiw	r30, 0x01	; 1
    36b2:	ad b7       	in	r26, 0x3d	; 61
    36b4:	be b7       	in	r27, 0x3e	; 62
    36b6:	12 96       	adiw	r26, 0x02	; 2
    36b8:	1c 93       	st	X, r17
    36ba:	0e 93       	st	-X, r16
    36bc:	11 97       	sbiw	r26, 0x01	; 1
    36be:	d3 82       	std	Z+3, r13	; 0x03
    36c0:	c2 82       	std	Z+2, r12	; 0x02
    36c2:	b5 82       	std	Z+5, r11	; 0x05
    36c4:	a4 82       	std	Z+4, r10	; 0x04
    36c6:	97 83       	std	Z+7, r25	; 0x07
    36c8:	86 83       	std	Z+6, r24	; 0x06
    36ca:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    36ce:	ed b7       	in	r30, 0x3d	; 61
    36d0:	fe b7       	in	r31, 0x3e	; 62
    36d2:	38 96       	adiw	r30, 0x08	; 8
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	fe bf       	out	0x3e, r31	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	ed bf       	out	0x3d, r30	; 61
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    36e4:	2d b7       	in	r18, 0x3d	; 61
    36e6:	3e b7       	in	r19, 0x3e	; 62
    36e8:	28 50       	subi	r18, 0x08	; 8
    36ea:	30 40       	sbci	r19, 0x00	; 0
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	3e bf       	out	0x3e, r19	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	2d bf       	out	0x3d, r18	; 61
    36f6:	ed b7       	in	r30, 0x3d	; 61
    36f8:	fe b7       	in	r31, 0x3e	; 62
    36fa:	31 96       	adiw	r30, 0x01	; 1
    36fc:	ad b7       	in	r26, 0x3d	; 61
    36fe:	be b7       	in	r27, 0x3e	; 62
    3700:	12 96       	adiw	r26, 0x02	; 2
    3702:	1c 93       	st	X, r17
    3704:	0e 93       	st	-X, r16
    3706:	11 97       	sbiw	r26, 0x01	; 1
    3708:	d3 82       	std	Z+3, r13	; 0x03
    370a:	c2 82       	std	Z+2, r12	; 0x02
    370c:	95 82       	std	Z+5, r9	; 0x05
    370e:	84 82       	std	Z+4, r8	; 0x04
    3710:	97 83       	std	Z+7, r25	; 0x07
    3712:	86 83       	std	Z+6, r24	; 0x06
    3714:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3718:	ed b7       	in	r30, 0x3d	; 61
    371a:	fe b7       	in	r31, 0x3e	; 62
    371c:	38 96       	adiw	r30, 0x08	; 8
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	fe bf       	out	0x3e, r31	; 62
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	ed bf       	out	0x3d, r30	; 61
    3728:	83 e0       	ldi	r24, 0x03	; 3
    372a:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    372e:	2d b7       	in	r18, 0x3d	; 61
    3730:	3e b7       	in	r19, 0x3e	; 62
    3732:	28 50       	subi	r18, 0x08	; 8
    3734:	30 40       	sbci	r19, 0x00	; 0
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	3e bf       	out	0x3e, r19	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	2d bf       	out	0x3d, r18	; 61
    3740:	ed b7       	in	r30, 0x3d	; 61
    3742:	fe b7       	in	r31, 0x3e	; 62
    3744:	31 96       	adiw	r30, 0x01	; 1
    3746:	ad b7       	in	r26, 0x3d	; 61
    3748:	be b7       	in	r27, 0x3e	; 62
    374a:	12 96       	adiw	r26, 0x02	; 2
    374c:	1c 93       	st	X, r17
    374e:	0e 93       	st	-X, r16
    3750:	11 97       	sbiw	r26, 0x01	; 1
    3752:	d3 82       	std	Z+3, r13	; 0x03
    3754:	c2 82       	std	Z+2, r12	; 0x02
    3756:	75 82       	std	Z+5, r7	; 0x05
    3758:	64 82       	std	Z+4, r6	; 0x04
    375a:	97 83       	std	Z+7, r25	; 0x07
    375c:	86 83       	std	Z+6, r24	; 0x06
    375e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3762:	ed b7       	in	r30, 0x3d	; 61
    3764:	fe b7       	in	r31, 0x3e	; 62
    3766:	38 96       	adiw	r30, 0x08	; 8
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	fe bf       	out	0x3e, r31	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	ed bf       	out	0x3d, r30	; 61
    3772:	84 e0       	ldi	r24, 0x04	; 4
    3774:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    3778:	2d b7       	in	r18, 0x3d	; 61
    377a:	3e b7       	in	r19, 0x3e	; 62
    377c:	28 50       	subi	r18, 0x08	; 8
    377e:	30 40       	sbci	r19, 0x00	; 0
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	3e bf       	out	0x3e, r19	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	2d bf       	out	0x3d, r18	; 61
    378a:	ed b7       	in	r30, 0x3d	; 61
    378c:	fe b7       	in	r31, 0x3e	; 62
    378e:	31 96       	adiw	r30, 0x01	; 1
    3790:	ad b7       	in	r26, 0x3d	; 61
    3792:	be b7       	in	r27, 0x3e	; 62
    3794:	12 96       	adiw	r26, 0x02	; 2
    3796:	1c 93       	st	X, r17
    3798:	0e 93       	st	-X, r16
    379a:	11 97       	sbiw	r26, 0x01	; 1
    379c:	d3 82       	std	Z+3, r13	; 0x03
    379e:	c2 82       	std	Z+2, r12	; 0x02
    37a0:	55 82       	std	Z+5, r5	; 0x05
    37a2:	44 82       	std	Z+4, r4	; 0x04
    37a4:	97 83       	std	Z+7, r25	; 0x07
    37a6:	86 83       	std	Z+6, r24	; 0x06
    37a8:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    37ac:	ed b7       	in	r30, 0x3d	; 61
    37ae:	fe b7       	in	r31, 0x3e	; 62
    37b0:	38 96       	adiw	r30, 0x08	; 8
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	fe bf       	out	0x3e, r31	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	ed bf       	out	0x3d, r30	; 61
    37bc:	85 e0       	ldi	r24, 0x05	; 5
    37be:	0e 94 c1 33 	call	0x6782	; 0x6782 <ppm_center>
    37c2:	2d b7       	in	r18, 0x3d	; 61
    37c4:	3e b7       	in	r19, 0x3e	; 62
    37c6:	28 50       	subi	r18, 0x08	; 8
    37c8:	30 40       	sbci	r19, 0x00	; 0
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	3e bf       	out	0x3e, r19	; 62
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	2d bf       	out	0x3d, r18	; 61
    37d4:	ed b7       	in	r30, 0x3d	; 61
    37d6:	fe b7       	in	r31, 0x3e	; 62
    37d8:	31 96       	adiw	r30, 0x01	; 1
    37da:	ad b7       	in	r26, 0x3d	; 61
    37dc:	be b7       	in	r27, 0x3e	; 62
    37de:	12 96       	adiw	r26, 0x02	; 2
    37e0:	1c 93       	st	X, r17
    37e2:	0e 93       	st	-X, r16
    37e4:	11 97       	sbiw	r26, 0x01	; 1
    37e6:	d3 82       	std	Z+3, r13	; 0x03
    37e8:	c2 82       	std	Z+2, r12	; 0x02
    37ea:	35 82       	std	Z+5, r3	; 0x05
    37ec:	24 82       	std	Z+4, r2	; 0x04
    37ee:	97 83       	std	Z+7, r25	; 0x07
    37f0:	86 83       	std	Z+6, r24	; 0x06
    37f2:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    37f6:	ed b7       	in	r30, 0x3d	; 61
    37f8:	fe b7       	in	r31, 0x3e	; 62
    37fa:	38 96       	adiw	r30, 0x08	; 8
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	fe bf       	out	0x3e, r31	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	ed bf       	out	0x3d, r30	; 61
				}
				
				while (button_is_pressed());
    3806:	1c 9b       	sbis	0x03, 4	; 3
    3808:	fe cf       	rjmp	.-4      	; 0x3806 <test_ppm+0x280>
				}
				
				_delay_ms(100);
			}
			
			while (ser_tx_is_busy(0)); // wait for data to be sent
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	0e 94 00 31 	call	0x6200	; 0x6200 <ser_tx_is_busy>
    3810:	88 23       	and	r24, r24
    3812:	d9 f7       	brne	.-10     	; 0x380a <test_ppm+0x284>
			
			ppm_is_new_data(0);
    3814:	0e 94 8e 33 	call	0x671c	; 0x671c <ppm_is_new_data>
    3818:	0d cf       	rjmp	.-486    	; 0x3634 <test_ppm+0xae>
			else
			{
				// report channel values
				for (uint8_t i = 0; i < 6; i++)
				{
					fprintf_P(&ostream_0, PSTR("ppm %d: %d\r\n"), i, ppm_chan_read(i));
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    3820:	2d b7       	in	r18, 0x3d	; 61
    3822:	3e b7       	in	r19, 0x3e	; 62
    3824:	28 50       	subi	r18, 0x08	; 8
    3826:	30 40       	sbci	r19, 0x00	; 0
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	3e bf       	out	0x3e, r19	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	2d bf       	out	0x3d, r18	; 61
    3832:	ed b7       	in	r30, 0x3d	; 61
    3834:	fe b7       	in	r31, 0x3e	; 62
    3836:	31 96       	adiw	r30, 0x01	; 1
    3838:	ad b7       	in	r26, 0x3d	; 61
    383a:	be b7       	in	r27, 0x3e	; 62
    383c:	12 96       	adiw	r26, 0x02	; 2
    383e:	1c 93       	st	X, r17
    3840:	0e 93       	st	-X, r16
    3842:	11 97       	sbiw	r26, 0x01	; 1
    3844:	f3 82       	std	Z+3, r15	; 0x03
    3846:	e2 82       	std	Z+2, r14	; 0x02
    3848:	15 82       	std	Z+5, r1	; 0x05
    384a:	14 82       	std	Z+4, r1	; 0x04
    384c:	97 83       	std	Z+7, r25	; 0x07
    384e:	86 83       	std	Z+6, r24	; 0x06
    3850:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3854:	ed b7       	in	r30, 0x3d	; 61
    3856:	fe b7       	in	r31, 0x3e	; 62
    3858:	38 96       	adiw	r30, 0x08	; 8
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	fe bf       	out	0x3e, r31	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	ed bf       	out	0x3d, r30	; 61
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    386a:	2d b7       	in	r18, 0x3d	; 61
    386c:	3e b7       	in	r19, 0x3e	; 62
    386e:	28 50       	subi	r18, 0x08	; 8
    3870:	30 40       	sbci	r19, 0x00	; 0
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	3e bf       	out	0x3e, r19	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	2d bf       	out	0x3d, r18	; 61
    387c:	ed b7       	in	r30, 0x3d	; 61
    387e:	fe b7       	in	r31, 0x3e	; 62
    3880:	31 96       	adiw	r30, 0x01	; 1
    3882:	ad b7       	in	r26, 0x3d	; 61
    3884:	be b7       	in	r27, 0x3e	; 62
    3886:	12 96       	adiw	r26, 0x02	; 2
    3888:	1c 93       	st	X, r17
    388a:	0e 93       	st	-X, r16
    388c:	11 97       	sbiw	r26, 0x01	; 1
    388e:	f3 82       	std	Z+3, r15	; 0x03
    3890:	e2 82       	std	Z+2, r14	; 0x02
    3892:	b5 82       	std	Z+5, r11	; 0x05
    3894:	a4 82       	std	Z+4, r10	; 0x04
    3896:	97 83       	std	Z+7, r25	; 0x07
    3898:	86 83       	std	Z+6, r24	; 0x06
    389a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    389e:	ed b7       	in	r30, 0x3d	; 61
    38a0:	fe b7       	in	r31, 0x3e	; 62
    38a2:	38 96       	adiw	r30, 0x08	; 8
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	fe bf       	out	0x3e, r31	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	ed bf       	out	0x3d, r30	; 61
    38ae:	82 e0       	ldi	r24, 0x02	; 2
    38b0:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    38b4:	2d b7       	in	r18, 0x3d	; 61
    38b6:	3e b7       	in	r19, 0x3e	; 62
    38b8:	28 50       	subi	r18, 0x08	; 8
    38ba:	30 40       	sbci	r19, 0x00	; 0
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	3e bf       	out	0x3e, r19	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	2d bf       	out	0x3d, r18	; 61
    38c6:	ed b7       	in	r30, 0x3d	; 61
    38c8:	fe b7       	in	r31, 0x3e	; 62
    38ca:	31 96       	adiw	r30, 0x01	; 1
    38cc:	ad b7       	in	r26, 0x3d	; 61
    38ce:	be b7       	in	r27, 0x3e	; 62
    38d0:	12 96       	adiw	r26, 0x02	; 2
    38d2:	1c 93       	st	X, r17
    38d4:	0e 93       	st	-X, r16
    38d6:	11 97       	sbiw	r26, 0x01	; 1
    38d8:	f3 82       	std	Z+3, r15	; 0x03
    38da:	e2 82       	std	Z+2, r14	; 0x02
    38dc:	95 82       	std	Z+5, r9	; 0x05
    38de:	84 82       	std	Z+4, r8	; 0x04
    38e0:	97 83       	std	Z+7, r25	; 0x07
    38e2:	86 83       	std	Z+6, r24	; 0x06
    38e4:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    38e8:	ed b7       	in	r30, 0x3d	; 61
    38ea:	fe b7       	in	r31, 0x3e	; 62
    38ec:	38 96       	adiw	r30, 0x08	; 8
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	fe bf       	out	0x3e, r31	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	ed bf       	out	0x3d, r30	; 61
    38f8:	83 e0       	ldi	r24, 0x03	; 3
    38fa:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    38fe:	2d b7       	in	r18, 0x3d	; 61
    3900:	3e b7       	in	r19, 0x3e	; 62
    3902:	28 50       	subi	r18, 0x08	; 8
    3904:	30 40       	sbci	r19, 0x00	; 0
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	3e bf       	out	0x3e, r19	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	2d bf       	out	0x3d, r18	; 61
    3910:	ed b7       	in	r30, 0x3d	; 61
    3912:	fe b7       	in	r31, 0x3e	; 62
    3914:	31 96       	adiw	r30, 0x01	; 1
    3916:	ad b7       	in	r26, 0x3d	; 61
    3918:	be b7       	in	r27, 0x3e	; 62
    391a:	12 96       	adiw	r26, 0x02	; 2
    391c:	1c 93       	st	X, r17
    391e:	0e 93       	st	-X, r16
    3920:	11 97       	sbiw	r26, 0x01	; 1
    3922:	f3 82       	std	Z+3, r15	; 0x03
    3924:	e2 82       	std	Z+2, r14	; 0x02
    3926:	75 82       	std	Z+5, r7	; 0x05
    3928:	64 82       	std	Z+4, r6	; 0x04
    392a:	97 83       	std	Z+7, r25	; 0x07
    392c:	86 83       	std	Z+6, r24	; 0x06
    392e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3932:	ed b7       	in	r30, 0x3d	; 61
    3934:	fe b7       	in	r31, 0x3e	; 62
    3936:	38 96       	adiw	r30, 0x08	; 8
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	fe bf       	out	0x3e, r31	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	ed bf       	out	0x3d, r30	; 61
    3942:	84 e0       	ldi	r24, 0x04	; 4
    3944:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    3948:	2d b7       	in	r18, 0x3d	; 61
    394a:	3e b7       	in	r19, 0x3e	; 62
    394c:	28 50       	subi	r18, 0x08	; 8
    394e:	30 40       	sbci	r19, 0x00	; 0
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	3e bf       	out	0x3e, r19	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	2d bf       	out	0x3d, r18	; 61
    395a:	ed b7       	in	r30, 0x3d	; 61
    395c:	fe b7       	in	r31, 0x3e	; 62
    395e:	31 96       	adiw	r30, 0x01	; 1
    3960:	ad b7       	in	r26, 0x3d	; 61
    3962:	be b7       	in	r27, 0x3e	; 62
    3964:	12 96       	adiw	r26, 0x02	; 2
    3966:	1c 93       	st	X, r17
    3968:	0e 93       	st	-X, r16
    396a:	11 97       	sbiw	r26, 0x01	; 1
    396c:	f3 82       	std	Z+3, r15	; 0x03
    396e:	e2 82       	std	Z+2, r14	; 0x02
    3970:	55 82       	std	Z+5, r5	; 0x05
    3972:	44 82       	std	Z+4, r4	; 0x04
    3974:	97 83       	std	Z+7, r25	; 0x07
    3976:	86 83       	std	Z+6, r24	; 0x06
    3978:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    397c:	ed b7       	in	r30, 0x3d	; 61
    397e:	fe b7       	in	r31, 0x3e	; 62
    3980:	38 96       	adiw	r30, 0x08	; 8
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	fe bf       	out	0x3e, r31	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	ed bf       	out	0x3d, r30	; 61
    398c:	85 e0       	ldi	r24, 0x05	; 5
    398e:	0e 94 a1 33 	call	0x6742	; 0x6742 <ppm_chan_read>
    3992:	2d b7       	in	r18, 0x3d	; 61
    3994:	3e b7       	in	r19, 0x3e	; 62
    3996:	28 50       	subi	r18, 0x08	; 8
    3998:	30 40       	sbci	r19, 0x00	; 0
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	3e bf       	out	0x3e, r19	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	2d bf       	out	0x3d, r18	; 61
    39a4:	ed b7       	in	r30, 0x3d	; 61
    39a6:	fe b7       	in	r31, 0x3e	; 62
    39a8:	31 96       	adiw	r30, 0x01	; 1
    39aa:	ad b7       	in	r26, 0x3d	; 61
    39ac:	be b7       	in	r27, 0x3e	; 62
    39ae:	12 96       	adiw	r26, 0x02	; 2
    39b0:	1c 93       	st	X, r17
    39b2:	0e 93       	st	-X, r16
    39b4:	11 97       	sbiw	r26, 0x01	; 1
    39b6:	f3 82       	std	Z+3, r15	; 0x03
    39b8:	e2 82       	std	Z+2, r14	; 0x02
    39ba:	35 82       	std	Z+5, r3	; 0x05
    39bc:	24 82       	std	Z+4, r2	; 0x04
    39be:	97 83       	std	Z+7, r25	; 0x07
    39c0:	86 83       	std	Z+6, r24	; 0x06
    39c2:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	ed b7       	in	r30, 0x3d	; 61
    39cc:	fe b7       	in	r31, 0x3e	; 62
    39ce:	38 96       	adiw	r30, 0x08	; 8
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	fe bf       	out	0x3e, r31	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	ed bf       	out	0x3d, r30	; 61
    39da:	ce 01       	movw	r24, r28
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <test_ppm+0x456>
    39e0:	2f 5f       	subi	r18, 0xFF	; 255
    39e2:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e4:	f3 e0       	ldi	r31, 0x03	; 3
    39e6:	28 3e       	cpi	r18, 0xE8	; 232
    39e8:	3f 07       	cpc	r19, r31
    39ea:	b9 f7       	brne	.-18     	; 0x39da <test_ppm+0x454>
				}
				
				_delay_ms(100);
			}
			
			while (ser_tx_is_busy(0)); // wait for data to be sent
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	0e 94 00 31 	call	0x6200	; 0x6200 <ser_tx_is_busy>
    39f2:	88 23       	and	r24, r24
    39f4:	09 f0       	breq	.+2      	; 0x39f8 <test_ppm+0x472>
    39f6:	09 cf       	rjmp	.-494    	; 0x380a <test_ppm+0x284>
    39f8:	0d cf       	rjmp	.-486    	; 0x3814 <test_ppm+0x28e>

000039fa <test_sensors>:
	}
}

// report ADC readings to serial port
void test_sensors()
{
    39fa:	2f 92       	push	r2
    39fc:	3f 92       	push	r3
    39fe:	4f 92       	push	r4
    3a00:	5f 92       	push	r5
    3a02:	6f 92       	push	r6
    3a04:	7f 92       	push	r7
    3a06:	8f 92       	push	r8
    3a08:	9f 92       	push	r9
    3a0a:	af 92       	push	r10
    3a0c:	bf 92       	push	r11
    3a0e:	cf 92       	push	r12
    3a10:	df 92       	push	r13
    3a12:	ef 92       	push	r14
    3a14:	ff 92       	push	r15
    3a16:	0f 93       	push	r16
    3a18:	1f 93       	push	r17
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
	user_io_init();
    3a1e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	ser1_init(129, 128, 128);
    3a22:	81 e8       	ldi	r24, 0x81	; 129
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	60 e8       	ldi	r22, 0x80	; 128
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	0e 94 68 32 	call	0x64d0	; 0x64d0 <ser1_init>
	
	sens_init();
    3a2e:	0e 94 47 23 	call	0x468e	; 0x468e <sens_init>
	
	sei();
    3a32:	78 94       	sei
	
	sens_calibrate(10);
    3a34:	8a e0       	ldi	r24, 0x0A	; 10
    3a36:	0e 94 c3 23 	call	0x4786	; 0x4786 <sens_calibrate>
	
	fprintf_P(&ostream_1, PSTR("\r\ntest_sensors\r\n"));
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <test_sensors+0x42>
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <test_sensors+0x44>
    3a3e:	0a e2       	ldi	r16, 0x2A	; 42
    3a40:	12 e0       	ldi	r17, 0x02	; 2
    3a42:	ad b7       	in	r26, 0x3d	; 61
    3a44:	be b7       	in	r27, 0x3e	; 62
    3a46:	12 96       	adiw	r26, 0x02	; 2
    3a48:	1c 93       	st	X, r17
    3a4a:	0e 93       	st	-X, r16
    3a4c:	11 97       	sbiw	r26, 0x01	; 1
    3a4e:	8e e5       	ldi	r24, 0x5E	; 94
    3a50:	91 e0       	ldi	r25, 0x01	; 1
    3a52:	14 96       	adiw	r26, 0x04	; 4
    3a54:	9c 93       	st	X, r25
    3a56:	8e 93       	st	-X, r24
    3a58:	13 97       	sbiw	r26, 0x03	; 3
    3a5a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	21 e5       	ldi	r18, 0x51	; 81
    3a68:	e2 2e       	mov	r14, r18
    3a6a:	21 e0       	ldi	r18, 0x01	; 1
    3a6c:	f2 2e       	mov	r15, r18
    3a6e:	94 e4       	ldi	r25, 0x44	; 68
    3a70:	c9 2e       	mov	r12, r25
    3a72:	91 e0       	ldi	r25, 0x01	; 1
    3a74:	d9 2e       	mov	r13, r25
			else
			{
				// report ADC channel readings
				for (uint8_t i = 0; i < 8; i++)
				{
					fprintf_P(&ostream_1, PSTR("adc %d: %d\r\n"), i, sens_read(i));
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	a8 2e       	mov	r10, r24
    3a7a:	b1 2c       	mov	r11, r1
    3a7c:	b2 e0       	ldi	r27, 0x02	; 2
    3a7e:	8b 2e       	mov	r8, r27
    3a80:	91 2c       	mov	r9, r1
    3a82:	a3 e0       	ldi	r26, 0x03	; 3
    3a84:	6a 2e       	mov	r6, r26
    3a86:	71 2c       	mov	r7, r1
    3a88:	f4 e0       	ldi	r31, 0x04	; 4
    3a8a:	4f 2e       	mov	r4, r31
    3a8c:	51 2c       	mov	r5, r1
    3a8e:	e5 e0       	ldi	r30, 0x05	; 5
    3a90:	2e 2e       	mov	r2, r30
    3a92:	31 2c       	mov	r3, r1
    3a94:	c4 ef       	ldi	r28, 0xF4	; 244
    3a96:	d1 e0       	ldi	r29, 0x01	; 1
	
	fprintf_P(&ostream_1, PSTR("\r\ntest_sensors\r\n"));
	
	while (1)
	{
		if (adc_rounds_cnt(0xFF))
    3a98:	8f ef       	ldi	r24, 0xFF	; 255
    3a9a:	0e 94 9a 2a 	call	0x5534	; 0x5534 <adc_rounds_cnt>
    3a9e:	88 23       	and	r24, r24
    3aa0:	d9 f3       	breq	.-10     	; 0x3a98 <test_sensors+0x9e>
		{			
			if (button_is_pressed())
    3aa2:	1c 99       	sbic	0x03, 4	; 3
    3aa4:	40 c1       	rjmp	.+640    	; 0x3d26 <test_sensors+0x32c>
			{
				// report center values
				for (uint8_t i = 0; i < 8; i++)
				{
					fprintf_P(&ostream_1, PSTR("cal %d: %d\r\n"), i, sens_offset(i));
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3aac:	ed b7       	in	r30, 0x3d	; 61
    3aae:	fe b7       	in	r31, 0x3e	; 62
    3ab0:	3a 97       	sbiw	r30, 0x0a	; 10
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	fe bf       	out	0x3e, r31	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	ed bf       	out	0x3d, r30	; 61
    3abc:	31 96       	adiw	r30, 0x01	; 1
    3abe:	ad b7       	in	r26, 0x3d	; 61
    3ac0:	be b7       	in	r27, 0x3e	; 62
    3ac2:	12 96       	adiw	r26, 0x02	; 2
    3ac4:	1c 93       	st	X, r17
    3ac6:	0e 93       	st	-X, r16
    3ac8:	11 97       	sbiw	r26, 0x01	; 1
    3aca:	f3 82       	std	Z+3, r15	; 0x03
    3acc:	e2 82       	std	Z+2, r14	; 0x02
    3ace:	15 82       	std	Z+5, r1	; 0x05
    3ad0:	14 82       	std	Z+4, r1	; 0x04
    3ad2:	66 83       	std	Z+6, r22	; 0x06
    3ad4:	77 83       	std	Z+7, r23	; 0x07
    3ad6:	80 87       	std	Z+8, r24	; 0x08
    3ad8:	91 87       	std	Z+9, r25	; 0x09
    3ada:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3ade:	ed b7       	in	r30, 0x3d	; 61
    3ae0:	fe b7       	in	r31, 0x3e	; 62
    3ae2:	3a 96       	adiw	r30, 0x0a	; 10
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	fe bf       	out	0x3e, r31	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	ed bf       	out	0x3d, r30	; 61
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3af4:	2d b7       	in	r18, 0x3d	; 61
    3af6:	3e b7       	in	r19, 0x3e	; 62
    3af8:	2a 50       	subi	r18, 0x0A	; 10
    3afa:	30 40       	sbci	r19, 0x00	; 0
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	3e bf       	out	0x3e, r19	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	2d bf       	out	0x3d, r18	; 61
    3b06:	ed b7       	in	r30, 0x3d	; 61
    3b08:	fe b7       	in	r31, 0x3e	; 62
    3b0a:	31 96       	adiw	r30, 0x01	; 1
    3b0c:	ad b7       	in	r26, 0x3d	; 61
    3b0e:	be b7       	in	r27, 0x3e	; 62
    3b10:	12 96       	adiw	r26, 0x02	; 2
    3b12:	1c 93       	st	X, r17
    3b14:	0e 93       	st	-X, r16
    3b16:	11 97       	sbiw	r26, 0x01	; 1
    3b18:	f3 82       	std	Z+3, r15	; 0x03
    3b1a:	e2 82       	std	Z+2, r14	; 0x02
    3b1c:	b5 82       	std	Z+5, r11	; 0x05
    3b1e:	a4 82       	std	Z+4, r10	; 0x04
    3b20:	66 83       	std	Z+6, r22	; 0x06
    3b22:	77 83       	std	Z+7, r23	; 0x07
    3b24:	80 87       	std	Z+8, r24	; 0x08
    3b26:	91 87       	std	Z+9, r25	; 0x09
    3b28:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3b2c:	ed b7       	in	r30, 0x3d	; 61
    3b2e:	fe b7       	in	r31, 0x3e	; 62
    3b30:	3a 96       	adiw	r30, 0x0a	; 10
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	fe bf       	out	0x3e, r31	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	ed bf       	out	0x3d, r30	; 61
    3b3c:	82 e0       	ldi	r24, 0x02	; 2
    3b3e:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3b42:	2d b7       	in	r18, 0x3d	; 61
    3b44:	3e b7       	in	r19, 0x3e	; 62
    3b46:	2a 50       	subi	r18, 0x0A	; 10
    3b48:	30 40       	sbci	r19, 0x00	; 0
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	3e bf       	out	0x3e, r19	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	2d bf       	out	0x3d, r18	; 61
    3b54:	ed b7       	in	r30, 0x3d	; 61
    3b56:	fe b7       	in	r31, 0x3e	; 62
    3b58:	31 96       	adiw	r30, 0x01	; 1
    3b5a:	ad b7       	in	r26, 0x3d	; 61
    3b5c:	be b7       	in	r27, 0x3e	; 62
    3b5e:	12 96       	adiw	r26, 0x02	; 2
    3b60:	1c 93       	st	X, r17
    3b62:	0e 93       	st	-X, r16
    3b64:	11 97       	sbiw	r26, 0x01	; 1
    3b66:	f3 82       	std	Z+3, r15	; 0x03
    3b68:	e2 82       	std	Z+2, r14	; 0x02
    3b6a:	95 82       	std	Z+5, r9	; 0x05
    3b6c:	84 82       	std	Z+4, r8	; 0x04
    3b6e:	66 83       	std	Z+6, r22	; 0x06
    3b70:	77 83       	std	Z+7, r23	; 0x07
    3b72:	80 87       	std	Z+8, r24	; 0x08
    3b74:	91 87       	std	Z+9, r25	; 0x09
    3b76:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3b7a:	ed b7       	in	r30, 0x3d	; 61
    3b7c:	fe b7       	in	r31, 0x3e	; 62
    3b7e:	3a 96       	adiw	r30, 0x0a	; 10
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	fe bf       	out	0x3e, r31	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	ed bf       	out	0x3d, r30	; 61
    3b8a:	83 e0       	ldi	r24, 0x03	; 3
    3b8c:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3b90:	2d b7       	in	r18, 0x3d	; 61
    3b92:	3e b7       	in	r19, 0x3e	; 62
    3b94:	2a 50       	subi	r18, 0x0A	; 10
    3b96:	30 40       	sbci	r19, 0x00	; 0
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	f8 94       	cli
    3b9c:	3e bf       	out	0x3e, r19	; 62
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	2d bf       	out	0x3d, r18	; 61
    3ba2:	ed b7       	in	r30, 0x3d	; 61
    3ba4:	fe b7       	in	r31, 0x3e	; 62
    3ba6:	31 96       	adiw	r30, 0x01	; 1
    3ba8:	ad b7       	in	r26, 0x3d	; 61
    3baa:	be b7       	in	r27, 0x3e	; 62
    3bac:	12 96       	adiw	r26, 0x02	; 2
    3bae:	1c 93       	st	X, r17
    3bb0:	0e 93       	st	-X, r16
    3bb2:	11 97       	sbiw	r26, 0x01	; 1
    3bb4:	f3 82       	std	Z+3, r15	; 0x03
    3bb6:	e2 82       	std	Z+2, r14	; 0x02
    3bb8:	75 82       	std	Z+5, r7	; 0x05
    3bba:	64 82       	std	Z+4, r6	; 0x04
    3bbc:	66 83       	std	Z+6, r22	; 0x06
    3bbe:	77 83       	std	Z+7, r23	; 0x07
    3bc0:	80 87       	std	Z+8, r24	; 0x08
    3bc2:	91 87       	std	Z+9, r25	; 0x09
    3bc4:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3bc8:	ed b7       	in	r30, 0x3d	; 61
    3bca:	fe b7       	in	r31, 0x3e	; 62
    3bcc:	3a 96       	adiw	r30, 0x0a	; 10
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	fe bf       	out	0x3e, r31	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	ed bf       	out	0x3d, r30	; 61
    3bd8:	84 e0       	ldi	r24, 0x04	; 4
    3bda:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3bde:	2d b7       	in	r18, 0x3d	; 61
    3be0:	3e b7       	in	r19, 0x3e	; 62
    3be2:	2a 50       	subi	r18, 0x0A	; 10
    3be4:	30 40       	sbci	r19, 0x00	; 0
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	3e bf       	out	0x3e, r19	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	2d bf       	out	0x3d, r18	; 61
    3bf0:	ed b7       	in	r30, 0x3d	; 61
    3bf2:	fe b7       	in	r31, 0x3e	; 62
    3bf4:	31 96       	adiw	r30, 0x01	; 1
    3bf6:	ad b7       	in	r26, 0x3d	; 61
    3bf8:	be b7       	in	r27, 0x3e	; 62
    3bfa:	12 96       	adiw	r26, 0x02	; 2
    3bfc:	1c 93       	st	X, r17
    3bfe:	0e 93       	st	-X, r16
    3c00:	11 97       	sbiw	r26, 0x01	; 1
    3c02:	f3 82       	std	Z+3, r15	; 0x03
    3c04:	e2 82       	std	Z+2, r14	; 0x02
    3c06:	55 82       	std	Z+5, r5	; 0x05
    3c08:	44 82       	std	Z+4, r4	; 0x04
    3c0a:	66 83       	std	Z+6, r22	; 0x06
    3c0c:	77 83       	std	Z+7, r23	; 0x07
    3c0e:	80 87       	std	Z+8, r24	; 0x08
    3c10:	91 87       	std	Z+9, r25	; 0x09
    3c12:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3c16:	ed b7       	in	r30, 0x3d	; 61
    3c18:	fe b7       	in	r31, 0x3e	; 62
    3c1a:	3a 96       	adiw	r30, 0x0a	; 10
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	fe bf       	out	0x3e, r31	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	ed bf       	out	0x3d, r30	; 61
    3c26:	85 e0       	ldi	r24, 0x05	; 5
    3c28:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3c2c:	2d b7       	in	r18, 0x3d	; 61
    3c2e:	3e b7       	in	r19, 0x3e	; 62
    3c30:	2a 50       	subi	r18, 0x0A	; 10
    3c32:	30 40       	sbci	r19, 0x00	; 0
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	3e bf       	out	0x3e, r19	; 62
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	2d bf       	out	0x3d, r18	; 61
    3c3e:	ed b7       	in	r30, 0x3d	; 61
    3c40:	fe b7       	in	r31, 0x3e	; 62
    3c42:	31 96       	adiw	r30, 0x01	; 1
    3c44:	ad b7       	in	r26, 0x3d	; 61
    3c46:	be b7       	in	r27, 0x3e	; 62
    3c48:	12 96       	adiw	r26, 0x02	; 2
    3c4a:	1c 93       	st	X, r17
    3c4c:	0e 93       	st	-X, r16
    3c4e:	11 97       	sbiw	r26, 0x01	; 1
    3c50:	f3 82       	std	Z+3, r15	; 0x03
    3c52:	e2 82       	std	Z+2, r14	; 0x02
    3c54:	35 82       	std	Z+5, r3	; 0x05
    3c56:	24 82       	std	Z+4, r2	; 0x04
    3c58:	66 83       	std	Z+6, r22	; 0x06
    3c5a:	77 83       	std	Z+7, r23	; 0x07
    3c5c:	80 87       	std	Z+8, r24	; 0x08
    3c5e:	91 87       	std	Z+9, r25	; 0x09
    3c60:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3c64:	ed b7       	in	r30, 0x3d	; 61
    3c66:	fe b7       	in	r31, 0x3e	; 62
    3c68:	3a 96       	adiw	r30, 0x0a	; 10
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	fe bf       	out	0x3e, r31	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	ed bf       	out	0x3d, r30	; 61
    3c74:	86 e0       	ldi	r24, 0x06	; 6
    3c76:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3c7a:	2d b7       	in	r18, 0x3d	; 61
    3c7c:	3e b7       	in	r19, 0x3e	; 62
    3c7e:	2a 50       	subi	r18, 0x0A	; 10
    3c80:	30 40       	sbci	r19, 0x00	; 0
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	3e bf       	out	0x3e, r19	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	2d bf       	out	0x3d, r18	; 61
    3c8c:	ed b7       	in	r30, 0x3d	; 61
    3c8e:	fe b7       	in	r31, 0x3e	; 62
    3c90:	31 96       	adiw	r30, 0x01	; 1
    3c92:	ad b7       	in	r26, 0x3d	; 61
    3c94:	be b7       	in	r27, 0x3e	; 62
    3c96:	12 96       	adiw	r26, 0x02	; 2
    3c98:	1c 93       	st	X, r17
    3c9a:	0e 93       	st	-X, r16
    3c9c:	11 97       	sbiw	r26, 0x01	; 1
    3c9e:	f3 82       	std	Z+3, r15	; 0x03
    3ca0:	e2 82       	std	Z+2, r14	; 0x02
    3ca2:	26 e0       	ldi	r18, 0x06	; 6
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	35 83       	std	Z+5, r19	; 0x05
    3ca8:	24 83       	std	Z+4, r18	; 0x04
    3caa:	66 83       	std	Z+6, r22	; 0x06
    3cac:	77 83       	std	Z+7, r23	; 0x07
    3cae:	80 87       	std	Z+8, r24	; 0x08
    3cb0:	91 87       	std	Z+9, r25	; 0x09
    3cb2:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3cb6:	8d b7       	in	r24, 0x3d	; 61
    3cb8:	9e b7       	in	r25, 0x3e	; 62
    3cba:	0a 96       	adiw	r24, 0x0a	; 10
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	9e bf       	out	0x3e, r25	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	8d bf       	out	0x3d, r24	; 61
    3cc6:	87 e0       	ldi	r24, 0x07	; 7
    3cc8:	0e 94 b4 23 	call	0x4768	; 0x4768 <sens_offset>
    3ccc:	ad b7       	in	r26, 0x3d	; 61
    3cce:	be b7       	in	r27, 0x3e	; 62
    3cd0:	1a 97       	sbiw	r26, 0x0a	; 10
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	be bf       	out	0x3e, r27	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	ad bf       	out	0x3d, r26	; 61
    3cdc:	ed b7       	in	r30, 0x3d	; 61
    3cde:	fe b7       	in	r31, 0x3e	; 62
    3ce0:	31 96       	adiw	r30, 0x01	; 1
    3ce2:	12 96       	adiw	r26, 0x02	; 2
    3ce4:	1c 93       	st	X, r17
    3ce6:	0e 93       	st	-X, r16
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	f3 82       	std	Z+3, r15	; 0x03
    3cec:	e2 82       	std	Z+2, r14	; 0x02
    3cee:	27 e0       	ldi	r18, 0x07	; 7
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	35 83       	std	Z+5, r19	; 0x05
    3cf4:	24 83       	std	Z+4, r18	; 0x04
    3cf6:	66 83       	std	Z+6, r22	; 0x06
    3cf8:	77 83       	std	Z+7, r23	; 0x07
    3cfa:	80 87       	std	Z+8, r24	; 0x08
    3cfc:	91 87       	std	Z+9, r25	; 0x09
    3cfe:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3d02:	8d b7       	in	r24, 0x3d	; 61
    3d04:	9e b7       	in	r25, 0x3e	; 62
    3d06:	0a 96       	adiw	r24, 0x0a	; 10
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	9e bf       	out	0x3e, r25	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	8d bf       	out	0x3d, r24	; 61
				}
				
				while (button_is_pressed());
    3d12:	1c 9b       	sbis	0x03, 4	; 3
    3d14:	fe cf       	rjmp	.-4      	; 0x3d12 <test_sensors+0x318>
				}
				
				_delay_ms(100);
			}
			
			while (ser_tx_is_busy(1)); // wait for data to be sent
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	0e 94 00 31 	call	0x6200	; 0x6200 <ser_tx_is_busy>
    3d1c:	88 23       	and	r24, r24
    3d1e:	d9 f7       	brne	.-10     	; 0x3d16 <test_sensors+0x31c>
			
			adc_rounds_cnt(0);
    3d20:	0e 94 9a 2a 	call	0x5534	; 0x5534 <adc_rounds_cnt>
    3d24:	b9 ce       	rjmp	.-654    	; 0x3a98 <test_sensors+0x9e>
			else
			{
				// report ADC channel readings
				for (uint8_t i = 0; i < 8; i++)
				{
					fprintf_P(&ostream_1, PSTR("adc %d: %d\r\n"), i, sens_read(i));
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3d2c:	ad b7       	in	r26, 0x3d	; 61
    3d2e:	be b7       	in	r27, 0x3e	; 62
    3d30:	1a 97       	sbiw	r26, 0x0a	; 10
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	be bf       	out	0x3e, r27	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	ad bf       	out	0x3d, r26	; 61
    3d3c:	ed b7       	in	r30, 0x3d	; 61
    3d3e:	fe b7       	in	r31, 0x3e	; 62
    3d40:	31 96       	adiw	r30, 0x01	; 1
    3d42:	12 96       	adiw	r26, 0x02	; 2
    3d44:	1c 93       	st	X, r17
    3d46:	0e 93       	st	-X, r16
    3d48:	11 97       	sbiw	r26, 0x01	; 1
    3d4a:	d3 82       	std	Z+3, r13	; 0x03
    3d4c:	c2 82       	std	Z+2, r12	; 0x02
    3d4e:	15 82       	std	Z+5, r1	; 0x05
    3d50:	14 82       	std	Z+4, r1	; 0x04
    3d52:	66 83       	std	Z+6, r22	; 0x06
    3d54:	77 83       	std	Z+7, r23	; 0x07
    3d56:	80 87       	std	Z+8, r24	; 0x08
    3d58:	91 87       	std	Z+9, r25	; 0x09
    3d5a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3d5e:	ed b7       	in	r30, 0x3d	; 61
    3d60:	fe b7       	in	r31, 0x3e	; 62
    3d62:	3a 96       	adiw	r30, 0x0a	; 10
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	fe bf       	out	0x3e, r31	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	ed bf       	out	0x3d, r30	; 61
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3d74:	2d b7       	in	r18, 0x3d	; 61
    3d76:	3e b7       	in	r19, 0x3e	; 62
    3d78:	2a 50       	subi	r18, 0x0A	; 10
    3d7a:	30 40       	sbci	r19, 0x00	; 0
    3d7c:	0f b6       	in	r0, 0x3f	; 63
    3d7e:	f8 94       	cli
    3d80:	3e bf       	out	0x3e, r19	; 62
    3d82:	0f be       	out	0x3f, r0	; 63
    3d84:	2d bf       	out	0x3d, r18	; 61
    3d86:	ed b7       	in	r30, 0x3d	; 61
    3d88:	fe b7       	in	r31, 0x3e	; 62
    3d8a:	31 96       	adiw	r30, 0x01	; 1
    3d8c:	ad b7       	in	r26, 0x3d	; 61
    3d8e:	be b7       	in	r27, 0x3e	; 62
    3d90:	12 96       	adiw	r26, 0x02	; 2
    3d92:	1c 93       	st	X, r17
    3d94:	0e 93       	st	-X, r16
    3d96:	11 97       	sbiw	r26, 0x01	; 1
    3d98:	d3 82       	std	Z+3, r13	; 0x03
    3d9a:	c2 82       	std	Z+2, r12	; 0x02
    3d9c:	b5 82       	std	Z+5, r11	; 0x05
    3d9e:	a4 82       	std	Z+4, r10	; 0x04
    3da0:	66 83       	std	Z+6, r22	; 0x06
    3da2:	77 83       	std	Z+7, r23	; 0x07
    3da4:	80 87       	std	Z+8, r24	; 0x08
    3da6:	91 87       	std	Z+9, r25	; 0x09
    3da8:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3dac:	ed b7       	in	r30, 0x3d	; 61
    3dae:	fe b7       	in	r31, 0x3e	; 62
    3db0:	3a 96       	adiw	r30, 0x0a	; 10
    3db2:	0f b6       	in	r0, 0x3f	; 63
    3db4:	f8 94       	cli
    3db6:	fe bf       	out	0x3e, r31	; 62
    3db8:	0f be       	out	0x3f, r0	; 63
    3dba:	ed bf       	out	0x3d, r30	; 61
    3dbc:	82 e0       	ldi	r24, 0x02	; 2
    3dbe:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3dc2:	2d b7       	in	r18, 0x3d	; 61
    3dc4:	3e b7       	in	r19, 0x3e	; 62
    3dc6:	2a 50       	subi	r18, 0x0A	; 10
    3dc8:	30 40       	sbci	r19, 0x00	; 0
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	3e bf       	out	0x3e, r19	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	2d bf       	out	0x3d, r18	; 61
    3dd4:	ed b7       	in	r30, 0x3d	; 61
    3dd6:	fe b7       	in	r31, 0x3e	; 62
    3dd8:	31 96       	adiw	r30, 0x01	; 1
    3dda:	ad b7       	in	r26, 0x3d	; 61
    3ddc:	be b7       	in	r27, 0x3e	; 62
    3dde:	12 96       	adiw	r26, 0x02	; 2
    3de0:	1c 93       	st	X, r17
    3de2:	0e 93       	st	-X, r16
    3de4:	11 97       	sbiw	r26, 0x01	; 1
    3de6:	d3 82       	std	Z+3, r13	; 0x03
    3de8:	c2 82       	std	Z+2, r12	; 0x02
    3dea:	95 82       	std	Z+5, r9	; 0x05
    3dec:	84 82       	std	Z+4, r8	; 0x04
    3dee:	66 83       	std	Z+6, r22	; 0x06
    3df0:	77 83       	std	Z+7, r23	; 0x07
    3df2:	80 87       	std	Z+8, r24	; 0x08
    3df4:	91 87       	std	Z+9, r25	; 0x09
    3df6:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3dfa:	ed b7       	in	r30, 0x3d	; 61
    3dfc:	fe b7       	in	r31, 0x3e	; 62
    3dfe:	3a 96       	adiw	r30, 0x0a	; 10
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	fe bf       	out	0x3e, r31	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	ed bf       	out	0x3d, r30	; 61
    3e0a:	83 e0       	ldi	r24, 0x03	; 3
    3e0c:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3e10:	2d b7       	in	r18, 0x3d	; 61
    3e12:	3e b7       	in	r19, 0x3e	; 62
    3e14:	2a 50       	subi	r18, 0x0A	; 10
    3e16:	30 40       	sbci	r19, 0x00	; 0
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	3e bf       	out	0x3e, r19	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	2d bf       	out	0x3d, r18	; 61
    3e22:	ed b7       	in	r30, 0x3d	; 61
    3e24:	fe b7       	in	r31, 0x3e	; 62
    3e26:	31 96       	adiw	r30, 0x01	; 1
    3e28:	ad b7       	in	r26, 0x3d	; 61
    3e2a:	be b7       	in	r27, 0x3e	; 62
    3e2c:	12 96       	adiw	r26, 0x02	; 2
    3e2e:	1c 93       	st	X, r17
    3e30:	0e 93       	st	-X, r16
    3e32:	11 97       	sbiw	r26, 0x01	; 1
    3e34:	d3 82       	std	Z+3, r13	; 0x03
    3e36:	c2 82       	std	Z+2, r12	; 0x02
    3e38:	75 82       	std	Z+5, r7	; 0x05
    3e3a:	64 82       	std	Z+4, r6	; 0x04
    3e3c:	66 83       	std	Z+6, r22	; 0x06
    3e3e:	77 83       	std	Z+7, r23	; 0x07
    3e40:	80 87       	std	Z+8, r24	; 0x08
    3e42:	91 87       	std	Z+9, r25	; 0x09
    3e44:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3e48:	ed b7       	in	r30, 0x3d	; 61
    3e4a:	fe b7       	in	r31, 0x3e	; 62
    3e4c:	3a 96       	adiw	r30, 0x0a	; 10
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	fe bf       	out	0x3e, r31	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	ed bf       	out	0x3d, r30	; 61
    3e58:	84 e0       	ldi	r24, 0x04	; 4
    3e5a:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3e5e:	2d b7       	in	r18, 0x3d	; 61
    3e60:	3e b7       	in	r19, 0x3e	; 62
    3e62:	2a 50       	subi	r18, 0x0A	; 10
    3e64:	30 40       	sbci	r19, 0x00	; 0
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	3e bf       	out	0x3e, r19	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	2d bf       	out	0x3d, r18	; 61
    3e70:	ed b7       	in	r30, 0x3d	; 61
    3e72:	fe b7       	in	r31, 0x3e	; 62
    3e74:	31 96       	adiw	r30, 0x01	; 1
    3e76:	ad b7       	in	r26, 0x3d	; 61
    3e78:	be b7       	in	r27, 0x3e	; 62
    3e7a:	12 96       	adiw	r26, 0x02	; 2
    3e7c:	1c 93       	st	X, r17
    3e7e:	0e 93       	st	-X, r16
    3e80:	11 97       	sbiw	r26, 0x01	; 1
    3e82:	d3 82       	std	Z+3, r13	; 0x03
    3e84:	c2 82       	std	Z+2, r12	; 0x02
    3e86:	55 82       	std	Z+5, r5	; 0x05
    3e88:	44 82       	std	Z+4, r4	; 0x04
    3e8a:	66 83       	std	Z+6, r22	; 0x06
    3e8c:	77 83       	std	Z+7, r23	; 0x07
    3e8e:	80 87       	std	Z+8, r24	; 0x08
    3e90:	91 87       	std	Z+9, r25	; 0x09
    3e92:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3e96:	ed b7       	in	r30, 0x3d	; 61
    3e98:	fe b7       	in	r31, 0x3e	; 62
    3e9a:	3a 96       	adiw	r30, 0x0a	; 10
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	fe bf       	out	0x3e, r31	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	ed bf       	out	0x3d, r30	; 61
    3ea6:	85 e0       	ldi	r24, 0x05	; 5
    3ea8:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3eac:	2d b7       	in	r18, 0x3d	; 61
    3eae:	3e b7       	in	r19, 0x3e	; 62
    3eb0:	2a 50       	subi	r18, 0x0A	; 10
    3eb2:	30 40       	sbci	r19, 0x00	; 0
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	3e bf       	out	0x3e, r19	; 62
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	2d bf       	out	0x3d, r18	; 61
    3ebe:	ed b7       	in	r30, 0x3d	; 61
    3ec0:	fe b7       	in	r31, 0x3e	; 62
    3ec2:	31 96       	adiw	r30, 0x01	; 1
    3ec4:	ad b7       	in	r26, 0x3d	; 61
    3ec6:	be b7       	in	r27, 0x3e	; 62
    3ec8:	12 96       	adiw	r26, 0x02	; 2
    3eca:	1c 93       	st	X, r17
    3ecc:	0e 93       	st	-X, r16
    3ece:	11 97       	sbiw	r26, 0x01	; 1
    3ed0:	d3 82       	std	Z+3, r13	; 0x03
    3ed2:	c2 82       	std	Z+2, r12	; 0x02
    3ed4:	35 82       	std	Z+5, r3	; 0x05
    3ed6:	24 82       	std	Z+4, r2	; 0x04
    3ed8:	66 83       	std	Z+6, r22	; 0x06
    3eda:	77 83       	std	Z+7, r23	; 0x07
    3edc:	80 87       	std	Z+8, r24	; 0x08
    3ede:	91 87       	std	Z+9, r25	; 0x09
    3ee0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3ee4:	ed b7       	in	r30, 0x3d	; 61
    3ee6:	fe b7       	in	r31, 0x3e	; 62
    3ee8:	3a 96       	adiw	r30, 0x0a	; 10
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	fe bf       	out	0x3e, r31	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	ed bf       	out	0x3d, r30	; 61
    3ef4:	86 e0       	ldi	r24, 0x06	; 6
    3ef6:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3efa:	2d b7       	in	r18, 0x3d	; 61
    3efc:	3e b7       	in	r19, 0x3e	; 62
    3efe:	2a 50       	subi	r18, 0x0A	; 10
    3f00:	30 40       	sbci	r19, 0x00	; 0
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	3e bf       	out	0x3e, r19	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	2d bf       	out	0x3d, r18	; 61
    3f0c:	ed b7       	in	r30, 0x3d	; 61
    3f0e:	fe b7       	in	r31, 0x3e	; 62
    3f10:	31 96       	adiw	r30, 0x01	; 1
    3f12:	ad b7       	in	r26, 0x3d	; 61
    3f14:	be b7       	in	r27, 0x3e	; 62
    3f16:	12 96       	adiw	r26, 0x02	; 2
    3f18:	1c 93       	st	X, r17
    3f1a:	0e 93       	st	-X, r16
    3f1c:	11 97       	sbiw	r26, 0x01	; 1
    3f1e:	d3 82       	std	Z+3, r13	; 0x03
    3f20:	c2 82       	std	Z+2, r12	; 0x02
    3f22:	26 e0       	ldi	r18, 0x06	; 6
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	35 83       	std	Z+5, r19	; 0x05
    3f28:	24 83       	std	Z+4, r18	; 0x04
    3f2a:	66 83       	std	Z+6, r22	; 0x06
    3f2c:	77 83       	std	Z+7, r23	; 0x07
    3f2e:	80 87       	std	Z+8, r24	; 0x08
    3f30:	91 87       	std	Z+9, r25	; 0x09
    3f32:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3f36:	8d b7       	in	r24, 0x3d	; 61
    3f38:	9e b7       	in	r25, 0x3e	; 62
    3f3a:	0a 96       	adiw	r24, 0x0a	; 10
    3f3c:	0f b6       	in	r0, 0x3f	; 63
    3f3e:	f8 94       	cli
    3f40:	9e bf       	out	0x3e, r25	; 62
    3f42:	0f be       	out	0x3f, r0	; 63
    3f44:	8d bf       	out	0x3d, r24	; 61
    3f46:	87 e0       	ldi	r24, 0x07	; 7
    3f48:	0e 94 a5 23 	call	0x474a	; 0x474a <sens_read>
    3f4c:	ad b7       	in	r26, 0x3d	; 61
    3f4e:	be b7       	in	r27, 0x3e	; 62
    3f50:	1a 97       	sbiw	r26, 0x0a	; 10
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	be bf       	out	0x3e, r27	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	ad bf       	out	0x3d, r26	; 61
    3f5c:	ed b7       	in	r30, 0x3d	; 61
    3f5e:	fe b7       	in	r31, 0x3e	; 62
    3f60:	31 96       	adiw	r30, 0x01	; 1
    3f62:	12 96       	adiw	r26, 0x02	; 2
    3f64:	1c 93       	st	X, r17
    3f66:	0e 93       	st	-X, r16
    3f68:	11 97       	sbiw	r26, 0x01	; 1
    3f6a:	d3 82       	std	Z+3, r13	; 0x03
    3f6c:	c2 82       	std	Z+2, r12	; 0x02
    3f6e:	27 e0       	ldi	r18, 0x07	; 7
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	35 83       	std	Z+5, r19	; 0x05
    3f74:	24 83       	std	Z+4, r18	; 0x04
    3f76:	66 83       	std	Z+6, r22	; 0x06
    3f78:	77 83       	std	Z+7, r23	; 0x07
    3f7a:	80 87       	std	Z+8, r24	; 0x08
    3f7c:	91 87       	std	Z+9, r25	; 0x09
    3f7e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	8d b7       	in	r24, 0x3d	; 61
    3f88:	9e b7       	in	r25, 0x3e	; 62
    3f8a:	0a 96       	adiw	r24, 0x0a	; 10
    3f8c:	0f b6       	in	r0, 0x3f	; 63
    3f8e:	f8 94       	cli
    3f90:	9e bf       	out	0x3e, r25	; 62
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	8d bf       	out	0x3d, r24	; 61
    3f96:	ce 01       	movw	r24, r28
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <test_sensors+0x59e>
    3f9c:	2f 5f       	subi	r18, 0xFF	; 255
    3f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa0:	93 e0       	ldi	r25, 0x03	; 3
    3fa2:	28 3e       	cpi	r18, 0xE8	; 232
    3fa4:	39 07       	cpc	r19, r25
    3fa6:	b9 f7       	brne	.-18     	; 0x3f96 <test_sensors+0x59c>
				}
				
				_delay_ms(100);
			}
			
			while (ser_tx_is_busy(1)); // wait for data to be sent
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	0e 94 00 31 	call	0x6200	; 0x6200 <ser_tx_is_busy>
    3fae:	88 23       	and	r24, r24
    3fb0:	09 f0       	breq	.+2      	; 0x3fb4 <test_sensors+0x5ba>
    3fb2:	b1 ce       	rjmp	.-670    	; 0x3d16 <test_sensors+0x31c>
    3fb4:	b5 ce       	rjmp	.-662    	; 0x3d20 <test_sensors+0x326>

00003fb6 <test_ser>:
	
	while (1);
}

void test_ser(uint8_t port)
{
    3fb6:	af 92       	push	r10
    3fb8:	bf 92       	push	r11
    3fba:	cf 92       	push	r12
    3fbc:	df 92       	push	r13
    3fbe:	ef 92       	push	r14
    3fc0:	ff 92       	push	r15
    3fc2:	1f 93       	push	r17
    3fc4:	df 93       	push	r29
    3fc6:	cf 93       	push	r28
    3fc8:	0f 92       	push	r0
    3fca:	cd b7       	in	r28, 0x3d	; 61
    3fcc:	de b7       	in	r29, 0x3e	; 62
    3fce:	18 2f       	mov	r17, r24
	void (* ser_init)(uint16_t, uint8_t, uint8_t) = ser0_init;
	FILE * ostream = &ostream_0;
	
	#ifdef __AVR_ATmega644P__
	if (port == 1)
    3fd0:	81 30       	cpi	r24, 0x01	; 1
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <test_ser+0x20>
    3fd4:	4f c0       	rjmp	.+158    	; 0x4074 <test_ser+0xbe>
    3fd6:	5b e9       	ldi	r21, 0x9B	; 155
    3fd8:	e5 2e       	mov	r14, r21
    3fda:	52 e3       	ldi	r21, 0x32	; 50
    3fdc:	f5 2e       	mov	r15, r21
    3fde:	4c e1       	ldi	r20, 0x1C	; 28
    3fe0:	c4 2e       	mov	r12, r20
    3fe2:	42 e0       	ldi	r20, 0x02	; 2
    3fe4:	d4 2e       	mov	r13, r20
		ser_init = ser1_init;
		ostream = &ostream_1;
	}
	#endif
	
	user_io_init();
    3fe6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	ser_init(129, 32, 32);
    3fea:	81 e8       	ldi	r24, 0x81	; 129
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	60 e2       	ldi	r22, 0x20	; 32
    3ff0:	40 e2       	ldi	r20, 0x20	; 32
    3ff2:	f7 01       	movw	r30, r14
    3ff4:	09 95       	icall
	
	sei();
    3ff6:	78 94       	sei
	
	fprintf_P(ostream, PSTR("\r\ntest_ser\r\n"));
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <test_ser+0x44>
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <test_ser+0x46>
    3ffc:	ed b7       	in	r30, 0x3d	; 61
    3ffe:	fe b7       	in	r31, 0x3e	; 62
    4000:	d2 82       	std	Z+2, r13	; 0x02
    4002:	c1 82       	std	Z+1, r12	; 0x01
    4004:	8a e7       	ldi	r24, 0x7A	; 122
    4006:	91 e0       	ldi	r25, 0x01	; 1
    4008:	94 83       	std	Z+4, r25	; 0x04
    400a:	83 83       	std	Z+3, r24	; 0x03
    400c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	7e 01       	movw	r14, r28
    401a:	08 94       	sec
    401c:	e1 1c       	adc	r14, r1
    401e:	f1 1c       	adc	r15, r1
    4020:	3f e6       	ldi	r19, 0x6F	; 111
    4022:	a3 2e       	mov	r10, r19
    4024:	31 e0       	ldi	r19, 0x01	; 1
    4026:	b3 2e       	mov	r11, r19
	
	while (1)
	{
		uint8_t r;
		uint8_t d = ser_rx(port, &r);
    4028:	81 2f       	mov	r24, r17
    402a:	b7 01       	movw	r22, r14
    402c:	0e 94 c8 30 	call	0x6190	; 0x6190 <ser_rx>
    4030:	68 2f       	mov	r22, r24
		if (r != 0)
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	88 23       	and	r24, r24
    4036:	d1 f4       	brne	.+52     	; 0x406c <test_ser+0xb6>
		{
			ser_tx(port, d);
		}
		else if (button_is_pressed())
    4038:	1c 99       	sbic	0x03, 4	; 3
    403a:	f6 cf       	rjmp	.-20     	; 0x4028 <test_ser+0x72>
		{
			fprintf_P(ostream, PSTR("\r\nbutton\r\n"));
    403c:	00 d0       	rcall	.+0      	; 0x403e <test_ser+0x88>
    403e:	00 d0       	rcall	.+0      	; 0x4040 <test_ser+0x8a>
    4040:	ed b7       	in	r30, 0x3d	; 61
    4042:	fe b7       	in	r31, 0x3e	; 62
    4044:	d2 82       	std	Z+2, r13	; 0x02
    4046:	c1 82       	std	Z+1, r12	; 0x01
    4048:	b4 82       	std	Z+4, r11	; 0x04
    404a:	a3 82       	std	Z+3, r10	; 0x03
    404c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
			
			while (button_is_pressed());
    4058:	1c 9b       	sbis	0x03, 4	; 3
    405a:	fe cf       	rjmp	.-4      	; 0x4058 <test_ser+0xa2>
	fprintf_P(ostream, PSTR("\r\ntest_ser\r\n"));
	
	while (1)
	{
		uint8_t r;
		uint8_t d = ser_rx(port, &r);
    405c:	81 2f       	mov	r24, r17
    405e:	b7 01       	movw	r22, r14
    4060:	0e 94 c8 30 	call	0x6190	; 0x6190 <ser_rx>
    4064:	68 2f       	mov	r22, r24
		if (r != 0)
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	88 23       	and	r24, r24
    406a:	31 f3       	breq	.-52     	; 0x4038 <test_ser+0x82>
		{
			ser_tx(port, d);
    406c:	81 2f       	mov	r24, r17
    406e:	0e 94 b8 30 	call	0x6170	; 0x6170 <ser_tx>
    4072:	da cf       	rjmp	.-76     	; 0x4028 <test_ser+0x72>
{
	void (* ser_init)(uint16_t, uint8_t, uint8_t) = ser0_init;
	FILE * ostream = &ostream_0;
	
	#ifdef __AVR_ATmega644P__
	if (port == 1)
    4074:	78 e6       	ldi	r23, 0x68	; 104
    4076:	e7 2e       	mov	r14, r23
    4078:	72 e3       	ldi	r23, 0x32	; 50
    407a:	f7 2e       	mov	r15, r23
    407c:	6a e2       	ldi	r22, 0x2A	; 42
    407e:	c6 2e       	mov	r12, r22
    4080:	62 e0       	ldi	r22, 0x02	; 2
    4082:	d6 2e       	mov	r13, r22
    4084:	b0 cf       	rjmp	.-160    	; 0x3fe6 <test_ser+0x30>

00004086 <test_calibration_eeprom>:
		}
	}
}

void test_calibration_eeprom()
{
    4086:	ef 92       	push	r14
    4088:	ff 92       	push	r15
    408a:	0f 93       	push	r16
    408c:	1f 93       	push	r17
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	cc 58       	subi	r28, 0x8C	; 140
    4098:	d1 40       	sbci	r29, 0x01	; 1
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
	user_io_init();
    40a4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <user_io_init>
	
	LED1_off();
    40a8:	46 9a       	sbi	0x08, 6	; 8
	LED2_off();
    40aa:	47 9a       	sbi	0x08, 7	; 8
	
	Calibration data1;
	Calibration data2;
	
	uint8_t * d1 = &data1;
    40ac:	8e 01       	movw	r16, r28
    40ae:	0f 5f       	subi	r16, 0xFF	; 255
    40b0:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t * d2 = &data2;
    40b2:	e7 ec       	ldi	r30, 0xC7	; 199
    40b4:	ee 2e       	mov	r14, r30
    40b6:	f1 2c       	mov	r15, r1
    40b8:	ec 0e       	add	r14, r28
    40ba:	fd 1e       	adc	r15, r29
	
	calibration_default(&data1);
    40bc:	c8 01       	movw	r24, r16
    40be:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <calibration_default>
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
	
	// make sure data are different
	for (uint32_t i = 0; i < sizeof(Calibration); i++)
	{
		d2[i] = ~d1[i];
    40c6:	f7 01       	movw	r30, r14
    40c8:	e2 0f       	add	r30, r18
    40ca:	f3 1f       	adc	r31, r19
    40cc:	d8 01       	movw	r26, r16
    40ce:	a2 0f       	add	r26, r18
    40d0:	b3 1f       	adc	r27, r19
    40d2:	8c 91       	ld	r24, X
    40d4:	80 95       	com	r24
    40d6:	80 83       	st	Z, r24
    40d8:	2f 5f       	subi	r18, 0xFF	; 255
    40da:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t * d2 = &data2;
	
	calibration_default(&data1);
	
	// make sure data are different
	for (uint32_t i = 0; i < sizeof(Calibration); i++)
    40dc:	26 3c       	cpi	r18, 0xC6	; 198
    40de:	31 05       	cpc	r19, r1
    40e0:	91 f7       	brne	.-28     	; 0x40c6 <test_calibration_eeprom+0x40>
	{
		d2[i] = ~d1[i];
	}
	
	calibration_save(&data1);
    40e2:	c8 01       	movw	r24, r16
    40e4:	0e 94 99 30 	call	0x6132	; 0x6132 <calibration_save>
	calibration_load(&data2);
    40e8:	c7 01       	movw	r24, r14
    40ea:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <calibration_load>
	
	if (memcmp(d1, d2, sizeof(Calibration)) == 0)
    40ee:	c8 01       	movw	r24, r16
    40f0:	b7 01       	movw	r22, r14
    40f2:	46 ec       	ldi	r20, 0xC6	; 198
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <memcmp>
    40fa:	00 97       	sbiw	r24, 0x00	; 0
    40fc:	19 f4       	brne	.+6      	; 0x4104 <test_calibration_eeprom+0x7e>
	{
		// data matches
		
		LED2_on();
    40fe:	47 98       	cbi	0x08, 7	; 8
		LED1_off();
    4100:	46 9a       	sbi	0x08, 6	; 8
    4102:	ff cf       	rjmp	.-2      	; 0x4102 <test_calibration_eeprom+0x7c>
	}
	else
	{
		// data does not match
		
		LED1_on();
    4104:	46 98       	cbi	0x08, 6	; 8
		LED2_off();
    4106:	47 9a       	sbi	0x08, 7	; 8
    4108:	fc cf       	rjmp	.-8      	; 0x4102 <test_calibration_eeprom+0x7c>

0000410a <__vector_13>:
static volatile uint8_t esc_done;
static volatile uint8_t esc_safety;
static volatile uint8_t esc_extra_servo;

ISR(TIMER1_COMPA_vect)
{
    410a:	1f 92       	push	r1
    410c:	0f 92       	push	r0
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	0f 92       	push	r0
    4112:	11 24       	eor	r1, r1
    4114:	2f 93       	push	r18
    4116:	3f 93       	push	r19
    4118:	4f 93       	push	r20
    411a:	5f 93       	push	r21
    411c:	8f 93       	push	r24
    411e:	9f 93       	push	r25
    4120:	af 93       	push	r26
    4122:	bf 93       	push	r27
    4124:	ef 93       	push	r30
    4126:	ff 93       	push	r31
	sbi(TCCR1C, FOC1A);
    4128:	80 91 82 00 	lds	r24, 0x0082
    412c:	80 68       	ori	r24, 0x80	; 128
    412e:	80 93 82 00 	sts	0x0082, r24

	OCR1A += esc_chan_width[esc_chan]; // calculate next alarm considering overflow
    4132:	20 91 88 00 	lds	r18, 0x0088
    4136:	30 91 89 00 	lds	r19, 0x0089
    413a:	e0 91 1c 03 	lds	r30, 0x031C
    413e:	f0 e0       	ldi	r31, 0x00	; 0
    4140:	ee 0f       	add	r30, r30
    4142:	ff 1f       	adc	r31, r31
    4144:	e4 5f       	subi	r30, 0xF4	; 244
    4146:	fc 4f       	sbci	r31, 0xFC	; 252
    4148:	80 81       	ld	r24, Z
    414a:	91 81       	ldd	r25, Z+1	; 0x01
    414c:	82 0f       	add	r24, r18
    414e:	93 1f       	adc	r25, r19
    4150:	90 93 89 00 	sts	0x0089, r25
    4154:	80 93 88 00 	sts	0x0088, r24
	esc_elapsed += esc_chan_width[esc_chan];
    4158:	e0 91 1c 03 	lds	r30, 0x031C
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	ee 0f       	add	r30, r30
    4160:	ff 1f       	adc	r31, r31
    4162:	e4 5f       	subi	r30, 0xF4	; 244
    4164:	fc 4f       	sbci	r31, 0xFC	; 252
    4166:	80 81       	ld	r24, Z
    4168:	91 81       	ldd	r25, Z+1	; 0x01
    416a:	20 91 1d 03 	lds	r18, 0x031D
    416e:	30 91 1e 03 	lds	r19, 0x031E
    4172:	40 91 1f 03 	lds	r20, 0x031F
    4176:	50 91 20 03 	lds	r21, 0x0320
    417a:	a0 e0       	ldi	r26, 0x00	; 0
    417c:	b0 e0       	ldi	r27, 0x00	; 0
    417e:	82 0f       	add	r24, r18
    4180:	93 1f       	adc	r25, r19
    4182:	a4 1f       	adc	r26, r20
    4184:	b5 1f       	adc	r27, r21
    4186:	80 93 1d 03 	sts	0x031D, r24
    418a:	90 93 1e 03 	sts	0x031E, r25
    418e:	a0 93 1f 03 	sts	0x031F, r26
    4192:	b0 93 20 03 	sts	0x0320, r27

	esc_chan++;
    4196:	80 91 1c 03 	lds	r24, 0x031C
    419a:	8f 5f       	subi	r24, 0xFF	; 255
    419c:	80 93 1c 03 	sts	0x031C, r24

	if(esc_chan == 4 + esc_extra_servo)
    41a0:	20 91 1c 03 	lds	r18, 0x031C
    41a4:	80 91 23 03 	lds	r24, 0x0323
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	04 96       	adiw	r24, 0x04	; 4
    41ae:	28 17       	cp	r18, r24
    41b0:	39 07       	cpc	r19, r25
    41b2:	79 f0       	breq	.+30     	; 0x41d2 <__vector_13+0xc8>
		else
		{
			esc_chan--;
		}
	}
}
    41b4:	ff 91       	pop	r31
    41b6:	ef 91       	pop	r30
    41b8:	bf 91       	pop	r27
    41ba:	af 91       	pop	r26
    41bc:	9f 91       	pop	r25
    41be:	8f 91       	pop	r24
    41c0:	5f 91       	pop	r21
    41c2:	4f 91       	pop	r20
    41c4:	3f 91       	pop	r19
    41c6:	2f 91       	pop	r18
    41c8:	0f 90       	pop	r0
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	0f 90       	pop	r0
    41ce:	1f 90       	pop	r1
    41d0:	18 95       	reti

	esc_chan++;

	if(esc_chan == 4 + esc_extra_servo)
	{
		if(esc_elapsed > ticks_10ms)
    41d2:	80 91 1d 03 	lds	r24, 0x031D
    41d6:	90 91 1e 03 	lds	r25, 0x031E
    41da:	a0 91 1f 03 	lds	r26, 0x031F
    41de:	b0 91 20 03 	lds	r27, 0x0320
    41e2:	81 54       	subi	r24, 0x41	; 65
    41e4:	9d 40       	sbci	r25, 0x0D	; 13
    41e6:	a3 40       	sbci	r26, 0x03	; 3
    41e8:	b0 40       	sbci	r27, 0x00	; 0
    41ea:	30 f4       	brcc	.+12     	; 0x41f8 <__vector_13+0xee>
		{
			esc_done = 1;
		}
		else
		{
			esc_chan--;
    41ec:	80 91 1c 03 	lds	r24, 0x031C
    41f0:	81 50       	subi	r24, 0x01	; 1
    41f2:	80 93 1c 03 	sts	0x031C, r24
    41f6:	de cf       	rjmp	.-68     	; 0x41b4 <__vector_13+0xaa>

	if(esc_chan == 4 + esc_extra_servo)
	{
		if(esc_elapsed > ticks_10ms)
		{
			esc_done = 1;
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	80 93 21 03 	sts	0x0321, r24
    41fe:	da cf       	rjmp	.-76     	; 0x41b4 <__vector_13+0xaa>

00004200 <esc_shift_rst>:
}

void esc_shift_rst()
{
	// reset the shift register
	cbi(esc_port, esc_rst_pin);
    4200:	5c 98       	cbi	0x0b, 4	; 11
	...
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();

	// if armed, then unlock shift register
	if(esc_safety == 0)
    4222:	80 91 22 03 	lds	r24, 0x0322
    4226:	88 23       	and	r24, r24
    4228:	09 f4       	brne	.+2      	; 0x422c <esc_shift_rst+0x2c>
	{
		sbi(esc_port, esc_rst_pin);
    422a:	5c 9a       	sbi	0x0b, 4	; 11
	}

	// place a bit into the first bit location to prepare
	
	cbi(esc_port, esc_clk_pin);
    422c:	5d 98       	cbi	0x0b, 5	; 11

	sbi(esc_port, esc_dat_pin);
    422e:	5f 9a       	sbi	0x0b, 7	; 11

	sbi(TCCR1C, FOC1A);
    4230:	80 91 82 00 	lds	r24, 0x0082
    4234:	80 68       	ori	r24, 0x80	; 128
    4236:	80 93 82 00 	sts	0x0082, r24
	...
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	sbi(TCCR1C, FOC1A);
    425a:	80 91 82 00 	lds	r24, 0x0082
    425e:	80 68       	ori	r24, 0x80	; 128
    4260:	80 93 82 00 	sts	0x0082, r24

	cbi(esc_port, esc_dat_pin);
    4264:	5f 98       	cbi	0x0b, 7	; 11
}
    4266:	08 95       	ret

00004268 <esc_is_done>:
	esc_shift_rst();
}

volatile inline uint8_t esc_is_done()
{
	return esc_done;
    4268:	80 91 21 03 	lds	r24, 0x0321
}
    426c:	08 95       	ret

0000426e <esc_is_done_clear>:

inline void esc_is_done_clear()
{
	esc_done = 0;
    426e:	10 92 21 03 	sts	0x0321, r1
}
    4272:	08 95       	ret

00004274 <esc_safe>:

inline void esc_safe(uint8_t c)
{
	esc_safety = c;
    4274:	80 93 22 03 	sts	0x0322, r24
}
    4278:	08 95       	ret

0000427a <esc_set_speed>:
	if (w > ticks_500us * 2) // limit top range
	{
		w = ticks_500us * 2;
	}
	
	esc_chan_width[c] = ticks_500us * 2 + w;
    427a:	e8 2f       	mov	r30, r24
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	cb 01       	movw	r24, r22
    4280:	2e e4       	ldi	r18, 0x4E	; 78
    4282:	61 32       	cpi	r22, 0x21	; 33
    4284:	72 07       	cpc	r23, r18
    4286:	10 f0       	brcs	.+4      	; 0x428c <esc_set_speed+0x12>
    4288:	80 e2       	ldi	r24, 0x20	; 32
    428a:	9e e4       	ldi	r25, 0x4E	; 78
    428c:	80 5e       	subi	r24, 0xE0	; 224
    428e:	91 4b       	sbci	r25, 0xB1	; 177
    4290:	ee 0f       	add	r30, r30
    4292:	ff 1f       	adc	r31, r31
    4294:	e4 5f       	subi	r30, 0xF4	; 244
    4296:	fc 4f       	sbci	r31, 0xFC	; 252
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
}
    429c:	08 95       	ret

0000429e <esc_set_speed_with_mode>:

void esc_set_speed_with_mode(uint8_t c, uint16_t w, uint8_t m)
{
    429e:	df 93       	push	r29
    42a0:	cf 93       	push	r28
    42a2:	0f 92       	push	r0
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	49 83       	std	Y+1, r20	; 0x01
	uint16_t r;
	if (bit_is_set(m, c * 2)) // starting point at 1500 us
    42aa:	29 81       	ldd	r18, Y+1	; 0x01
    42ac:	e8 2f       	mov	r30, r24
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	ee 0f       	add	r30, r30
    42b2:	ff 1f       	adc	r31, r31
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	0e 2e       	mov	r0, r30
    42b8:	02 c0       	rjmp	.+4      	; 0x42be <esc_set_speed_with_mode+0x20>
    42ba:	35 95       	asr	r19
    42bc:	27 95       	ror	r18
    42be:	0a 94       	dec	r0
    42c0:	e2 f7       	brpl	.-8      	; 0x42ba <esc_set_speed_with_mode+0x1c>
    42c2:	20 ff       	sbrs	r18, 0
    42c4:	26 c0       	rjmp	.+76     	; 0x4312 <esc_set_speed_with_mode+0x74>
	{
		r = ticks_500us * 3 + w / 2;
    42c6:	9b 01       	movw	r18, r22
    42c8:	36 95       	lsr	r19
    42ca:	27 95       	ror	r18
    42cc:	20 5d       	subi	r18, 0xD0	; 208
    42ce:	3a 48       	sbci	r19, 0x8A	; 138
	{
		r = ticks_500us * 2 + w;
	}
	
	// reverse
	if (bit_is_set(m, c * 2 + 1))
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	31 96       	adiw	r30, 0x01	; 1
    42d6:	0e 2e       	mov	r0, r30
    42d8:	02 c0       	rjmp	.+4      	; 0x42de <esc_set_speed_with_mode+0x40>
    42da:	95 95       	asr	r25
    42dc:	87 95       	ror	r24
    42de:	0a 94       	dec	r0
    42e0:	e2 f7       	brpl	.-8      	; 0x42da <esc_set_speed_with_mode+0x3c>
    42e2:	31 97       	sbiw	r30, 0x01	; 1
    42e4:	80 ff       	sbrs	r24, 0
    42e6:	04 c0       	rjmp	.+8      	; 0x42f0 <esc_set_speed_with_mode+0x52>
	{
		r = ticks_500us * 6 - w;
    42e8:	20 e6       	ldi	r18, 0x60	; 96
    42ea:	3a ee       	ldi	r19, 0xEA	; 234
    42ec:	26 1b       	sub	r18, r22
    42ee:	37 0b       	sbc	r19, r23
}

void esc_set_width(uint8_t c, uint16_t w)
{
	// limit range from 1000 to 2000 us
	if(w < ticks_500us * 2)
    42f0:	8e e4       	ldi	r24, 0x4E	; 78
    42f2:	20 32       	cpi	r18, 0x20	; 32
    42f4:	38 07       	cpc	r19, r24
    42f6:	d8 f0       	brcs	.+54     	; 0x432e <esc_set_speed_with_mode+0x90>
    42f8:	c9 01       	movw	r24, r18
    42fa:	2c e9       	ldi	r18, 0x9C	; 156
    42fc:	81 34       	cpi	r24, 0x41	; 65
    42fe:	92 07       	cpc	r25, r18
    4300:	60 f4       	brcc	.+24     	; 0x431a <esc_set_speed_with_mode+0x7c>
	else if(w > ticks_500us * 4)
	{
		w = ticks_500us * 4;
	}
	
	esc_chan_width[c] = w;
    4302:	e4 5f       	subi	r30, 0xF4	; 244
    4304:	fc 4f       	sbci	r31, 0xFC	; 252
    4306:	91 83       	std	Z+1, r25	; 0x01
    4308:	80 83       	st	Z, r24
	{
		r = ticks_500us * 6 - w;
	}
	
	esc_set_width(c, r);
}
    430a:	0f 90       	pop	r0
    430c:	cf 91       	pop	r28
    430e:	df 91       	pop	r29
    4310:	08 95       	ret
	{
		r = ticks_500us * 3 + w / 2;
	}
	else // starting point at 1000 us
	{
		r = ticks_500us * 2 + w;
    4312:	9b 01       	movw	r18, r22
    4314:	20 5e       	subi	r18, 0xE0	; 224
    4316:	31 4b       	sbci	r19, 0xB1	; 177
    4318:	db cf       	rjmp	.-74     	; 0x42d0 <esc_set_speed_with_mode+0x32>
}

void esc_set_width(uint8_t c, uint16_t w)
{
	// limit range from 1000 to 2000 us
	if(w < ticks_500us * 2)
    431a:	80 e4       	ldi	r24, 0x40	; 64
    431c:	9c e9       	ldi	r25, 0x9C	; 156
	else if(w > ticks_500us * 4)
	{
		w = ticks_500us * 4;
	}
	
	esc_chan_width[c] = w;
    431e:	e4 5f       	subi	r30, 0xF4	; 244
    4320:	fc 4f       	sbci	r31, 0xFC	; 252
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	80 83       	st	Z, r24
	{
		r = ticks_500us * 6 - w;
	}
	
	esc_set_width(c, r);
}
    4326:	0f 90       	pop	r0
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

void esc_set_width(uint8_t c, uint16_t w)
{
	// limit range from 1000 to 2000 us
	if(w < ticks_500us * 2)
    432e:	80 e2       	ldi	r24, 0x20	; 32
    4330:	9e e4       	ldi	r25, 0x4E	; 78
	else if(w > ticks_500us * 4)
	{
		w = ticks_500us * 4;
	}
	
	esc_chan_width[c] = w;
    4332:	e4 5f       	subi	r30, 0xF4	; 244
    4334:	fc 4f       	sbci	r31, 0xFC	; 252
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	80 83       	st	Z, r24
	{
		r = ticks_500us * 6 - w;
	}
	
	esc_set_width(c, r);
}
    433a:	0f 90       	pop	r0
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <esc_set_width>:

void esc_set_width(uint8_t c, uint16_t w)
{
	// limit range from 1000 to 2000 us
	if(w < ticks_500us * 2)
    4342:	9e e4       	ldi	r25, 0x4E	; 78
    4344:	60 32       	cpi	r22, 0x20	; 32
    4346:	79 07       	cpc	r23, r25
    4348:	80 f0       	brcs	.+32     	; 0x436a <esc_set_width+0x28>
    434a:	9c e9       	ldi	r25, 0x9C	; 156
    434c:	61 34       	cpi	r22, 0x41	; 65
    434e:	79 07       	cpc	r23, r25
    4350:	48 f4       	brcc	.+18     	; 0x4364 <esc_set_width+0x22>
	else if(w > ticks_500us * 4)
	{
		w = ticks_500us * 4;
	}
	
	esc_chan_width[c] = w;
    4352:	e8 2f       	mov	r30, r24
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	ee 0f       	add	r30, r30
    4358:	ff 1f       	adc	r31, r31
    435a:	e4 5f       	subi	r30, 0xF4	; 244
    435c:	fc 4f       	sbci	r31, 0xFC	; 252
    435e:	71 83       	std	Z+1, r23	; 0x01
    4360:	60 83       	st	Z, r22
}
    4362:	08 95       	ret
}

void esc_set_width(uint8_t c, uint16_t w)
{
	// limit range from 1000 to 2000 us
	if(w < ticks_500us * 2)
    4364:	60 e4       	ldi	r22, 0x40	; 64
    4366:	7c e9       	ldi	r23, 0x9C	; 156
    4368:	f4 cf       	rjmp	.-24     	; 0x4352 <esc_set_width+0x10>
    436a:	60 e2       	ldi	r22, 0x20	; 32
    436c:	7e e4       	ldi	r23, 0x4E	; 78
    436e:	f1 cf       	rjmp	.-30     	; 0x4352 <esc_set_width+0x10>

00004370 <esc_get_total>:
}

volatile uint32_t esc_get_total()
{
	uint32_t sum = 0;
	for(uint8_t i = 0; i < 4 + esc_extra_servo; i++)
    4370:	80 91 23 03 	lds	r24, 0x0323
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e0       	ldi	r20, 0x00	; 0
    437a:	50 e0       	ldi	r21, 0x00	; 0
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	e0 e0       	ldi	r30, 0x00	; 0
    4380:	f0 e0       	ldi	r31, 0x00	; 0
	{
		sum += esc_chan_width[i];
    4382:	ee 0f       	add	r30, r30
    4384:	ff 1f       	adc	r31, r31
    4386:	e4 5f       	subi	r30, 0xF4	; 244
    4388:	fc 4f       	sbci	r31, 0xFC	; 252
    438a:	80 81       	ld	r24, Z
    438c:	91 81       	ldd	r25, Z+1	; 0x01
    438e:	a0 e0       	ldi	r26, 0x00	; 0
    4390:	b0 e0       	ldi	r27, 0x00	; 0
    4392:	28 0f       	add	r18, r24
    4394:	39 1f       	adc	r19, r25
    4396:	4a 1f       	adc	r20, r26
    4398:	5b 1f       	adc	r21, r27
}

volatile uint32_t esc_get_total()
{
	uint32_t sum = 0;
	for(uint8_t i = 0; i < 4 + esc_extra_servo; i++)
    439a:	6f 5f       	subi	r22, 0xFF	; 255
    439c:	80 91 23 03 	lds	r24, 0x0323
    43a0:	e6 2f       	mov	r30, r22
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	03 96       	adiw	r24, 0x03	; 3
    43a8:	8e 17       	cp	r24, r30
    43aa:	9f 07       	cpc	r25, r31
    43ac:	54 f7       	brge	.-44     	; 0x4382 <esc_get_total+0x12>
	{
		sum += esc_chan_width[i];
	}
	return sum;
}
    43ae:	b9 01       	movw	r22, r18
    43b0:	ca 01       	movw	r24, r20
    43b2:	08 95       	ret

000043b4 <esc_set_extra_chan>:

inline void esc_set_extra_chan(uint8_t n)
{
	esc_extra_servo = n;
    43b4:	80 93 23 03 	sts	0x0323, r24
    43b8:	08 95       	ret

000043ba <esc_start_next>:
	cbi(esc_port, esc_dat_pin);
}

void esc_start_next()
{
	OCR1A = TCNT1 + 128;
    43ba:	80 91 84 00 	lds	r24, 0x0084
    43be:	90 91 85 00 	lds	r25, 0x0085
    43c2:	80 58       	subi	r24, 0x80	; 128
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	90 93 89 00 	sts	0x0089, r25
    43ca:	80 93 88 00 	sts	0x0088, r24

	esc_chan = 0;
    43ce:	10 92 1c 03 	sts	0x031C, r1
	esc_done = 0;
    43d2:	10 92 21 03 	sts	0x0321, r1
	esc_elapsed = 0;
    43d6:	10 92 1d 03 	sts	0x031D, r1
    43da:	10 92 1e 03 	sts	0x031E, r1
    43de:	10 92 1f 03 	sts	0x031F, r1
    43e2:	10 92 20 03 	sts	0x0320, r1
}

void esc_shift_rst()
{
	// reset the shift register
	cbi(esc_port, esc_rst_pin);
    43e6:	5c 98       	cbi	0x0b, 4	; 11
	...
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();

	// if armed, then unlock shift register
	if(esc_safety == 0)
    4408:	80 91 22 03 	lds	r24, 0x0322
    440c:	88 23       	and	r24, r24
    440e:	09 f4       	brne	.+2      	; 0x4412 <esc_start_next+0x58>
	{
		sbi(esc_port, esc_rst_pin);
    4410:	5c 9a       	sbi	0x0b, 4	; 11
	}

	// place a bit into the first bit location to prepare
	
	cbi(esc_port, esc_clk_pin);
    4412:	5d 98       	cbi	0x0b, 5	; 11

	sbi(esc_port, esc_dat_pin);
    4414:	5f 9a       	sbi	0x0b, 7	; 11

	sbi(TCCR1C, FOC1A);
    4416:	80 91 82 00 	lds	r24, 0x0082
    441a:	80 68       	ori	r24, 0x80	; 128
    441c:	80 93 82 00 	sts	0x0082, r24
	...
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	sbi(TCCR1C, FOC1A);
    4440:	80 91 82 00 	lds	r24, 0x0082
    4444:	80 68       	ori	r24, 0x80	; 128
    4446:	80 93 82 00 	sts	0x0082, r24

	cbi(esc_port, esc_dat_pin);
    444a:	5f 98       	cbi	0x0b, 7	; 11
	esc_chan = 0;
	esc_done = 0;
	esc_elapsed = 0;

	esc_shift_rst();
}
    444c:	08 95       	ret

0000444e <esc_init>:
void esc_init()
{
	// set default
	for(uint8_t i = 0; i < 8; i++)
	{
		esc_chan_width[i] = ticks_500us;
    444e:	80 e1       	ldi	r24, 0x10	; 16
    4450:	97 e2       	ldi	r25, 0x27	; 39
    4452:	90 93 0d 03 	sts	0x030D, r25
    4456:	80 93 0c 03 	sts	0x030C, r24
    445a:	90 93 0f 03 	sts	0x030F, r25
    445e:	80 93 0e 03 	sts	0x030E, r24
    4462:	90 93 11 03 	sts	0x0311, r25
    4466:	80 93 10 03 	sts	0x0310, r24
    446a:	90 93 13 03 	sts	0x0313, r25
    446e:	80 93 12 03 	sts	0x0312, r24
    4472:	90 93 15 03 	sts	0x0315, r25
    4476:	80 93 14 03 	sts	0x0314, r24
    447a:	90 93 17 03 	sts	0x0317, r25
    447e:	80 93 16 03 	sts	0x0316, r24
    4482:	90 93 19 03 	sts	0x0319, r25
    4486:	80 93 18 03 	sts	0x0318, r24
    448a:	90 93 1b 03 	sts	0x031B, r25
    448e:	80 93 1a 03 	sts	0x031A, r24
	}

	// be safe
	esc_safety = 1;
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	80 93 22 03 	sts	0x0322, r24

	// initialize port
	cbi(esc_port, esc_rst_pin);
    4498:	5c 98       	cbi	0x0b, 4	; 11
	cbi(esc_port, esc_clk_pin);
    449a:	5d 98       	cbi	0x0b, 5	; 11
	cbi(esc_port, esc_dat_pin);
    449c:	5f 98       	cbi	0x0b, 7	; 11
	sbi(esc_ddr, esc_rst_pin);
    449e:	54 9a       	sbi	0x0a, 4	; 10
	sbi(esc_ddr, esc_clk_pin);
    44a0:	55 9a       	sbi	0x0a, 5	; 10
	sbi(esc_ddr, esc_dat_pin);
    44a2:	57 9a       	sbi	0x0a, 7	; 10
	cbi(esc_port, esc_dat_pin);
}

void esc_start_next()
{
	OCR1A = TCNT1 + 128;
    44a4:	80 91 84 00 	lds	r24, 0x0084
    44a8:	90 91 85 00 	lds	r25, 0x0085
    44ac:	80 58       	subi	r24, 0x80	; 128
    44ae:	9f 4f       	sbci	r25, 0xFF	; 255
    44b0:	90 93 89 00 	sts	0x0089, r25
    44b4:	80 93 88 00 	sts	0x0088, r24

	esc_chan = 0;
    44b8:	10 92 1c 03 	sts	0x031C, r1
	esc_done = 0;
    44bc:	10 92 21 03 	sts	0x0321, r1
	esc_elapsed = 0;
    44c0:	10 92 1d 03 	sts	0x031D, r1
    44c4:	10 92 1e 03 	sts	0x031E, r1
    44c8:	10 92 1f 03 	sts	0x031F, r1
    44cc:	10 92 20 03 	sts	0x0320, r1
}

void esc_shift_rst()
{
	// reset the shift register
	cbi(esc_port, esc_rst_pin);
    44d0:	5c 98       	cbi	0x0b, 4	; 11
	...
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();

	// if armed, then unlock shift register
	if(esc_safety == 0)
    44f2:	80 91 22 03 	lds	r24, 0x0322
    44f6:	88 23       	and	r24, r24
    44f8:	09 f4       	brne	.+2      	; 0x44fc <esc_init+0xae>
	{
		sbi(esc_port, esc_rst_pin);
    44fa:	5c 9a       	sbi	0x0b, 4	; 11
	}

	// place a bit into the first bit location to prepare
	
	cbi(esc_port, esc_clk_pin);
    44fc:	5d 98       	cbi	0x0b, 5	; 11

	sbi(esc_port, esc_dat_pin);
    44fe:	5f 9a       	sbi	0x0b, 7	; 11

	sbi(TCCR1C, FOC1A);
    4500:	80 91 82 00 	lds	r24, 0x0082
    4504:	80 68       	ori	r24, 0x80	; 128
    4506:	80 93 82 00 	sts	0x0082, r24
	...
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	nop(); nop(); nop(); nop();
	sbi(TCCR1C, FOC1A);
    452a:	80 91 82 00 	lds	r24, 0x0082
    452e:	80 68       	ori	r24, 0x80	; 128
    4530:	80 93 82 00 	sts	0x0082, r24

	cbi(esc_port, esc_dat_pin);
    4534:	5f 98       	cbi	0x0b, 7	; 11
	sbi(esc_ddr, esc_dat_pin);

	// prepare shift register
	esc_start_next();

	timer1_init();
    4536:	0e 94 ac 22 	call	0x4558	; 0x4558 <timer1_init>

	// start timer output module
	sbi(TCCR1A, COM1A0);
    453a:	80 91 80 00 	lds	r24, 0x0080
    453e:	80 64       	ori	r24, 0x40	; 64
    4540:	80 93 80 00 	sts	0x0080, r24
	sbi(TIMSK1, OCIE1A);
    4544:	80 91 6f 00 	lds	r24, 0x006F
    4548:	82 60       	ori	r24, 0x02	; 2
    454a:	80 93 6f 00 	sts	0x006F, r24
}
    454e:	08 95       	ret

00004550 <timer0_init>:
static volatile uint32_t last_tcnt0;

void timer0_init()
{
	//TIMSK0 |= _BV(OCIE0B) | _BV(OCIE0A);
	TCCR0B |= _BV(CS00) | _BV(CS02);
    4550:	85 b5       	in	r24, 0x25	; 37
    4552:	85 60       	ori	r24, 0x05	; 5
    4554:	85 bd       	out	0x25, r24	; 37
}
    4556:	08 95       	ret

00004558 <timer1_init>:

void timer1_init()
{
	last_tcnt1 = TCNT1;
    4558:	80 91 84 00 	lds	r24, 0x0084
    455c:	90 91 85 00 	lds	r25, 0x0085
    4560:	a0 e0       	ldi	r26, 0x00	; 0
    4562:	b0 e0       	ldi	r27, 0x00	; 0
    4564:	80 93 24 03 	sts	0x0324, r24
    4568:	90 93 25 03 	sts	0x0325, r25
    456c:	a0 93 26 03 	sts	0x0326, r26
    4570:	b0 93 27 03 	sts	0x0327, r27
	sbi(TCCR1B, CS10);
    4574:	e1 e8       	ldi	r30, 0x81	; 129
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	81 60       	ori	r24, 0x01	; 1
    457c:	80 83       	st	Z, r24
}
    457e:	08 95       	ret

00004580 <timer1_elapsed>:

volatile int32_t timer1_elapsed()
{
	int32_t temp_tcnt1 = TCNT1;
    4580:	60 91 84 00 	lds	r22, 0x0084
    4584:	70 91 85 00 	lds	r23, 0x0085
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	90 e0       	ldi	r25, 0x00	; 0
	int32_t diff = ((temp_tcnt1 | 0x10000) - last_tcnt1) & 0xFFFF;
    458c:	20 91 24 03 	lds	r18, 0x0324
    4590:	30 91 25 03 	lds	r19, 0x0325
    4594:	40 91 26 03 	lds	r20, 0x0326
    4598:	50 91 27 03 	lds	r21, 0x0327
	last_tcnt1 = temp_tcnt1;
    459c:	60 93 24 03 	sts	0x0324, r22
    45a0:	70 93 25 03 	sts	0x0325, r23
    45a4:	80 93 26 03 	sts	0x0326, r24
    45a8:	90 93 27 03 	sts	0x0327, r25
    45ac:	81 60       	ori	r24, 0x01	; 1
    45ae:	62 1b       	sub	r22, r18
    45b0:	73 0b       	sbc	r23, r19
    45b2:	84 0b       	sbc	r24, r20
    45b4:	95 0b       	sbc	r25, r21
    45b6:	80 70       	andi	r24, 0x00	; 0
    45b8:	90 70       	andi	r25, 0x00	; 0
    45ba:	28 ee       	ldi	r18, 0xE8	; 232
    45bc:	33 e0       	ldi	r19, 0x03	; 3
    45be:	40 e0       	ldi	r20, 0x00	; 0
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    45c6:	60 58       	subi	r22, 0x80	; 128
    45c8:	79 46       	sbci	r23, 0x69	; 105
    45ca:	87 46       	sbci	r24, 0x67	; 103
    45cc:	9f 4f       	sbci	r25, 0xFF	; 255
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	3d e2       	ldi	r19, 0x2D	; 45
    45d2:	41 e3       	ldi	r20, 0x31	; 49
    45d4:	51 e0       	ldi	r21, 0x01	; 1
    45d6:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    45da:	ca 01       	movw	r24, r20
	int32_t r = calc_multi(diff, MATH_MULTIPLIER, F_CPU);
	return r;
}
    45dc:	b9 01       	movw	r22, r18
    45de:	08 95       	ret

000045e0 <timer0_elapsed>:

volatile int32_t timer0_elapsed()
{
	int32_t temp_tcnt0 = TCNT0;
    45e0:	66 b5       	in	r22, 0x26	; 38
    45e2:	70 e0       	ldi	r23, 0x00	; 0
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e0       	ldi	r25, 0x00	; 0
	int32_t diff = ((temp_tcnt0 | 0x100) - last_tcnt0) & 0xFF;
    45e8:	20 91 28 03 	lds	r18, 0x0328
    45ec:	30 91 29 03 	lds	r19, 0x0329
    45f0:	40 91 2a 03 	lds	r20, 0x032A
    45f4:	50 91 2b 03 	lds	r21, 0x032B
	last_tcnt0 = temp_tcnt0;
    45f8:	60 93 28 03 	sts	0x0328, r22
    45fc:	70 93 29 03 	sts	0x0329, r23
    4600:	80 93 2a 03 	sts	0x032A, r24
    4604:	90 93 2b 03 	sts	0x032B, r25
    4608:	71 60       	ori	r23, 0x01	; 1
    460a:	62 1b       	sub	r22, r18
    460c:	73 0b       	sbc	r23, r19
    460e:	84 0b       	sbc	r24, r20
    4610:	95 0b       	sbc	r25, r21
    4612:	70 70       	andi	r23, 0x00	; 0
    4614:	80 70       	andi	r24, 0x00	; 0
    4616:	90 70       	andi	r25, 0x00	; 0
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 ea       	ldi	r19, 0xA0	; 160
    461c:	4f e0       	ldi	r20, 0x0F	; 15
    461e:	50 e0       	ldi	r21, 0x00	; 0
    4620:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    4624:	60 58       	subi	r22, 0x80	; 128
    4626:	79 46       	sbci	r23, 0x69	; 105
    4628:	87 46       	sbci	r24, 0x67	; 103
    462a:	9f 4f       	sbci	r25, 0xFF	; 255
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	3d e2       	ldi	r19, 0x2D	; 45
    4630:	41 e3       	ldi	r20, 0x31	; 49
    4632:	51 e0       	ldi	r21, 0x01	; 1
    4634:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    4638:	ca 01       	movw	r24, r20
	int32_t r = calc_multi(diff, MATH_MULTIPLIER * 1024, F_CPU);
	return r;
}
    463a:	b9 01       	movw	r22, r18
    463c:	08 95       	ret

0000463e <__vector_17>:


ISR(TIMER0_COMPB_vect)
{
    463e:	1f 92       	push	r1
    4640:	0f 92       	push	r0
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	0f 92       	push	r0
    4646:	11 24       	eor	r1, r1
}
    4648:	0f 90       	pop	r0
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	0f 90       	pop	r0
    464e:	1f 90       	pop	r1
    4650:	18 95       	reti

00004652 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    4652:	1f 92       	push	r1
    4654:	0f 92       	push	r0
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	0f 92       	push	r0
    465a:	11 24       	eor	r1, r1
    465c:	0f 90       	pop	r0
    465e:	0f be       	out	0x3f, r0	; 63
    4660:	0f 90       	pop	r0
    4662:	1f 90       	pop	r1
    4664:	18 95       	reti

00004666 <adc_start>:
}

// start ADC module on channel c, f is for other flags (such as ADIE)
void adc_start(uint8_t c, uint8_t f)
{
	ADMUX = (ADMUX & 0b11100000) | c;
    4666:	ec e7       	ldi	r30, 0x7C	; 124
    4668:	f0 e0       	ldi	r31, 0x00	; 0
    466a:	90 81       	ld	r25, Z
    466c:	90 7e       	andi	r25, 0xE0	; 224
    466e:	98 2b       	or	r25, r24
    4670:	90 83       	st	Z, r25
	ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | f;
    4672:	67 6c       	ori	r22, 0xC7	; 199
    4674:	60 93 7a 00 	sts	0x007A, r22
}
    4678:	08 95       	ret

0000467a <adc_wait_stop>:

// stop the ADC module from taking samples
void adc_wait_stop()
{
	cbi(ADCSRA, ADIE);
    467a:	80 91 7a 00 	lds	r24, 0x007A
    467e:	87 7f       	andi	r24, 0xF7	; 247
    4680:	80 93 7a 00 	sts	0x007A, r24
	while (bit_is_set(ADCSRA, ADSC));
    4684:	80 91 7a 00 	lds	r24, 0x007A
    4688:	86 fd       	sbrc	r24, 6
    468a:	fc cf       	rjmp	.-8      	; 0x4684 <adc_wait_stop+0xa>
}
    468c:	08 95       	ret

0000468e <sens_init>:
// initialize the sensor module and start the ADC
void sens_init()
{
	#ifdef use_ordered_sensors
	// set channel read order
	adc_chan_order[0] = roll_accel_chan;
    468e:	83 e0       	ldi	r24, 0x03	; 3
    4690:	80 93 8e 03 	sts	0x038E, r24
	adc_chan_order[1] = roll_gyro_chan;
    4694:	82 e0       	ldi	r24, 0x02	; 2
    4696:	80 93 8f 03 	sts	0x038F, r24
	adc_chan_order[2] = pitch_accel_chan;
    469a:	84 e0       	ldi	r24, 0x04	; 4
    469c:	80 93 90 03 	sts	0x0390, r24
	adc_chan_order[3] = pitch_gyro_chan;
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	80 93 91 03 	sts	0x0391, r24
	adc_chan_order[4] = vert_accel_chan;
    46a6:	85 e0       	ldi	r24, 0x05	; 5
    46a8:	80 93 92 03 	sts	0x0392, r24
	adc_chan_order[5] = yaw_gyro_chan;
    46ac:	10 92 93 03 	sts	0x0393, r1
	#endif
	
	// reset all values
	for(uint8_t i = 0; i < 8; i++)
	{
		adc_offset[i] = 0;
    46b0:	10 92 6c 03 	sts	0x036C, r1
    46b4:	10 92 6d 03 	sts	0x036D, r1
    46b8:	10 92 6e 03 	sts	0x036E, r1
    46bc:	10 92 6f 03 	sts	0x036F, r1
    46c0:	10 92 70 03 	sts	0x0370, r1
    46c4:	10 92 71 03 	sts	0x0371, r1
    46c8:	10 92 72 03 	sts	0x0372, r1
    46cc:	10 92 73 03 	sts	0x0373, r1
    46d0:	10 92 74 03 	sts	0x0374, r1
    46d4:	10 92 75 03 	sts	0x0375, r1
    46d8:	10 92 76 03 	sts	0x0376, r1
    46dc:	10 92 77 03 	sts	0x0377, r1
    46e0:	10 92 78 03 	sts	0x0378, r1
    46e4:	10 92 79 03 	sts	0x0379, r1
    46e8:	10 92 7a 03 	sts	0x037A, r1
    46ec:	10 92 7b 03 	sts	0x037B, r1
    46f0:	10 92 7c 03 	sts	0x037C, r1
    46f4:	10 92 7d 03 	sts	0x037D, r1
    46f8:	10 92 7e 03 	sts	0x037E, r1
    46fc:	10 92 7f 03 	sts	0x037F, r1
    4700:	10 92 80 03 	sts	0x0380, r1
    4704:	10 92 81 03 	sts	0x0381, r1
    4708:	10 92 82 03 	sts	0x0382, r1
    470c:	10 92 83 03 	sts	0x0383, r1
    4710:	10 92 84 03 	sts	0x0384, r1
    4714:	10 92 85 03 	sts	0x0385, r1
    4718:	10 92 86 03 	sts	0x0386, r1
    471c:	10 92 87 03 	sts	0x0387, r1
    4720:	10 92 88 03 	sts	0x0388, r1
    4724:	10 92 89 03 	sts	0x0389, r1
    4728:	10 92 8a 03 	sts	0x038A, r1
    472c:	10 92 8b 03 	sts	0x038B, r1
	}

	adc_chan = 0;
    4730:	10 92 8c 03 	sts	0x038C, r1
	adc_new_cycle = 0;
    4734:	10 92 8d 03 	sts	0x038D, r1
}

// start ADC module on channel c, f is for other flags (such as ADIE)
void adc_start(uint8_t c, uint8_t f)
{
	ADMUX = (ADMUX & 0b11100000) | c;
    4738:	ec e7       	ldi	r30, 0x7C	; 124
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	80 81       	ld	r24, Z
    473e:	80 7e       	andi	r24, 0xE0	; 224
    4740:	80 83       	st	Z, r24
	ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | f;
    4742:	8f ec       	ldi	r24, 0xCF	; 207
    4744:	80 93 7a 00 	sts	0x007A, r24

	adc_chan = 0;
	adc_new_cycle = 0;

	adc_start(0, _BV(ADIE));
}
    4748:	08 95       	ret

0000474a <sens_read>:

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    474a:	e8 2f       	mov	r30, r24
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	ee 0f       	add	r30, r30
    4750:	ff 1f       	adc	r31, r31
    4752:	ee 0f       	add	r30, r30
    4754:	ff 1f       	adc	r31, r31
    4756:	e4 5b       	subi	r30, 0xB4	; 180
    4758:	fc 4f       	sbci	r31, 0xFC	; 252
    475a:	20 81       	ld	r18, Z
    475c:	31 81       	ldd	r19, Z+1	; 0x01
    475e:	42 81       	ldd	r20, Z+2	; 0x02
    4760:	53 81       	ldd	r21, Z+3	; 0x03
}
    4762:	b9 01       	movw	r22, r18
    4764:	ca 01       	movw	r24, r20
    4766:	08 95       	ret

00004768 <sens_offset>:

// read the calibration results of a channel
volatile inline int32_t sens_offset(uint8_t i)
{
	return adc_offset[i];
    4768:	e8 2f       	mov	r30, r24
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	ee 0f       	add	r30, r30
    476e:	ff 1f       	adc	r31, r31
    4770:	ee 0f       	add	r30, r30
    4772:	ff 1f       	adc	r31, r31
    4774:	e4 59       	subi	r30, 0x94	; 148
    4776:	fc 4f       	sbci	r31, 0xFC	; 252
    4778:	20 81       	ld	r18, Z
    477a:	31 81       	ldd	r19, Z+1	; 0x01
    477c:	42 81       	ldd	r20, Z+2	; 0x02
    477e:	53 81       	ldd	r21, Z+3	; 0x03
}
    4780:	b9 01       	movw	r22, r18
    4782:	ca 01       	movw	r24, r20
    4784:	08 95       	ret

00004786 <sens_calibrate>:

// find the center values of all channels using t number of samples
void sens_calibrate(uint8_t t)
{
    4786:	2f 92       	push	r2
    4788:	3f 92       	push	r3
    478a:	4f 92       	push	r4
    478c:	5f 92       	push	r5
    478e:	6f 92       	push	r6
    4790:	7f 92       	push	r7
    4792:	8f 92       	push	r8
    4794:	9f 92       	push	r9
    4796:	af 92       	push	r10
    4798:	bf 92       	push	r11
    479a:	cf 92       	push	r12
    479c:	df 92       	push	r13
    479e:	ef 92       	push	r14
    47a0:	ff 92       	push	r15
    47a2:	0f 93       	push	r16
    47a4:	1f 93       	push	r17
    47a6:	df 93       	push	r29
    47a8:	cf 93       	push	r28
    47aa:	cd b7       	in	r28, 0x3d	; 61
    47ac:	de b7       	in	r29, 0x3e	; 62
    47ae:	ca 54       	subi	r28, 0x4A	; 74
    47b0:	d0 40       	sbci	r29, 0x00	; 0
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	f8 94       	cli
    47b6:	de bf       	out	0x3e, r29	; 62
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	cd bf       	out	0x3d, r28	; 61
    47bc:	a8 2e       	mov	r10, r24
	volatile uint64_t sum[8] = {0,0,0,0,0,0,0,0};
    47be:	ce 01       	movw	r24, r28
    47c0:	01 96       	adiw	r24, 0x01	; 1
    47c2:	60 e0       	ldi	r22, 0x00	; 0
    47c4:	70 e0       	ldi	r23, 0x00	; 0
    47c6:	40 e4       	ldi	r20, 0x40	; 64
    47c8:	50 e0       	ldi	r21, 0x00	; 0
    47ca:	0e 94 b1 3f 	call	0x7f62	; 0x7f62 <memset>
	
	for(uint8_t i = 0; i < t; i++)
    47ce:	aa 20       	and	r10, r10
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <sens_calibrate+0x4e>
    47d2:	a8 c6       	rjmp	.+3408   	; 0x5524 <sens_calibrate+0xd9e>
    47d4:	99 24       	eor	r9, r9
    47d6:	ae 01       	movw	r20, r28
    47d8:	40 5c       	subi	r20, 0xC0	; 192
    47da:	5f 4f       	sbci	r21, 0xFF	; 255
    47dc:	2b 96       	adiw	r28, 0x0b	; 11
    47de:	5f af       	std	Y+63, r21	; 0x3f
    47e0:	4e af       	std	Y+62, r20	; 0x3e
    47e2:	2b 97       	sbiw	r28, 0x0b	; 11
}

// returns the number of ADC samples that have been collected, clear the counter by setting c to 0, or else use 0xFF for c
volatile inline uint8_t adc_rounds_cnt(uint8_t c)
{
	adc_new_cycle &= c;
    47e4:	80 91 8d 03 	lds	r24, 0x038D
    47e8:	80 93 8d 03 	sts	0x038D, r24
	return adc_new_cycle;
    47ec:	80 91 8d 03 	lds	r24, 0x038D
{
	volatile uint64_t sum[8] = {0,0,0,0,0,0,0,0};
	
	for(uint8_t i = 0; i < t; i++)
	{
		if (adc_rounds_cnt(0xFF) != 0)
    47f0:	88 23       	and	r24, r24
    47f2:	09 f4       	brne	.+2      	; 0x47f6 <sens_calibrate+0x70>
    47f4:	de c3       	rjmp	.+1980   	; 0x4fb2 <sens_calibrate+0x82c>
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    47f6:	f9 81       	ldd	r31, Y+1	; 0x01
    47f8:	7a 81       	ldd	r23, Y+2	; 0x02
    47fa:	1b 81       	ldd	r17, Y+3	; 0x03
    47fc:	fc 80       	ldd	r15, Y+4	; 0x04
    47fe:	ed 80       	ldd	r14, Y+5	; 0x05
    4800:	de 80       	ldd	r13, Y+6	; 0x06
    4802:	cf 80       	ldd	r12, Y+7	; 0x07
    4804:	b8 84       	ldd	r11, Y+8	; 0x08
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    4806:	80 91 4c 03 	lds	r24, 0x034C
    480a:	90 91 4d 03 	lds	r25, 0x034D
    480e:	a0 91 4e 03 	lds	r26, 0x034E
    4812:	b0 91 4f 03 	lds	r27, 0x034F
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    4816:	9c 01       	movw	r18, r24
    4818:	ad 01       	movw	r20, r26
    481a:	55 0f       	add	r21, r21
    481c:	22 0b       	sbc	r18, r18
    481e:	32 2f       	mov	r19, r18
    4820:	a9 01       	movw	r20, r18
    4822:	68 2f       	mov	r22, r24
    4824:	89 2f       	mov	r24, r25
    4826:	9a 2f       	mov	r25, r26
    4828:	ab 2f       	mov	r26, r27
    482a:	32 2f       	mov	r19, r18
    482c:	42 2f       	mov	r20, r18
    482e:	52 2f       	mov	r21, r18
    4830:	f6 0f       	add	r31, r22
    4832:	e1 e0       	ldi	r30, 0x01	; 1
    4834:	f6 17       	cp	r31, r22
    4836:	08 f0       	brcs	.+2      	; 0x483a <sens_calibrate+0xb4>
    4838:	e0 e0       	ldi	r30, 0x00	; 0
    483a:	68 2f       	mov	r22, r24
    483c:	67 0f       	add	r22, r23
    483e:	71 e0       	ldi	r23, 0x01	; 1
    4840:	68 17       	cp	r22, r24
    4842:	08 f0       	brcs	.+2      	; 0x4846 <sens_calibrate+0xc0>
    4844:	70 e0       	ldi	r23, 0x00	; 0
    4846:	0e 2f       	mov	r16, r30
    4848:	06 0f       	add	r16, r22
    484a:	e1 e0       	ldi	r30, 0x01	; 1
    484c:	06 17       	cp	r16, r22
    484e:	08 f0       	brcs	.+2      	; 0x4852 <sens_calibrate+0xcc>
    4850:	e0 e0       	ldi	r30, 0x00	; 0
    4852:	7e 2b       	or	r23, r30
    4854:	69 2f       	mov	r22, r25
    4856:	61 0f       	add	r22, r17
    4858:	e1 e0       	ldi	r30, 0x01	; 1
    485a:	69 17       	cp	r22, r25
    485c:	08 f0       	brcs	.+2      	; 0x4860 <sens_calibrate+0xda>
    485e:	e0 e0       	ldi	r30, 0x00	; 0
    4860:	17 2f       	mov	r17, r23
    4862:	16 0f       	add	r17, r22
    4864:	71 e0       	ldi	r23, 0x01	; 1
    4866:	16 17       	cp	r17, r22
    4868:	08 f0       	brcs	.+2      	; 0x486c <sens_calibrate+0xe6>
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	e7 2b       	or	r30, r23
    486e:	6a 2f       	mov	r22, r26
    4870:	6f 0d       	add	r22, r15
    4872:	71 e0       	ldi	r23, 0x01	; 1
    4874:	6a 17       	cp	r22, r26
    4876:	08 f0       	brcs	.+2      	; 0x487a <sens_calibrate+0xf4>
    4878:	70 e0       	ldi	r23, 0x00	; 0
    487a:	be 2f       	mov	r27, r30
    487c:	b6 0f       	add	r27, r22
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	b6 17       	cp	r27, r22
    4882:	08 f0       	brcs	.+2      	; 0x4886 <sens_calibrate+0x100>
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	78 2b       	or	r23, r24
    4888:	83 2f       	mov	r24, r19
    488a:	8e 0d       	add	r24, r14
    488c:	91 e0       	ldi	r25, 0x01	; 1
    488e:	83 17       	cp	r24, r19
    4890:	08 f0       	brcs	.+2      	; 0x4894 <sens_calibrate+0x10e>
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	a7 2f       	mov	r26, r23
    4896:	a8 0f       	add	r26, r24
    4898:	61 e0       	ldi	r22, 0x01	; 1
    489a:	a8 17       	cp	r26, r24
    489c:	08 f0       	brcs	.+2      	; 0x48a0 <sens_calibrate+0x11a>
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	96 2b       	or	r25, r22
    48a2:	84 2f       	mov	r24, r20
    48a4:	8d 0d       	add	r24, r13
    48a6:	61 e0       	ldi	r22, 0x01	; 1
    48a8:	84 17       	cp	r24, r20
    48aa:	08 f0       	brcs	.+2      	; 0x48ae <sens_calibrate+0x128>
    48ac:	60 e0       	ldi	r22, 0x00	; 0
    48ae:	e9 2f       	mov	r30, r25
    48b0:	e8 0f       	add	r30, r24
    48b2:	91 e0       	ldi	r25, 0x01	; 1
    48b4:	e8 17       	cp	r30, r24
    48b6:	08 f0       	brcs	.+2      	; 0x48ba <sens_calibrate+0x134>
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	69 2b       	or	r22, r25
    48bc:	85 2f       	mov	r24, r21
    48be:	8c 0d       	add	r24, r12
    48c0:	91 e0       	ldi	r25, 0x01	; 1
    48c2:	85 17       	cp	r24, r21
    48c4:	08 f0       	brcs	.+2      	; 0x48c8 <sens_calibrate+0x142>
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	76 2f       	mov	r23, r22
    48ca:	78 0f       	add	r23, r24
    48cc:	61 e0       	ldi	r22, 0x01	; 1
    48ce:	78 17       	cp	r23, r24
    48d0:	08 f0       	brcs	.+2      	; 0x48d4 <sens_calibrate+0x14e>
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	96 2b       	or	r25, r22
    48d6:	2b 0d       	add	r18, r11
    48d8:	92 0f       	add	r25, r18
    48da:	f9 83       	std	Y+1, r31	; 0x01
    48dc:	0a 83       	std	Y+2, r16	; 0x02
    48de:	1b 83       	std	Y+3, r17	; 0x03
    48e0:	bc 83       	std	Y+4, r27	; 0x04
    48e2:	ad 83       	std	Y+5, r26	; 0x05
    48e4:	ee 83       	std	Y+6, r30	; 0x06
    48e6:	7f 83       	std	Y+7, r23	; 0x07
    48e8:	98 87       	std	Y+8, r25	; 0x08
    48ea:	f9 85       	ldd	r31, Y+9	; 0x09
    48ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    48ee:	1b 85       	ldd	r17, Y+11	; 0x0b
    48f0:	fc 84       	ldd	r15, Y+12	; 0x0c
    48f2:	ed 84       	ldd	r14, Y+13	; 0x0d
    48f4:	de 84       	ldd	r13, Y+14	; 0x0e
    48f6:	cf 84       	ldd	r12, Y+15	; 0x0f
    48f8:	b8 88       	ldd	r11, Y+16	; 0x10
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    48fa:	80 91 50 03 	lds	r24, 0x0350
    48fe:	90 91 51 03 	lds	r25, 0x0351
    4902:	a0 91 52 03 	lds	r26, 0x0352
    4906:	b0 91 53 03 	lds	r27, 0x0353
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    490a:	9c 01       	movw	r18, r24
    490c:	ad 01       	movw	r20, r26
    490e:	55 0f       	add	r21, r21
    4910:	22 0b       	sbc	r18, r18
    4912:	32 2f       	mov	r19, r18
    4914:	a9 01       	movw	r20, r18
    4916:	68 2f       	mov	r22, r24
    4918:	89 2f       	mov	r24, r25
    491a:	9a 2f       	mov	r25, r26
    491c:	ab 2f       	mov	r26, r27
    491e:	32 2f       	mov	r19, r18
    4920:	42 2f       	mov	r20, r18
    4922:	52 2f       	mov	r21, r18
    4924:	f6 0f       	add	r31, r22
    4926:	e1 e0       	ldi	r30, 0x01	; 1
    4928:	f6 17       	cp	r31, r22
    492a:	08 f0       	brcs	.+2      	; 0x492e <sens_calibrate+0x1a8>
    492c:	e0 e0       	ldi	r30, 0x00	; 0
    492e:	68 2f       	mov	r22, r24
    4930:	67 0f       	add	r22, r23
    4932:	71 e0       	ldi	r23, 0x01	; 1
    4934:	68 17       	cp	r22, r24
    4936:	08 f0       	brcs	.+2      	; 0x493a <sens_calibrate+0x1b4>
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	0e 2f       	mov	r16, r30
    493c:	06 0f       	add	r16, r22
    493e:	e1 e0       	ldi	r30, 0x01	; 1
    4940:	06 17       	cp	r16, r22
    4942:	08 f0       	brcs	.+2      	; 0x4946 <sens_calibrate+0x1c0>
    4944:	e0 e0       	ldi	r30, 0x00	; 0
    4946:	7e 2b       	or	r23, r30
    4948:	69 2f       	mov	r22, r25
    494a:	61 0f       	add	r22, r17
    494c:	e1 e0       	ldi	r30, 0x01	; 1
    494e:	69 17       	cp	r22, r25
    4950:	08 f0       	brcs	.+2      	; 0x4954 <sens_calibrate+0x1ce>
    4952:	e0 e0       	ldi	r30, 0x00	; 0
    4954:	17 2f       	mov	r17, r23
    4956:	16 0f       	add	r17, r22
    4958:	71 e0       	ldi	r23, 0x01	; 1
    495a:	16 17       	cp	r17, r22
    495c:	08 f0       	brcs	.+2      	; 0x4960 <sens_calibrate+0x1da>
    495e:	70 e0       	ldi	r23, 0x00	; 0
    4960:	e7 2b       	or	r30, r23
    4962:	6a 2f       	mov	r22, r26
    4964:	6f 0d       	add	r22, r15
    4966:	71 e0       	ldi	r23, 0x01	; 1
    4968:	6a 17       	cp	r22, r26
    496a:	08 f0       	brcs	.+2      	; 0x496e <sens_calibrate+0x1e8>
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	be 2f       	mov	r27, r30
    4970:	b6 0f       	add	r27, r22
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	b6 17       	cp	r27, r22
    4976:	08 f0       	brcs	.+2      	; 0x497a <sens_calibrate+0x1f4>
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	78 2b       	or	r23, r24
    497c:	83 2f       	mov	r24, r19
    497e:	8e 0d       	add	r24, r14
    4980:	91 e0       	ldi	r25, 0x01	; 1
    4982:	83 17       	cp	r24, r19
    4984:	08 f0       	brcs	.+2      	; 0x4988 <sens_calibrate+0x202>
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	a7 2f       	mov	r26, r23
    498a:	a8 0f       	add	r26, r24
    498c:	61 e0       	ldi	r22, 0x01	; 1
    498e:	a8 17       	cp	r26, r24
    4990:	08 f0       	brcs	.+2      	; 0x4994 <sens_calibrate+0x20e>
    4992:	60 e0       	ldi	r22, 0x00	; 0
    4994:	96 2b       	or	r25, r22
    4996:	84 2f       	mov	r24, r20
    4998:	8d 0d       	add	r24, r13
    499a:	61 e0       	ldi	r22, 0x01	; 1
    499c:	84 17       	cp	r24, r20
    499e:	08 f0       	brcs	.+2      	; 0x49a2 <sens_calibrate+0x21c>
    49a0:	60 e0       	ldi	r22, 0x00	; 0
    49a2:	e9 2f       	mov	r30, r25
    49a4:	e8 0f       	add	r30, r24
    49a6:	91 e0       	ldi	r25, 0x01	; 1
    49a8:	e8 17       	cp	r30, r24
    49aa:	08 f0       	brcs	.+2      	; 0x49ae <sens_calibrate+0x228>
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	69 2b       	or	r22, r25
    49b0:	85 2f       	mov	r24, r21
    49b2:	8c 0d       	add	r24, r12
    49b4:	91 e0       	ldi	r25, 0x01	; 1
    49b6:	85 17       	cp	r24, r21
    49b8:	08 f0       	brcs	.+2      	; 0x49bc <sens_calibrate+0x236>
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	76 2f       	mov	r23, r22
    49be:	78 0f       	add	r23, r24
    49c0:	61 e0       	ldi	r22, 0x01	; 1
    49c2:	78 17       	cp	r23, r24
    49c4:	08 f0       	brcs	.+2      	; 0x49c8 <sens_calibrate+0x242>
    49c6:	60 e0       	ldi	r22, 0x00	; 0
    49c8:	96 2b       	or	r25, r22
    49ca:	2b 0d       	add	r18, r11
    49cc:	92 0f       	add	r25, r18
    49ce:	f9 87       	std	Y+9, r31	; 0x09
    49d0:	0a 87       	std	Y+10, r16	; 0x0a
    49d2:	1b 87       	std	Y+11, r17	; 0x0b
    49d4:	bc 87       	std	Y+12, r27	; 0x0c
    49d6:	ad 87       	std	Y+13, r26	; 0x0d
    49d8:	ee 87       	std	Y+14, r30	; 0x0e
    49da:	7f 87       	std	Y+15, r23	; 0x0f
    49dc:	98 8b       	std	Y+16, r25	; 0x10
    49de:	f9 89       	ldd	r31, Y+17	; 0x11
    49e0:	7a 89       	ldd	r23, Y+18	; 0x12
    49e2:	1b 89       	ldd	r17, Y+19	; 0x13
    49e4:	fc 88       	ldd	r15, Y+20	; 0x14
    49e6:	ed 88       	ldd	r14, Y+21	; 0x15
    49e8:	de 88       	ldd	r13, Y+22	; 0x16
    49ea:	cf 88       	ldd	r12, Y+23	; 0x17
    49ec:	b8 8c       	ldd	r11, Y+24	; 0x18
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    49ee:	80 91 54 03 	lds	r24, 0x0354
    49f2:	90 91 55 03 	lds	r25, 0x0355
    49f6:	a0 91 56 03 	lds	r26, 0x0356
    49fa:	b0 91 57 03 	lds	r27, 0x0357
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    49fe:	9c 01       	movw	r18, r24
    4a00:	ad 01       	movw	r20, r26
    4a02:	55 0f       	add	r21, r21
    4a04:	22 0b       	sbc	r18, r18
    4a06:	32 2f       	mov	r19, r18
    4a08:	a9 01       	movw	r20, r18
    4a0a:	68 2f       	mov	r22, r24
    4a0c:	89 2f       	mov	r24, r25
    4a0e:	9a 2f       	mov	r25, r26
    4a10:	ab 2f       	mov	r26, r27
    4a12:	32 2f       	mov	r19, r18
    4a14:	42 2f       	mov	r20, r18
    4a16:	52 2f       	mov	r21, r18
    4a18:	f6 0f       	add	r31, r22
    4a1a:	e1 e0       	ldi	r30, 0x01	; 1
    4a1c:	f6 17       	cp	r31, r22
    4a1e:	08 f0       	brcs	.+2      	; 0x4a22 <sens_calibrate+0x29c>
    4a20:	e0 e0       	ldi	r30, 0x00	; 0
    4a22:	68 2f       	mov	r22, r24
    4a24:	67 0f       	add	r22, r23
    4a26:	71 e0       	ldi	r23, 0x01	; 1
    4a28:	68 17       	cp	r22, r24
    4a2a:	08 f0       	brcs	.+2      	; 0x4a2e <sens_calibrate+0x2a8>
    4a2c:	70 e0       	ldi	r23, 0x00	; 0
    4a2e:	0e 2f       	mov	r16, r30
    4a30:	06 0f       	add	r16, r22
    4a32:	e1 e0       	ldi	r30, 0x01	; 1
    4a34:	06 17       	cp	r16, r22
    4a36:	08 f0       	brcs	.+2      	; 0x4a3a <sens_calibrate+0x2b4>
    4a38:	e0 e0       	ldi	r30, 0x00	; 0
    4a3a:	7e 2b       	or	r23, r30
    4a3c:	69 2f       	mov	r22, r25
    4a3e:	61 0f       	add	r22, r17
    4a40:	e1 e0       	ldi	r30, 0x01	; 1
    4a42:	69 17       	cp	r22, r25
    4a44:	08 f0       	brcs	.+2      	; 0x4a48 <sens_calibrate+0x2c2>
    4a46:	e0 e0       	ldi	r30, 0x00	; 0
    4a48:	17 2f       	mov	r17, r23
    4a4a:	16 0f       	add	r17, r22
    4a4c:	71 e0       	ldi	r23, 0x01	; 1
    4a4e:	16 17       	cp	r17, r22
    4a50:	08 f0       	brcs	.+2      	; 0x4a54 <sens_calibrate+0x2ce>
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	e7 2b       	or	r30, r23
    4a56:	6a 2f       	mov	r22, r26
    4a58:	6f 0d       	add	r22, r15
    4a5a:	71 e0       	ldi	r23, 0x01	; 1
    4a5c:	6a 17       	cp	r22, r26
    4a5e:	08 f0       	brcs	.+2      	; 0x4a62 <sens_calibrate+0x2dc>
    4a60:	70 e0       	ldi	r23, 0x00	; 0
    4a62:	be 2f       	mov	r27, r30
    4a64:	b6 0f       	add	r27, r22
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	b6 17       	cp	r27, r22
    4a6a:	08 f0       	brcs	.+2      	; 0x4a6e <sens_calibrate+0x2e8>
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	78 2b       	or	r23, r24
    4a70:	83 2f       	mov	r24, r19
    4a72:	8e 0d       	add	r24, r14
    4a74:	91 e0       	ldi	r25, 0x01	; 1
    4a76:	83 17       	cp	r24, r19
    4a78:	08 f0       	brcs	.+2      	; 0x4a7c <sens_calibrate+0x2f6>
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	a7 2f       	mov	r26, r23
    4a7e:	a8 0f       	add	r26, r24
    4a80:	61 e0       	ldi	r22, 0x01	; 1
    4a82:	a8 17       	cp	r26, r24
    4a84:	08 f0       	brcs	.+2      	; 0x4a88 <sens_calibrate+0x302>
    4a86:	60 e0       	ldi	r22, 0x00	; 0
    4a88:	96 2b       	or	r25, r22
    4a8a:	84 2f       	mov	r24, r20
    4a8c:	8d 0d       	add	r24, r13
    4a8e:	61 e0       	ldi	r22, 0x01	; 1
    4a90:	84 17       	cp	r24, r20
    4a92:	08 f0       	brcs	.+2      	; 0x4a96 <sens_calibrate+0x310>
    4a94:	60 e0       	ldi	r22, 0x00	; 0
    4a96:	e9 2f       	mov	r30, r25
    4a98:	e8 0f       	add	r30, r24
    4a9a:	91 e0       	ldi	r25, 0x01	; 1
    4a9c:	e8 17       	cp	r30, r24
    4a9e:	08 f0       	brcs	.+2      	; 0x4aa2 <sens_calibrate+0x31c>
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	69 2b       	or	r22, r25
    4aa4:	85 2f       	mov	r24, r21
    4aa6:	8c 0d       	add	r24, r12
    4aa8:	91 e0       	ldi	r25, 0x01	; 1
    4aaa:	85 17       	cp	r24, r21
    4aac:	08 f0       	brcs	.+2      	; 0x4ab0 <sens_calibrate+0x32a>
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	76 2f       	mov	r23, r22
    4ab2:	78 0f       	add	r23, r24
    4ab4:	61 e0       	ldi	r22, 0x01	; 1
    4ab6:	78 17       	cp	r23, r24
    4ab8:	08 f0       	brcs	.+2      	; 0x4abc <sens_calibrate+0x336>
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	96 2b       	or	r25, r22
    4abe:	2b 0d       	add	r18, r11
    4ac0:	92 0f       	add	r25, r18
    4ac2:	f9 8b       	std	Y+17, r31	; 0x11
    4ac4:	0a 8b       	std	Y+18, r16	; 0x12
    4ac6:	1b 8b       	std	Y+19, r17	; 0x13
    4ac8:	bc 8b       	std	Y+20, r27	; 0x14
    4aca:	ad 8b       	std	Y+21, r26	; 0x15
    4acc:	ee 8b       	std	Y+22, r30	; 0x16
    4ace:	7f 8b       	std	Y+23, r23	; 0x17
    4ad0:	98 8f       	std	Y+24, r25	; 0x18
    4ad2:	f9 8d       	ldd	r31, Y+25	; 0x19
    4ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ad6:	1b 8d       	ldd	r17, Y+27	; 0x1b
    4ad8:	fc 8c       	ldd	r15, Y+28	; 0x1c
    4ada:	ed 8c       	ldd	r14, Y+29	; 0x1d
    4adc:	de 8c       	ldd	r13, Y+30	; 0x1e
    4ade:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4ae0:	b8 a0       	ldd	r11, Y+32	; 0x20
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    4ae2:	80 91 58 03 	lds	r24, 0x0358
    4ae6:	90 91 59 03 	lds	r25, 0x0359
    4aea:	a0 91 5a 03 	lds	r26, 0x035A
    4aee:	b0 91 5b 03 	lds	r27, 0x035B
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    4af2:	9c 01       	movw	r18, r24
    4af4:	ad 01       	movw	r20, r26
    4af6:	55 0f       	add	r21, r21
    4af8:	22 0b       	sbc	r18, r18
    4afa:	32 2f       	mov	r19, r18
    4afc:	a9 01       	movw	r20, r18
    4afe:	68 2f       	mov	r22, r24
    4b00:	89 2f       	mov	r24, r25
    4b02:	9a 2f       	mov	r25, r26
    4b04:	ab 2f       	mov	r26, r27
    4b06:	32 2f       	mov	r19, r18
    4b08:	42 2f       	mov	r20, r18
    4b0a:	52 2f       	mov	r21, r18
    4b0c:	f6 0f       	add	r31, r22
    4b0e:	e1 e0       	ldi	r30, 0x01	; 1
    4b10:	f6 17       	cp	r31, r22
    4b12:	08 f0       	brcs	.+2      	; 0x4b16 <sens_calibrate+0x390>
    4b14:	e0 e0       	ldi	r30, 0x00	; 0
    4b16:	68 2f       	mov	r22, r24
    4b18:	67 0f       	add	r22, r23
    4b1a:	71 e0       	ldi	r23, 0x01	; 1
    4b1c:	68 17       	cp	r22, r24
    4b1e:	08 f0       	brcs	.+2      	; 0x4b22 <sens_calibrate+0x39c>
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	0e 2f       	mov	r16, r30
    4b24:	06 0f       	add	r16, r22
    4b26:	e1 e0       	ldi	r30, 0x01	; 1
    4b28:	06 17       	cp	r16, r22
    4b2a:	08 f0       	brcs	.+2      	; 0x4b2e <sens_calibrate+0x3a8>
    4b2c:	e0 e0       	ldi	r30, 0x00	; 0
    4b2e:	7e 2b       	or	r23, r30
    4b30:	69 2f       	mov	r22, r25
    4b32:	61 0f       	add	r22, r17
    4b34:	e1 e0       	ldi	r30, 0x01	; 1
    4b36:	69 17       	cp	r22, r25
    4b38:	08 f0       	brcs	.+2      	; 0x4b3c <sens_calibrate+0x3b6>
    4b3a:	e0 e0       	ldi	r30, 0x00	; 0
    4b3c:	17 2f       	mov	r17, r23
    4b3e:	16 0f       	add	r17, r22
    4b40:	71 e0       	ldi	r23, 0x01	; 1
    4b42:	16 17       	cp	r17, r22
    4b44:	08 f0       	brcs	.+2      	; 0x4b48 <sens_calibrate+0x3c2>
    4b46:	70 e0       	ldi	r23, 0x00	; 0
    4b48:	e7 2b       	or	r30, r23
    4b4a:	6a 2f       	mov	r22, r26
    4b4c:	6f 0d       	add	r22, r15
    4b4e:	71 e0       	ldi	r23, 0x01	; 1
    4b50:	6a 17       	cp	r22, r26
    4b52:	08 f0       	brcs	.+2      	; 0x4b56 <sens_calibrate+0x3d0>
    4b54:	70 e0       	ldi	r23, 0x00	; 0
    4b56:	be 2f       	mov	r27, r30
    4b58:	b6 0f       	add	r27, r22
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	b6 17       	cp	r27, r22
    4b5e:	08 f0       	brcs	.+2      	; 0x4b62 <sens_calibrate+0x3dc>
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	78 2b       	or	r23, r24
    4b64:	83 2f       	mov	r24, r19
    4b66:	8e 0d       	add	r24, r14
    4b68:	91 e0       	ldi	r25, 0x01	; 1
    4b6a:	83 17       	cp	r24, r19
    4b6c:	08 f0       	brcs	.+2      	; 0x4b70 <sens_calibrate+0x3ea>
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	a7 2f       	mov	r26, r23
    4b72:	a8 0f       	add	r26, r24
    4b74:	61 e0       	ldi	r22, 0x01	; 1
    4b76:	a8 17       	cp	r26, r24
    4b78:	08 f0       	brcs	.+2      	; 0x4b7c <sens_calibrate+0x3f6>
    4b7a:	60 e0       	ldi	r22, 0x00	; 0
    4b7c:	96 2b       	or	r25, r22
    4b7e:	84 2f       	mov	r24, r20
    4b80:	8d 0d       	add	r24, r13
    4b82:	61 e0       	ldi	r22, 0x01	; 1
    4b84:	84 17       	cp	r24, r20
    4b86:	08 f0       	brcs	.+2      	; 0x4b8a <sens_calibrate+0x404>
    4b88:	60 e0       	ldi	r22, 0x00	; 0
    4b8a:	e9 2f       	mov	r30, r25
    4b8c:	e8 0f       	add	r30, r24
    4b8e:	91 e0       	ldi	r25, 0x01	; 1
    4b90:	e8 17       	cp	r30, r24
    4b92:	08 f0       	brcs	.+2      	; 0x4b96 <sens_calibrate+0x410>
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	69 2b       	or	r22, r25
    4b98:	85 2f       	mov	r24, r21
    4b9a:	8c 0d       	add	r24, r12
    4b9c:	91 e0       	ldi	r25, 0x01	; 1
    4b9e:	85 17       	cp	r24, r21
    4ba0:	08 f0       	brcs	.+2      	; 0x4ba4 <sens_calibrate+0x41e>
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	76 2f       	mov	r23, r22
    4ba6:	78 0f       	add	r23, r24
    4ba8:	61 e0       	ldi	r22, 0x01	; 1
    4baa:	78 17       	cp	r23, r24
    4bac:	08 f0       	brcs	.+2      	; 0x4bb0 <sens_calibrate+0x42a>
    4bae:	60 e0       	ldi	r22, 0x00	; 0
    4bb0:	96 2b       	or	r25, r22
    4bb2:	2b 0d       	add	r18, r11
    4bb4:	92 0f       	add	r25, r18
    4bb6:	f9 8f       	std	Y+25, r31	; 0x19
    4bb8:	0a 8f       	std	Y+26, r16	; 0x1a
    4bba:	1b 8f       	std	Y+27, r17	; 0x1b
    4bbc:	bc 8f       	std	Y+28, r27	; 0x1c
    4bbe:	ad 8f       	std	Y+29, r26	; 0x1d
    4bc0:	ee 8f       	std	Y+30, r30	; 0x1e
    4bc2:	7f 8f       	std	Y+31, r23	; 0x1f
    4bc4:	98 a3       	std	Y+32, r25	; 0x20
    4bc6:	f9 a1       	ldd	r31, Y+33	; 0x21
    4bc8:	7a a1       	ldd	r23, Y+34	; 0x22
    4bca:	1b a1       	ldd	r17, Y+35	; 0x23
    4bcc:	fc a0       	ldd	r15, Y+36	; 0x24
    4bce:	ed a0       	ldd	r14, Y+37	; 0x25
    4bd0:	de a0       	ldd	r13, Y+38	; 0x26
    4bd2:	cf a0       	ldd	r12, Y+39	; 0x27
    4bd4:	b8 a4       	ldd	r11, Y+40	; 0x28
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    4bd6:	80 91 5c 03 	lds	r24, 0x035C
    4bda:	90 91 5d 03 	lds	r25, 0x035D
    4bde:	a0 91 5e 03 	lds	r26, 0x035E
    4be2:	b0 91 5f 03 	lds	r27, 0x035F
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    4be6:	9c 01       	movw	r18, r24
    4be8:	ad 01       	movw	r20, r26
    4bea:	55 0f       	add	r21, r21
    4bec:	22 0b       	sbc	r18, r18
    4bee:	32 2f       	mov	r19, r18
    4bf0:	a9 01       	movw	r20, r18
    4bf2:	68 2f       	mov	r22, r24
    4bf4:	89 2f       	mov	r24, r25
    4bf6:	9a 2f       	mov	r25, r26
    4bf8:	ab 2f       	mov	r26, r27
    4bfa:	32 2f       	mov	r19, r18
    4bfc:	42 2f       	mov	r20, r18
    4bfe:	52 2f       	mov	r21, r18
    4c00:	f6 0f       	add	r31, r22
    4c02:	e1 e0       	ldi	r30, 0x01	; 1
    4c04:	f6 17       	cp	r31, r22
    4c06:	08 f0       	brcs	.+2      	; 0x4c0a <sens_calibrate+0x484>
    4c08:	e0 e0       	ldi	r30, 0x00	; 0
    4c0a:	68 2f       	mov	r22, r24
    4c0c:	67 0f       	add	r22, r23
    4c0e:	71 e0       	ldi	r23, 0x01	; 1
    4c10:	68 17       	cp	r22, r24
    4c12:	08 f0       	brcs	.+2      	; 0x4c16 <sens_calibrate+0x490>
    4c14:	70 e0       	ldi	r23, 0x00	; 0
    4c16:	0e 2f       	mov	r16, r30
    4c18:	06 0f       	add	r16, r22
    4c1a:	e1 e0       	ldi	r30, 0x01	; 1
    4c1c:	06 17       	cp	r16, r22
    4c1e:	08 f0       	brcs	.+2      	; 0x4c22 <sens_calibrate+0x49c>
    4c20:	e0 e0       	ldi	r30, 0x00	; 0
    4c22:	7e 2b       	or	r23, r30
    4c24:	69 2f       	mov	r22, r25
    4c26:	61 0f       	add	r22, r17
    4c28:	e1 e0       	ldi	r30, 0x01	; 1
    4c2a:	69 17       	cp	r22, r25
    4c2c:	08 f0       	brcs	.+2      	; 0x4c30 <sens_calibrate+0x4aa>
    4c2e:	e0 e0       	ldi	r30, 0x00	; 0
    4c30:	17 2f       	mov	r17, r23
    4c32:	16 0f       	add	r17, r22
    4c34:	71 e0       	ldi	r23, 0x01	; 1
    4c36:	16 17       	cp	r17, r22
    4c38:	08 f0       	brcs	.+2      	; 0x4c3c <sens_calibrate+0x4b6>
    4c3a:	70 e0       	ldi	r23, 0x00	; 0
    4c3c:	e7 2b       	or	r30, r23
    4c3e:	6a 2f       	mov	r22, r26
    4c40:	6f 0d       	add	r22, r15
    4c42:	71 e0       	ldi	r23, 0x01	; 1
    4c44:	6a 17       	cp	r22, r26
    4c46:	08 f0       	brcs	.+2      	; 0x4c4a <sens_calibrate+0x4c4>
    4c48:	70 e0       	ldi	r23, 0x00	; 0
    4c4a:	be 2f       	mov	r27, r30
    4c4c:	b6 0f       	add	r27, r22
    4c4e:	81 e0       	ldi	r24, 0x01	; 1
    4c50:	b6 17       	cp	r27, r22
    4c52:	08 f0       	brcs	.+2      	; 0x4c56 <sens_calibrate+0x4d0>
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	78 2b       	or	r23, r24
    4c58:	83 2f       	mov	r24, r19
    4c5a:	8e 0d       	add	r24, r14
    4c5c:	91 e0       	ldi	r25, 0x01	; 1
    4c5e:	83 17       	cp	r24, r19
    4c60:	08 f0       	brcs	.+2      	; 0x4c64 <sens_calibrate+0x4de>
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	a7 2f       	mov	r26, r23
    4c66:	a8 0f       	add	r26, r24
    4c68:	61 e0       	ldi	r22, 0x01	; 1
    4c6a:	a8 17       	cp	r26, r24
    4c6c:	08 f0       	brcs	.+2      	; 0x4c70 <sens_calibrate+0x4ea>
    4c6e:	60 e0       	ldi	r22, 0x00	; 0
    4c70:	96 2b       	or	r25, r22
    4c72:	84 2f       	mov	r24, r20
    4c74:	8d 0d       	add	r24, r13
    4c76:	61 e0       	ldi	r22, 0x01	; 1
    4c78:	84 17       	cp	r24, r20
    4c7a:	08 f0       	brcs	.+2      	; 0x4c7e <sens_calibrate+0x4f8>
    4c7c:	60 e0       	ldi	r22, 0x00	; 0
    4c7e:	e9 2f       	mov	r30, r25
    4c80:	e8 0f       	add	r30, r24
    4c82:	91 e0       	ldi	r25, 0x01	; 1
    4c84:	e8 17       	cp	r30, r24
    4c86:	08 f0       	brcs	.+2      	; 0x4c8a <sens_calibrate+0x504>
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	69 2b       	or	r22, r25
    4c8c:	85 2f       	mov	r24, r21
    4c8e:	8c 0d       	add	r24, r12
    4c90:	91 e0       	ldi	r25, 0x01	; 1
    4c92:	85 17       	cp	r24, r21
    4c94:	08 f0       	brcs	.+2      	; 0x4c98 <sens_calibrate+0x512>
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	76 2f       	mov	r23, r22
    4c9a:	78 0f       	add	r23, r24
    4c9c:	61 e0       	ldi	r22, 0x01	; 1
    4c9e:	78 17       	cp	r23, r24
    4ca0:	08 f0       	brcs	.+2      	; 0x4ca4 <sens_calibrate+0x51e>
    4ca2:	60 e0       	ldi	r22, 0x00	; 0
    4ca4:	96 2b       	or	r25, r22
    4ca6:	2b 0d       	add	r18, r11
    4ca8:	92 0f       	add	r25, r18
    4caa:	f9 a3       	std	Y+33, r31	; 0x21
    4cac:	0a a3       	std	Y+34, r16	; 0x22
    4cae:	1b a3       	std	Y+35, r17	; 0x23
    4cb0:	bc a3       	std	Y+36, r27	; 0x24
    4cb2:	ad a3       	std	Y+37, r26	; 0x25
    4cb4:	ee a3       	std	Y+38, r30	; 0x26
    4cb6:	7f a3       	std	Y+39, r23	; 0x27
    4cb8:	98 a7       	std	Y+40, r25	; 0x28
    4cba:	f9 a5       	ldd	r31, Y+41	; 0x29
    4cbc:	7a a5       	ldd	r23, Y+42	; 0x2a
    4cbe:	1b a5       	ldd	r17, Y+43	; 0x2b
    4cc0:	fc a4       	ldd	r15, Y+44	; 0x2c
    4cc2:	ed a4       	ldd	r14, Y+45	; 0x2d
    4cc4:	de a4       	ldd	r13, Y+46	; 0x2e
    4cc6:	cf a4       	ldd	r12, Y+47	; 0x2f
    4cc8:	b8 a8       	ldd	r11, Y+48	; 0x30
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    4cca:	80 91 60 03 	lds	r24, 0x0360
    4cce:	90 91 61 03 	lds	r25, 0x0361
    4cd2:	a0 91 62 03 	lds	r26, 0x0362
    4cd6:	b0 91 63 03 	lds	r27, 0x0363
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    4cda:	9c 01       	movw	r18, r24
    4cdc:	ad 01       	movw	r20, r26
    4cde:	55 0f       	add	r21, r21
    4ce0:	22 0b       	sbc	r18, r18
    4ce2:	32 2f       	mov	r19, r18
    4ce4:	a9 01       	movw	r20, r18
    4ce6:	68 2f       	mov	r22, r24
    4ce8:	89 2f       	mov	r24, r25
    4cea:	9a 2f       	mov	r25, r26
    4cec:	ab 2f       	mov	r26, r27
    4cee:	32 2f       	mov	r19, r18
    4cf0:	42 2f       	mov	r20, r18
    4cf2:	52 2f       	mov	r21, r18
    4cf4:	f6 0f       	add	r31, r22
    4cf6:	e1 e0       	ldi	r30, 0x01	; 1
    4cf8:	f6 17       	cp	r31, r22
    4cfa:	08 f0       	brcs	.+2      	; 0x4cfe <sens_calibrate+0x578>
    4cfc:	e0 e0       	ldi	r30, 0x00	; 0
    4cfe:	68 2f       	mov	r22, r24
    4d00:	67 0f       	add	r22, r23
    4d02:	71 e0       	ldi	r23, 0x01	; 1
    4d04:	68 17       	cp	r22, r24
    4d06:	08 f0       	brcs	.+2      	; 0x4d0a <sens_calibrate+0x584>
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	0e 2f       	mov	r16, r30
    4d0c:	06 0f       	add	r16, r22
    4d0e:	e1 e0       	ldi	r30, 0x01	; 1
    4d10:	06 17       	cp	r16, r22
    4d12:	08 f0       	brcs	.+2      	; 0x4d16 <sens_calibrate+0x590>
    4d14:	e0 e0       	ldi	r30, 0x00	; 0
    4d16:	7e 2b       	or	r23, r30
    4d18:	69 2f       	mov	r22, r25
    4d1a:	61 0f       	add	r22, r17
    4d1c:	e1 e0       	ldi	r30, 0x01	; 1
    4d1e:	69 17       	cp	r22, r25
    4d20:	08 f0       	brcs	.+2      	; 0x4d24 <sens_calibrate+0x59e>
    4d22:	e0 e0       	ldi	r30, 0x00	; 0
    4d24:	17 2f       	mov	r17, r23
    4d26:	16 0f       	add	r17, r22
    4d28:	71 e0       	ldi	r23, 0x01	; 1
    4d2a:	16 17       	cp	r17, r22
    4d2c:	08 f0       	brcs	.+2      	; 0x4d30 <sens_calibrate+0x5aa>
    4d2e:	70 e0       	ldi	r23, 0x00	; 0
    4d30:	e7 2b       	or	r30, r23
    4d32:	6a 2f       	mov	r22, r26
    4d34:	6f 0d       	add	r22, r15
    4d36:	71 e0       	ldi	r23, 0x01	; 1
    4d38:	6a 17       	cp	r22, r26
    4d3a:	08 f0       	brcs	.+2      	; 0x4d3e <sens_calibrate+0x5b8>
    4d3c:	70 e0       	ldi	r23, 0x00	; 0
    4d3e:	be 2f       	mov	r27, r30
    4d40:	b6 0f       	add	r27, r22
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	b6 17       	cp	r27, r22
    4d46:	08 f0       	brcs	.+2      	; 0x4d4a <sens_calibrate+0x5c4>
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	78 2b       	or	r23, r24
    4d4c:	83 2f       	mov	r24, r19
    4d4e:	8e 0d       	add	r24, r14
    4d50:	91 e0       	ldi	r25, 0x01	; 1
    4d52:	83 17       	cp	r24, r19
    4d54:	08 f0       	brcs	.+2      	; 0x4d58 <sens_calibrate+0x5d2>
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	a7 2f       	mov	r26, r23
    4d5a:	a8 0f       	add	r26, r24
    4d5c:	61 e0       	ldi	r22, 0x01	; 1
    4d5e:	a8 17       	cp	r26, r24
    4d60:	08 f0       	brcs	.+2      	; 0x4d64 <sens_calibrate+0x5de>
    4d62:	60 e0       	ldi	r22, 0x00	; 0
    4d64:	96 2b       	or	r25, r22
    4d66:	84 2f       	mov	r24, r20
    4d68:	8d 0d       	add	r24, r13
    4d6a:	61 e0       	ldi	r22, 0x01	; 1
    4d6c:	84 17       	cp	r24, r20
    4d6e:	08 f0       	brcs	.+2      	; 0x4d72 <sens_calibrate+0x5ec>
    4d70:	60 e0       	ldi	r22, 0x00	; 0
    4d72:	e9 2f       	mov	r30, r25
    4d74:	e8 0f       	add	r30, r24
    4d76:	91 e0       	ldi	r25, 0x01	; 1
    4d78:	e8 17       	cp	r30, r24
    4d7a:	08 f0       	brcs	.+2      	; 0x4d7e <sens_calibrate+0x5f8>
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	69 2b       	or	r22, r25
    4d80:	85 2f       	mov	r24, r21
    4d82:	8c 0d       	add	r24, r12
    4d84:	91 e0       	ldi	r25, 0x01	; 1
    4d86:	85 17       	cp	r24, r21
    4d88:	08 f0       	brcs	.+2      	; 0x4d8c <sens_calibrate+0x606>
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	76 2f       	mov	r23, r22
    4d8e:	78 0f       	add	r23, r24
    4d90:	61 e0       	ldi	r22, 0x01	; 1
    4d92:	78 17       	cp	r23, r24
    4d94:	08 f0       	brcs	.+2      	; 0x4d98 <sens_calibrate+0x612>
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	96 2b       	or	r25, r22
    4d9a:	2b 0d       	add	r18, r11
    4d9c:	92 0f       	add	r25, r18
    4d9e:	f9 a7       	std	Y+41, r31	; 0x29
    4da0:	0a a7       	std	Y+42, r16	; 0x2a
    4da2:	1b a7       	std	Y+43, r17	; 0x2b
    4da4:	bc a7       	std	Y+44, r27	; 0x2c
    4da6:	ad a7       	std	Y+45, r26	; 0x2d
    4da8:	ee a7       	std	Y+46, r30	; 0x2e
    4daa:	7f a7       	std	Y+47, r23	; 0x2f
    4dac:	98 ab       	std	Y+48, r25	; 0x30
    4dae:	f9 a9       	ldd	r31, Y+49	; 0x31
    4db0:	7a a9       	ldd	r23, Y+50	; 0x32
    4db2:	1b a9       	ldd	r17, Y+51	; 0x33
    4db4:	fc a8       	ldd	r15, Y+52	; 0x34
    4db6:	ed a8       	ldd	r14, Y+53	; 0x35
    4db8:	de a8       	ldd	r13, Y+54	; 0x36
    4dba:	cf a8       	ldd	r12, Y+55	; 0x37
    4dbc:	b8 ac       	ldd	r11, Y+56	; 0x38
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    4dbe:	80 91 64 03 	lds	r24, 0x0364
    4dc2:	90 91 65 03 	lds	r25, 0x0365
    4dc6:	a0 91 66 03 	lds	r26, 0x0366
    4dca:	b0 91 67 03 	lds	r27, 0x0367
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    4dce:	9c 01       	movw	r18, r24
    4dd0:	ad 01       	movw	r20, r26
    4dd2:	55 0f       	add	r21, r21
    4dd4:	22 0b       	sbc	r18, r18
    4dd6:	32 2f       	mov	r19, r18
    4dd8:	a9 01       	movw	r20, r18
    4dda:	68 2f       	mov	r22, r24
    4ddc:	89 2f       	mov	r24, r25
    4dde:	9a 2f       	mov	r25, r26
    4de0:	ab 2f       	mov	r26, r27
    4de2:	32 2f       	mov	r19, r18
    4de4:	42 2f       	mov	r20, r18
    4de6:	52 2f       	mov	r21, r18
    4de8:	f6 0f       	add	r31, r22
    4dea:	e1 e0       	ldi	r30, 0x01	; 1
    4dec:	f6 17       	cp	r31, r22
    4dee:	08 f0       	brcs	.+2      	; 0x4df2 <sens_calibrate+0x66c>
    4df0:	e0 e0       	ldi	r30, 0x00	; 0
    4df2:	68 2f       	mov	r22, r24
    4df4:	67 0f       	add	r22, r23
    4df6:	71 e0       	ldi	r23, 0x01	; 1
    4df8:	68 17       	cp	r22, r24
    4dfa:	08 f0       	brcs	.+2      	; 0x4dfe <sens_calibrate+0x678>
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	0e 2f       	mov	r16, r30
    4e00:	06 0f       	add	r16, r22
    4e02:	e1 e0       	ldi	r30, 0x01	; 1
    4e04:	06 17       	cp	r16, r22
    4e06:	08 f0       	brcs	.+2      	; 0x4e0a <sens_calibrate+0x684>
    4e08:	e0 e0       	ldi	r30, 0x00	; 0
    4e0a:	7e 2b       	or	r23, r30
    4e0c:	69 2f       	mov	r22, r25
    4e0e:	61 0f       	add	r22, r17
    4e10:	e1 e0       	ldi	r30, 0x01	; 1
    4e12:	69 17       	cp	r22, r25
    4e14:	08 f0       	brcs	.+2      	; 0x4e18 <sens_calibrate+0x692>
    4e16:	e0 e0       	ldi	r30, 0x00	; 0
    4e18:	17 2f       	mov	r17, r23
    4e1a:	16 0f       	add	r17, r22
    4e1c:	71 e0       	ldi	r23, 0x01	; 1
    4e1e:	16 17       	cp	r17, r22
    4e20:	08 f0       	brcs	.+2      	; 0x4e24 <sens_calibrate+0x69e>
    4e22:	70 e0       	ldi	r23, 0x00	; 0
    4e24:	e7 2b       	or	r30, r23
    4e26:	6a 2f       	mov	r22, r26
    4e28:	6f 0d       	add	r22, r15
    4e2a:	71 e0       	ldi	r23, 0x01	; 1
    4e2c:	6a 17       	cp	r22, r26
    4e2e:	08 f0       	brcs	.+2      	; 0x4e32 <sens_calibrate+0x6ac>
    4e30:	70 e0       	ldi	r23, 0x00	; 0
    4e32:	be 2f       	mov	r27, r30
    4e34:	b6 0f       	add	r27, r22
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	b6 17       	cp	r27, r22
    4e3a:	08 f0       	brcs	.+2      	; 0x4e3e <sens_calibrate+0x6b8>
    4e3c:	80 e0       	ldi	r24, 0x00	; 0
    4e3e:	78 2b       	or	r23, r24
    4e40:	83 2f       	mov	r24, r19
    4e42:	8e 0d       	add	r24, r14
    4e44:	91 e0       	ldi	r25, 0x01	; 1
    4e46:	83 17       	cp	r24, r19
    4e48:	08 f0       	brcs	.+2      	; 0x4e4c <sens_calibrate+0x6c6>
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	a7 2f       	mov	r26, r23
    4e4e:	a8 0f       	add	r26, r24
    4e50:	61 e0       	ldi	r22, 0x01	; 1
    4e52:	a8 17       	cp	r26, r24
    4e54:	08 f0       	brcs	.+2      	; 0x4e58 <sens_calibrate+0x6d2>
    4e56:	60 e0       	ldi	r22, 0x00	; 0
    4e58:	96 2b       	or	r25, r22
    4e5a:	84 2f       	mov	r24, r20
    4e5c:	8d 0d       	add	r24, r13
    4e5e:	61 e0       	ldi	r22, 0x01	; 1
    4e60:	84 17       	cp	r24, r20
    4e62:	08 f0       	brcs	.+2      	; 0x4e66 <sens_calibrate+0x6e0>
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	e9 2f       	mov	r30, r25
    4e68:	e8 0f       	add	r30, r24
    4e6a:	91 e0       	ldi	r25, 0x01	; 1
    4e6c:	e8 17       	cp	r30, r24
    4e6e:	08 f0       	brcs	.+2      	; 0x4e72 <sens_calibrate+0x6ec>
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	69 2b       	or	r22, r25
    4e74:	85 2f       	mov	r24, r21
    4e76:	8c 0d       	add	r24, r12
    4e78:	91 e0       	ldi	r25, 0x01	; 1
    4e7a:	85 17       	cp	r24, r21
    4e7c:	08 f0       	brcs	.+2      	; 0x4e80 <sens_calibrate+0x6fa>
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	76 2f       	mov	r23, r22
    4e82:	78 0f       	add	r23, r24
    4e84:	61 e0       	ldi	r22, 0x01	; 1
    4e86:	78 17       	cp	r23, r24
    4e88:	08 f0       	brcs	.+2      	; 0x4e8c <sens_calibrate+0x706>
    4e8a:	60 e0       	ldi	r22, 0x00	; 0
    4e8c:	96 2b       	or	r25, r22
    4e8e:	2b 0d       	add	r18, r11
    4e90:	92 0f       	add	r25, r18
    4e92:	f9 ab       	std	Y+49, r31	; 0x31
    4e94:	0a ab       	std	Y+50, r16	; 0x32
    4e96:	1b ab       	std	Y+51, r17	; 0x33
    4e98:	bc ab       	std	Y+52, r27	; 0x34
    4e9a:	ad ab       	std	Y+53, r26	; 0x35
    4e9c:	ee ab       	std	Y+54, r30	; 0x36
    4e9e:	7f ab       	std	Y+55, r23	; 0x37
    4ea0:	98 af       	std	Y+56, r25	; 0x38
    4ea2:	f9 ad       	ldd	r31, Y+57	; 0x39
    4ea4:	7a ad       	ldd	r23, Y+58	; 0x3a
    4ea6:	1b ad       	ldd	r17, Y+59	; 0x3b
    4ea8:	fc ac       	ldd	r15, Y+60	; 0x3c
    4eaa:	ed ac       	ldd	r14, Y+61	; 0x3d
    4eac:	de ac       	ldd	r13, Y+62	; 0x3e
    4eae:	cf ac       	ldd	r12, Y+63	; 0x3f
    4eb0:	2b 96       	adiw	r28, 0x0b	; 11
    4eb2:	ae ad       	ldd	r26, Y+62	; 0x3e
    4eb4:	bf ad       	ldd	r27, Y+63	; 0x3f
    4eb6:	2b 97       	sbiw	r28, 0x0b	; 11
    4eb8:	bc 90       	ld	r11, X
}

// read the 10 bit ADC reading of a channel
volatile inline int32_t sens_read(uint8_t i)
{
	return adc_res[i];
    4eba:	80 91 68 03 	lds	r24, 0x0368
    4ebe:	90 91 69 03 	lds	r25, 0x0369
    4ec2:	a0 91 6a 03 	lds	r26, 0x036A
    4ec6:	b0 91 6b 03 	lds	r27, 0x036B
	{
		if (adc_rounds_cnt(0xFF) != 0)
		{
			for(uint8_t j = 0; j < 8; j++)
			{
				sum[j] += sens_read(j);
    4eca:	9c 01       	movw	r18, r24
    4ecc:	ad 01       	movw	r20, r26
    4ece:	55 0f       	add	r21, r21
    4ed0:	22 0b       	sbc	r18, r18
    4ed2:	32 2f       	mov	r19, r18
    4ed4:	a9 01       	movw	r20, r18
    4ed6:	68 2f       	mov	r22, r24
    4ed8:	89 2f       	mov	r24, r25
    4eda:	9a 2f       	mov	r25, r26
    4edc:	ab 2f       	mov	r26, r27
    4ede:	32 2f       	mov	r19, r18
    4ee0:	42 2f       	mov	r20, r18
    4ee2:	52 2f       	mov	r21, r18
    4ee4:	f6 0f       	add	r31, r22
    4ee6:	e1 e0       	ldi	r30, 0x01	; 1
    4ee8:	f6 17       	cp	r31, r22
    4eea:	08 f0       	brcs	.+2      	; 0x4eee <sens_calibrate+0x768>
    4eec:	e0 e0       	ldi	r30, 0x00	; 0
    4eee:	68 2f       	mov	r22, r24
    4ef0:	67 0f       	add	r22, r23
    4ef2:	71 e0       	ldi	r23, 0x01	; 1
    4ef4:	68 17       	cp	r22, r24
    4ef6:	08 f0       	brcs	.+2      	; 0x4efa <sens_calibrate+0x774>
    4ef8:	70 e0       	ldi	r23, 0x00	; 0
    4efa:	0e 2f       	mov	r16, r30
    4efc:	06 0f       	add	r16, r22
    4efe:	e1 e0       	ldi	r30, 0x01	; 1
    4f00:	06 17       	cp	r16, r22
    4f02:	08 f0       	brcs	.+2      	; 0x4f06 <sens_calibrate+0x780>
    4f04:	e0 e0       	ldi	r30, 0x00	; 0
    4f06:	7e 2b       	or	r23, r30
    4f08:	69 2f       	mov	r22, r25
    4f0a:	61 0f       	add	r22, r17
    4f0c:	e1 e0       	ldi	r30, 0x01	; 1
    4f0e:	69 17       	cp	r22, r25
    4f10:	08 f0       	brcs	.+2      	; 0x4f14 <sens_calibrate+0x78e>
    4f12:	e0 e0       	ldi	r30, 0x00	; 0
    4f14:	17 2f       	mov	r17, r23
    4f16:	16 0f       	add	r17, r22
    4f18:	71 e0       	ldi	r23, 0x01	; 1
    4f1a:	16 17       	cp	r17, r22
    4f1c:	08 f0       	brcs	.+2      	; 0x4f20 <sens_calibrate+0x79a>
    4f1e:	70 e0       	ldi	r23, 0x00	; 0
    4f20:	e7 2b       	or	r30, r23
    4f22:	6a 2f       	mov	r22, r26
    4f24:	6f 0d       	add	r22, r15
    4f26:	71 e0       	ldi	r23, 0x01	; 1
    4f28:	6a 17       	cp	r22, r26
    4f2a:	08 f0       	brcs	.+2      	; 0x4f2e <sens_calibrate+0x7a8>
    4f2c:	70 e0       	ldi	r23, 0x00	; 0
    4f2e:	be 2f       	mov	r27, r30
    4f30:	b6 0f       	add	r27, r22
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	b6 17       	cp	r27, r22
    4f36:	08 f0       	brcs	.+2      	; 0x4f3a <sens_calibrate+0x7b4>
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	78 2b       	or	r23, r24
    4f3c:	83 2f       	mov	r24, r19
    4f3e:	8e 0d       	add	r24, r14
    4f40:	91 e0       	ldi	r25, 0x01	; 1
    4f42:	83 17       	cp	r24, r19
    4f44:	08 f0       	brcs	.+2      	; 0x4f48 <sens_calibrate+0x7c2>
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	a7 2f       	mov	r26, r23
    4f4a:	a8 0f       	add	r26, r24
    4f4c:	61 e0       	ldi	r22, 0x01	; 1
    4f4e:	a8 17       	cp	r26, r24
    4f50:	08 f0       	brcs	.+2      	; 0x4f54 <sens_calibrate+0x7ce>
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	96 2b       	or	r25, r22
    4f56:	84 2f       	mov	r24, r20
    4f58:	8d 0d       	add	r24, r13
    4f5a:	61 e0       	ldi	r22, 0x01	; 1
    4f5c:	84 17       	cp	r24, r20
    4f5e:	08 f0       	brcs	.+2      	; 0x4f62 <sens_calibrate+0x7dc>
    4f60:	60 e0       	ldi	r22, 0x00	; 0
    4f62:	e9 2f       	mov	r30, r25
    4f64:	e8 0f       	add	r30, r24
    4f66:	91 e0       	ldi	r25, 0x01	; 1
    4f68:	e8 17       	cp	r30, r24
    4f6a:	08 f0       	brcs	.+2      	; 0x4f6e <sens_calibrate+0x7e8>
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	69 2b       	or	r22, r25
    4f70:	85 2f       	mov	r24, r21
    4f72:	8c 0d       	add	r24, r12
    4f74:	91 e0       	ldi	r25, 0x01	; 1
    4f76:	85 17       	cp	r24, r21
    4f78:	08 f0       	brcs	.+2      	; 0x4f7c <sens_calibrate+0x7f6>
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	76 2f       	mov	r23, r22
    4f7e:	78 0f       	add	r23, r24
    4f80:	61 e0       	ldi	r22, 0x01	; 1
    4f82:	78 17       	cp	r23, r24
    4f84:	08 f0       	brcs	.+2      	; 0x4f88 <sens_calibrate+0x802>
    4f86:	60 e0       	ldi	r22, 0x00	; 0
    4f88:	96 2b       	or	r25, r22
    4f8a:	2b 0d       	add	r18, r11
    4f8c:	92 0f       	add	r25, r18
    4f8e:	f9 af       	std	Y+57, r31	; 0x39
    4f90:	0a af       	std	Y+58, r16	; 0x3a
    4f92:	1b af       	std	Y+59, r17	; 0x3b
    4f94:	bc af       	std	Y+60, r27	; 0x3c
    4f96:	ad af       	std	Y+61, r26	; 0x3d
    4f98:	ee af       	std	Y+62, r30	; 0x3e
    4f9a:	7f af       	std	Y+63, r23	; 0x3f
    4f9c:	2b 96       	adiw	r28, 0x0b	; 11
    4f9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4fa0:	ff ad       	ldd	r31, Y+63	; 0x3f
    4fa2:	2b 97       	sbiw	r28, 0x0b	; 11
    4fa4:	90 83       	st	Z, r25
}

// returns the number of ADC samples that have been collected, clear the counter by setting c to 0, or else use 0xFF for c
volatile inline uint8_t adc_rounds_cnt(uint8_t c)
{
	adc_new_cycle &= c;
    4fa6:	80 91 8d 03 	lds	r24, 0x038D
    4faa:	10 92 8d 03 	sts	0x038D, r1
	return adc_new_cycle;
    4fae:	80 91 8d 03 	lds	r24, 0x038D
// find the center values of all channels using t number of samples
void sens_calibrate(uint8_t t)
{
	volatile uint64_t sum[8] = {0,0,0,0,0,0,0,0};
	
	for(uint8_t i = 0; i < t; i++)
    4fb2:	93 94       	inc	r9
    4fb4:	9a 14       	cp	r9, r10
    4fb6:	08 f4       	brcc	.+2      	; 0x4fba <sens_calibrate+0x834>
    4fb8:	15 cc       	rjmp	.-2006   	; 0x47e4 <sens_calibrate+0x5e>
    4fba:	8a 2d       	mov	r24, r10
    4fbc:	86 95       	lsr	r24
    4fbe:	28 2e       	mov	r2, r24
    4fc0:	33 24       	eor	r3, r3
    4fc2:	44 24       	eor	r4, r4
    4fc4:	55 24       	eor	r5, r5
    4fc6:	66 24       	eor	r6, r6
    4fc8:	77 24       	eor	r7, r7
    4fca:	43 01       	movw	r8, r6
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e0       	ldi	r20, 0x00	; 0
    4fd0:	50 e0       	ldi	r21, 0x00	; 0
    4fd2:	60 e0       	ldi	r22, 0x00	; 0
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	22 96       	adiw	r28, 0x02	; 2
    4fdc:	af ae       	std	Y+63, r10	; 0x3f
    4fde:	22 97       	sbiw	r28, 0x02	; 2
    4fe0:	23 96       	adiw	r28, 0x03	; 3
    4fe2:	3f af       	std	Y+63, r19	; 0x3f
    4fe4:	23 97       	sbiw	r28, 0x03	; 3
    4fe6:	24 96       	adiw	r28, 0x04	; 4
    4fe8:	4f af       	std	Y+63, r20	; 0x3f
    4fea:	24 97       	sbiw	r28, 0x04	; 4
    4fec:	25 96       	adiw	r28, 0x05	; 5
    4fee:	5f af       	std	Y+63, r21	; 0x3f
    4ff0:	25 97       	sbiw	r28, 0x05	; 5
    4ff2:	26 96       	adiw	r28, 0x06	; 6
    4ff4:	6f af       	std	Y+63, r22	; 0x3f
    4ff6:	26 97       	sbiw	r28, 0x06	; 6
    4ff8:	27 96       	adiw	r28, 0x07	; 7
    4ffa:	7f af       	std	Y+63, r23	; 0x3f
    4ffc:	27 97       	sbiw	r28, 0x07	; 7
    4ffe:	28 96       	adiw	r28, 0x08	; 8
    5000:	8f af       	std	Y+63, r24	; 0x3f
    5002:	28 97       	sbiw	r28, 0x08	; 8
    5004:	29 96       	adiw	r28, 0x09	; 9
    5006:	9f af       	std	Y+63, r25	; 0x3f
    5008:	29 97       	sbiw	r28, 0x09	; 9
		}
	}
	
	for(uint8_t j = 0; j < 8; j++)
	{
		adc_offset[j] = calc_multi(sum[j], 1, t);
    500a:	29 81       	ldd	r18, Y+1	; 0x01
    500c:	9a 81       	ldd	r25, Y+2	; 0x02
    500e:	6b 81       	ldd	r22, Y+3	; 0x03
    5010:	7c 81       	ldd	r23, Y+4	; 0x04
    5012:	ed 81       	ldd	r30, Y+5	; 0x05
    5014:	fe 81       	ldd	r31, Y+6	; 0x06
    5016:	af 81       	ldd	r26, Y+7	; 0x07
    5018:	b8 85       	ldd	r27, Y+8	; 0x08
    501a:	22 0d       	add	r18, r2
    501c:	31 e0       	ldi	r19, 0x01	; 1
    501e:	22 15       	cp	r18, r2
    5020:	08 f0       	brcs	.+2      	; 0x5024 <sens_calibrate+0x89e>
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	41 e0       	ldi	r20, 0x01	; 1
    5026:	93 15       	cp	r25, r3
    5028:	08 f0       	brcs	.+2      	; 0x502c <sens_calibrate+0x8a6>
    502a:	40 e0       	ldi	r20, 0x00	; 0
    502c:	39 0f       	add	r19, r25
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	39 17       	cp	r19, r25
    5032:	08 f0       	brcs	.+2      	; 0x5036 <sens_calibrate+0x8b0>
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	48 2b       	or	r20, r24
    5038:	51 e0       	ldi	r21, 0x01	; 1
    503a:	64 15       	cp	r22, r4
    503c:	08 f0       	brcs	.+2      	; 0x5040 <sens_calibrate+0x8ba>
    503e:	50 e0       	ldi	r21, 0x00	; 0
    5040:	46 0f       	add	r20, r22
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	46 17       	cp	r20, r22
    5046:	08 f0       	brcs	.+2      	; 0x504a <sens_calibrate+0x8c4>
    5048:	80 e0       	ldi	r24, 0x00	; 0
    504a:	58 2b       	or	r21, r24
    504c:	61 e0       	ldi	r22, 0x01	; 1
    504e:	75 15       	cp	r23, r5
    5050:	08 f0       	brcs	.+2      	; 0x5054 <sens_calibrate+0x8ce>
    5052:	60 e0       	ldi	r22, 0x00	; 0
    5054:	57 0f       	add	r21, r23
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	57 17       	cp	r21, r23
    505a:	08 f0       	brcs	.+2      	; 0x505e <sens_calibrate+0x8d8>
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	68 2b       	or	r22, r24
    5060:	71 e0       	ldi	r23, 0x01	; 1
    5062:	e6 15       	cp	r30, r6
    5064:	08 f0       	brcs	.+2      	; 0x5068 <sens_calibrate+0x8e2>
    5066:	70 e0       	ldi	r23, 0x00	; 0
    5068:	6e 0f       	add	r22, r30
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	6e 17       	cp	r22, r30
    506e:	08 f0       	brcs	.+2      	; 0x5072 <sens_calibrate+0x8ec>
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	78 2b       	or	r23, r24
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	f7 15       	cp	r31, r7
    5078:	08 f0       	brcs	.+2      	; 0x507c <sens_calibrate+0x8f6>
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	7f 0f       	add	r23, r31
    507e:	91 e0       	ldi	r25, 0x01	; 1
    5080:	7f 17       	cp	r23, r31
    5082:	08 f0       	brcs	.+2      	; 0x5086 <sens_calibrate+0x900>
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	89 2b       	or	r24, r25
    5088:	91 e0       	ldi	r25, 0x01	; 1
    508a:	a8 15       	cp	r26, r8
    508c:	08 f0       	brcs	.+2      	; 0x5090 <sens_calibrate+0x90a>
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	8a 0f       	add	r24, r26
    5092:	e1 e0       	ldi	r30, 0x01	; 1
    5094:	8a 17       	cp	r24, r26
    5096:	08 f0       	brcs	.+2      	; 0x509a <sens_calibrate+0x914>
    5098:	e0 e0       	ldi	r30, 0x00	; 0
    509a:	9e 2b       	or	r25, r30
    509c:	9b 0f       	add	r25, r27
    509e:	22 96       	adiw	r28, 0x02	; 2
    50a0:	af ac       	ldd	r10, Y+63	; 0x3f
    50a2:	22 97       	sbiw	r28, 0x02	; 2
    50a4:	bb 24       	eor	r11, r11
    50a6:	cc 24       	eor	r12, r12
    50a8:	dd 24       	eor	r13, r13
    50aa:	ee 24       	eor	r14, r14
    50ac:	ff 24       	eor	r15, r15
    50ae:	00 e0       	ldi	r16, 0x00	; 0
    50b0:	10 e0       	ldi	r17, 0x00	; 0
    50b2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    50b6:	c9 01       	movw	r24, r18
    50b8:	da 01       	movw	r26, r20
    50ba:	80 93 6c 03 	sts	0x036C, r24
    50be:	90 93 6d 03 	sts	0x036D, r25
    50c2:	a0 93 6e 03 	sts	0x036E, r26
    50c6:	b0 93 6f 03 	sts	0x036F, r27
    50ca:	29 85       	ldd	r18, Y+9	; 0x09
    50cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    50d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    50d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    50d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    50d6:	af 85       	ldd	r26, Y+15	; 0x0f
    50d8:	b8 89       	ldd	r27, Y+16	; 0x10
    50da:	22 0d       	add	r18, r2
    50dc:	31 e0       	ldi	r19, 0x01	; 1
    50de:	22 15       	cp	r18, r2
    50e0:	08 f0       	brcs	.+2      	; 0x50e4 <sens_calibrate+0x95e>
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	41 e0       	ldi	r20, 0x01	; 1
    50e6:	93 15       	cp	r25, r3
    50e8:	08 f0       	brcs	.+2      	; 0x50ec <sens_calibrate+0x966>
    50ea:	40 e0       	ldi	r20, 0x00	; 0
    50ec:	39 0f       	add	r19, r25
    50ee:	81 e0       	ldi	r24, 0x01	; 1
    50f0:	39 17       	cp	r19, r25
    50f2:	08 f0       	brcs	.+2      	; 0x50f6 <sens_calibrate+0x970>
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	48 2b       	or	r20, r24
    50f8:	51 e0       	ldi	r21, 0x01	; 1
    50fa:	64 15       	cp	r22, r4
    50fc:	08 f0       	brcs	.+2      	; 0x5100 <sens_calibrate+0x97a>
    50fe:	50 e0       	ldi	r21, 0x00	; 0
    5100:	46 0f       	add	r20, r22
    5102:	81 e0       	ldi	r24, 0x01	; 1
    5104:	46 17       	cp	r20, r22
    5106:	08 f0       	brcs	.+2      	; 0x510a <sens_calibrate+0x984>
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	58 2b       	or	r21, r24
    510c:	61 e0       	ldi	r22, 0x01	; 1
    510e:	75 15       	cp	r23, r5
    5110:	08 f0       	brcs	.+2      	; 0x5114 <sens_calibrate+0x98e>
    5112:	60 e0       	ldi	r22, 0x00	; 0
    5114:	57 0f       	add	r21, r23
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	57 17       	cp	r21, r23
    511a:	08 f0       	brcs	.+2      	; 0x511e <sens_calibrate+0x998>
    511c:	80 e0       	ldi	r24, 0x00	; 0
    511e:	68 2b       	or	r22, r24
    5120:	71 e0       	ldi	r23, 0x01	; 1
    5122:	e6 15       	cp	r30, r6
    5124:	08 f0       	brcs	.+2      	; 0x5128 <sens_calibrate+0x9a2>
    5126:	70 e0       	ldi	r23, 0x00	; 0
    5128:	6e 0f       	add	r22, r30
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	6e 17       	cp	r22, r30
    512e:	08 f0       	brcs	.+2      	; 0x5132 <sens_calibrate+0x9ac>
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	78 2b       	or	r23, r24
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	f7 15       	cp	r31, r7
    5138:	08 f0       	brcs	.+2      	; 0x513c <sens_calibrate+0x9b6>
    513a:	80 e0       	ldi	r24, 0x00	; 0
    513c:	7f 0f       	add	r23, r31
    513e:	91 e0       	ldi	r25, 0x01	; 1
    5140:	7f 17       	cp	r23, r31
    5142:	08 f0       	brcs	.+2      	; 0x5146 <sens_calibrate+0x9c0>
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	89 2b       	or	r24, r25
    5148:	91 e0       	ldi	r25, 0x01	; 1
    514a:	a8 15       	cp	r26, r8
    514c:	08 f0       	brcs	.+2      	; 0x5150 <sens_calibrate+0x9ca>
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	8a 0f       	add	r24, r26
    5152:	e1 e0       	ldi	r30, 0x01	; 1
    5154:	8a 17       	cp	r24, r26
    5156:	08 f0       	brcs	.+2      	; 0x515a <sens_calibrate+0x9d4>
    5158:	e0 e0       	ldi	r30, 0x00	; 0
    515a:	9e 2b       	or	r25, r30
    515c:	9b 0f       	add	r25, r27
    515e:	22 96       	adiw	r28, 0x02	; 2
    5160:	af ac       	ldd	r10, Y+63	; 0x3f
    5162:	22 97       	sbiw	r28, 0x02	; 2
    5164:	bb 24       	eor	r11, r11
    5166:	cc 24       	eor	r12, r12
    5168:	dd 24       	eor	r13, r13
    516a:	ee 24       	eor	r14, r14
    516c:	ff 24       	eor	r15, r15
    516e:	00 e0       	ldi	r16, 0x00	; 0
    5170:	10 e0       	ldi	r17, 0x00	; 0
    5172:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    5176:	c9 01       	movw	r24, r18
    5178:	da 01       	movw	r26, r20
    517a:	80 93 70 03 	sts	0x0370, r24
    517e:	90 93 71 03 	sts	0x0371, r25
    5182:	a0 93 72 03 	sts	0x0372, r26
    5186:	b0 93 73 03 	sts	0x0373, r27
    518a:	29 89       	ldd	r18, Y+17	; 0x11
    518c:	9a 89       	ldd	r25, Y+18	; 0x12
    518e:	6b 89       	ldd	r22, Y+19	; 0x13
    5190:	7c 89       	ldd	r23, Y+20	; 0x14
    5192:	ed 89       	ldd	r30, Y+21	; 0x15
    5194:	fe 89       	ldd	r31, Y+22	; 0x16
    5196:	af 89       	ldd	r26, Y+23	; 0x17
    5198:	b8 8d       	ldd	r27, Y+24	; 0x18
    519a:	22 0d       	add	r18, r2
    519c:	31 e0       	ldi	r19, 0x01	; 1
    519e:	22 15       	cp	r18, r2
    51a0:	08 f0       	brcs	.+2      	; 0x51a4 <sens_calibrate+0xa1e>
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	41 e0       	ldi	r20, 0x01	; 1
    51a6:	93 15       	cp	r25, r3
    51a8:	08 f0       	brcs	.+2      	; 0x51ac <sens_calibrate+0xa26>
    51aa:	40 e0       	ldi	r20, 0x00	; 0
    51ac:	39 0f       	add	r19, r25
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	39 17       	cp	r19, r25
    51b2:	08 f0       	brcs	.+2      	; 0x51b6 <sens_calibrate+0xa30>
    51b4:	80 e0       	ldi	r24, 0x00	; 0
    51b6:	48 2b       	or	r20, r24
    51b8:	51 e0       	ldi	r21, 0x01	; 1
    51ba:	64 15       	cp	r22, r4
    51bc:	08 f0       	brcs	.+2      	; 0x51c0 <sens_calibrate+0xa3a>
    51be:	50 e0       	ldi	r21, 0x00	; 0
    51c0:	46 0f       	add	r20, r22
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	46 17       	cp	r20, r22
    51c6:	08 f0       	brcs	.+2      	; 0x51ca <sens_calibrate+0xa44>
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	58 2b       	or	r21, r24
    51cc:	61 e0       	ldi	r22, 0x01	; 1
    51ce:	75 15       	cp	r23, r5
    51d0:	08 f0       	brcs	.+2      	; 0x51d4 <sens_calibrate+0xa4e>
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	57 0f       	add	r21, r23
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	57 17       	cp	r21, r23
    51da:	08 f0       	brcs	.+2      	; 0x51de <sens_calibrate+0xa58>
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	68 2b       	or	r22, r24
    51e0:	71 e0       	ldi	r23, 0x01	; 1
    51e2:	e6 15       	cp	r30, r6
    51e4:	08 f0       	brcs	.+2      	; 0x51e8 <sens_calibrate+0xa62>
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	6e 0f       	add	r22, r30
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	6e 17       	cp	r22, r30
    51ee:	08 f0       	brcs	.+2      	; 0x51f2 <sens_calibrate+0xa6c>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	78 2b       	or	r23, r24
    51f4:	81 e0       	ldi	r24, 0x01	; 1
    51f6:	f7 15       	cp	r31, r7
    51f8:	08 f0       	brcs	.+2      	; 0x51fc <sens_calibrate+0xa76>
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	7f 0f       	add	r23, r31
    51fe:	91 e0       	ldi	r25, 0x01	; 1
    5200:	7f 17       	cp	r23, r31
    5202:	08 f0       	brcs	.+2      	; 0x5206 <sens_calibrate+0xa80>
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	89 2b       	or	r24, r25
    5208:	91 e0       	ldi	r25, 0x01	; 1
    520a:	a8 15       	cp	r26, r8
    520c:	08 f0       	brcs	.+2      	; 0x5210 <sens_calibrate+0xa8a>
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	8a 0f       	add	r24, r26
    5212:	e1 e0       	ldi	r30, 0x01	; 1
    5214:	8a 17       	cp	r24, r26
    5216:	08 f0       	brcs	.+2      	; 0x521a <sens_calibrate+0xa94>
    5218:	e0 e0       	ldi	r30, 0x00	; 0
    521a:	9e 2b       	or	r25, r30
    521c:	9b 0f       	add	r25, r27
    521e:	22 96       	adiw	r28, 0x02	; 2
    5220:	af ac       	ldd	r10, Y+63	; 0x3f
    5222:	22 97       	sbiw	r28, 0x02	; 2
    5224:	bb 24       	eor	r11, r11
    5226:	cc 24       	eor	r12, r12
    5228:	dd 24       	eor	r13, r13
    522a:	ee 24       	eor	r14, r14
    522c:	ff 24       	eor	r15, r15
    522e:	00 e0       	ldi	r16, 0x00	; 0
    5230:	10 e0       	ldi	r17, 0x00	; 0
    5232:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    5236:	c9 01       	movw	r24, r18
    5238:	da 01       	movw	r26, r20
    523a:	80 93 74 03 	sts	0x0374, r24
    523e:	90 93 75 03 	sts	0x0375, r25
    5242:	a0 93 76 03 	sts	0x0376, r26
    5246:	b0 93 77 03 	sts	0x0377, r27
    524a:	89 8d       	ldd	r24, Y+25	; 0x19
    524c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    524e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5250:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5252:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5254:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5256:	af 8d       	ldd	r26, Y+31	; 0x1f
    5258:	b8 a1       	ldd	r27, Y+32	; 0x20
    525a:	28 2f       	mov	r18, r24
    525c:	22 0d       	add	r18, r2
    525e:	31 e0       	ldi	r19, 0x01	; 1
    5260:	28 17       	cp	r18, r24
    5262:	08 f0       	brcs	.+2      	; 0x5266 <sens_calibrate+0xae0>
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	39 0f       	add	r19, r25
    5268:	41 e0       	ldi	r20, 0x01	; 1
    526a:	39 17       	cp	r19, r25
    526c:	08 f0       	brcs	.+2      	; 0x5270 <sens_calibrate+0xaea>
    526e:	40 e0       	ldi	r20, 0x00	; 0
    5270:	46 0f       	add	r20, r22
    5272:	51 e0       	ldi	r21, 0x01	; 1
    5274:	46 17       	cp	r20, r22
    5276:	08 f0       	brcs	.+2      	; 0x527a <sens_calibrate+0xaf4>
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	57 0f       	add	r21, r23
    527c:	61 e0       	ldi	r22, 0x01	; 1
    527e:	57 17       	cp	r21, r23
    5280:	08 f0       	brcs	.+2      	; 0x5284 <sens_calibrate+0xafe>
    5282:	60 e0       	ldi	r22, 0x00	; 0
    5284:	6e 0f       	add	r22, r30
    5286:	71 e0       	ldi	r23, 0x01	; 1
    5288:	6e 17       	cp	r22, r30
    528a:	08 f0       	brcs	.+2      	; 0x528e <sens_calibrate+0xb08>
    528c:	70 e0       	ldi	r23, 0x00	; 0
    528e:	7f 0f       	add	r23, r31
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	7f 17       	cp	r23, r31
    5294:	08 f0       	brcs	.+2      	; 0x5298 <sens_calibrate+0xb12>
    5296:	80 e0       	ldi	r24, 0x00	; 0
    5298:	8a 0f       	add	r24, r26
    529a:	91 e0       	ldi	r25, 0x01	; 1
    529c:	8a 17       	cp	r24, r26
    529e:	08 f0       	brcs	.+2      	; 0x52a2 <sens_calibrate+0xb1c>
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	9b 0f       	add	r25, r27
    52a4:	22 96       	adiw	r28, 0x02	; 2
    52a6:	af ac       	ldd	r10, Y+63	; 0x3f
    52a8:	22 97       	sbiw	r28, 0x02	; 2
    52aa:	bb 24       	eor	r11, r11
    52ac:	cc 24       	eor	r12, r12
    52ae:	dd 24       	eor	r13, r13
    52b0:	ee 24       	eor	r14, r14
    52b2:	ff 24       	eor	r15, r15
    52b4:	00 e0       	ldi	r16, 0x00	; 0
    52b6:	10 e0       	ldi	r17, 0x00	; 0
    52b8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    52bc:	c9 01       	movw	r24, r18
    52be:	da 01       	movw	r26, r20
    52c0:	80 93 78 03 	sts	0x0378, r24
    52c4:	90 93 79 03 	sts	0x0379, r25
    52c8:	a0 93 7a 03 	sts	0x037A, r26
    52cc:	b0 93 7b 03 	sts	0x037B, r27
    52d0:	89 a1       	ldd	r24, Y+33	; 0x21
    52d2:	9a a1       	ldd	r25, Y+34	; 0x22
    52d4:	6b a1       	ldd	r22, Y+35	; 0x23
    52d6:	7c a1       	ldd	r23, Y+36	; 0x24
    52d8:	ed a1       	ldd	r30, Y+37	; 0x25
    52da:	fe a1       	ldd	r31, Y+38	; 0x26
    52dc:	af a1       	ldd	r26, Y+39	; 0x27
    52de:	b8 a5       	ldd	r27, Y+40	; 0x28
    52e0:	28 2f       	mov	r18, r24
    52e2:	22 0d       	add	r18, r2
    52e4:	31 e0       	ldi	r19, 0x01	; 1
    52e6:	28 17       	cp	r18, r24
    52e8:	08 f0       	brcs	.+2      	; 0x52ec <sens_calibrate+0xb66>
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	39 0f       	add	r19, r25
    52ee:	41 e0       	ldi	r20, 0x01	; 1
    52f0:	39 17       	cp	r19, r25
    52f2:	08 f0       	brcs	.+2      	; 0x52f6 <sens_calibrate+0xb70>
    52f4:	40 e0       	ldi	r20, 0x00	; 0
    52f6:	46 0f       	add	r20, r22
    52f8:	51 e0       	ldi	r21, 0x01	; 1
    52fa:	46 17       	cp	r20, r22
    52fc:	08 f0       	brcs	.+2      	; 0x5300 <sens_calibrate+0xb7a>
    52fe:	50 e0       	ldi	r21, 0x00	; 0
    5300:	57 0f       	add	r21, r23
    5302:	61 e0       	ldi	r22, 0x01	; 1
    5304:	57 17       	cp	r21, r23
    5306:	08 f0       	brcs	.+2      	; 0x530a <sens_calibrate+0xb84>
    5308:	60 e0       	ldi	r22, 0x00	; 0
    530a:	6e 0f       	add	r22, r30
    530c:	71 e0       	ldi	r23, 0x01	; 1
    530e:	6e 17       	cp	r22, r30
    5310:	08 f0       	brcs	.+2      	; 0x5314 <sens_calibrate+0xb8e>
    5312:	70 e0       	ldi	r23, 0x00	; 0
    5314:	7f 0f       	add	r23, r31
    5316:	81 e0       	ldi	r24, 0x01	; 1
    5318:	7f 17       	cp	r23, r31
    531a:	08 f0       	brcs	.+2      	; 0x531e <sens_calibrate+0xb98>
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	8a 0f       	add	r24, r26
    5320:	91 e0       	ldi	r25, 0x01	; 1
    5322:	8a 17       	cp	r24, r26
    5324:	08 f0       	brcs	.+2      	; 0x5328 <sens_calibrate+0xba2>
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	9b 0f       	add	r25, r27
    532a:	22 96       	adiw	r28, 0x02	; 2
    532c:	af ac       	ldd	r10, Y+63	; 0x3f
    532e:	22 97       	sbiw	r28, 0x02	; 2
    5330:	bb 24       	eor	r11, r11
    5332:	cc 24       	eor	r12, r12
    5334:	dd 24       	eor	r13, r13
    5336:	ee 24       	eor	r14, r14
    5338:	ff 24       	eor	r15, r15
    533a:	00 e0       	ldi	r16, 0x00	; 0
    533c:	10 e0       	ldi	r17, 0x00	; 0
    533e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    5342:	c9 01       	movw	r24, r18
    5344:	da 01       	movw	r26, r20
    5346:	80 93 7c 03 	sts	0x037C, r24
    534a:	90 93 7d 03 	sts	0x037D, r25
    534e:	a0 93 7e 03 	sts	0x037E, r26
    5352:	b0 93 7f 03 	sts	0x037F, r27
    5356:	89 a5       	ldd	r24, Y+41	; 0x29
    5358:	9a a5       	ldd	r25, Y+42	; 0x2a
    535a:	6b a5       	ldd	r22, Y+43	; 0x2b
    535c:	7c a5       	ldd	r23, Y+44	; 0x2c
    535e:	ed a5       	ldd	r30, Y+45	; 0x2d
    5360:	fe a5       	ldd	r31, Y+46	; 0x2e
    5362:	af a5       	ldd	r26, Y+47	; 0x2f
    5364:	b8 a9       	ldd	r27, Y+48	; 0x30
    5366:	28 2f       	mov	r18, r24
    5368:	22 0d       	add	r18, r2
    536a:	31 e0       	ldi	r19, 0x01	; 1
    536c:	28 17       	cp	r18, r24
    536e:	08 f0       	brcs	.+2      	; 0x5372 <sens_calibrate+0xbec>
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	39 0f       	add	r19, r25
    5374:	41 e0       	ldi	r20, 0x01	; 1
    5376:	39 17       	cp	r19, r25
    5378:	08 f0       	brcs	.+2      	; 0x537c <sens_calibrate+0xbf6>
    537a:	40 e0       	ldi	r20, 0x00	; 0
    537c:	46 0f       	add	r20, r22
    537e:	51 e0       	ldi	r21, 0x01	; 1
    5380:	46 17       	cp	r20, r22
    5382:	08 f0       	brcs	.+2      	; 0x5386 <sens_calibrate+0xc00>
    5384:	50 e0       	ldi	r21, 0x00	; 0
    5386:	57 0f       	add	r21, r23
    5388:	61 e0       	ldi	r22, 0x01	; 1
    538a:	57 17       	cp	r21, r23
    538c:	08 f0       	brcs	.+2      	; 0x5390 <sens_calibrate+0xc0a>
    538e:	60 e0       	ldi	r22, 0x00	; 0
    5390:	6e 0f       	add	r22, r30
    5392:	71 e0       	ldi	r23, 0x01	; 1
    5394:	6e 17       	cp	r22, r30
    5396:	08 f0       	brcs	.+2      	; 0x539a <sens_calibrate+0xc14>
    5398:	70 e0       	ldi	r23, 0x00	; 0
    539a:	7f 0f       	add	r23, r31
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	7f 17       	cp	r23, r31
    53a0:	08 f0       	brcs	.+2      	; 0x53a4 <sens_calibrate+0xc1e>
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	8a 0f       	add	r24, r26
    53a6:	91 e0       	ldi	r25, 0x01	; 1
    53a8:	8a 17       	cp	r24, r26
    53aa:	08 f0       	brcs	.+2      	; 0x53ae <sens_calibrate+0xc28>
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	9b 0f       	add	r25, r27
    53b0:	22 96       	adiw	r28, 0x02	; 2
    53b2:	af ac       	ldd	r10, Y+63	; 0x3f
    53b4:	22 97       	sbiw	r28, 0x02	; 2
    53b6:	bb 24       	eor	r11, r11
    53b8:	cc 24       	eor	r12, r12
    53ba:	dd 24       	eor	r13, r13
    53bc:	ee 24       	eor	r14, r14
    53be:	ff 24       	eor	r15, r15
    53c0:	00 e0       	ldi	r16, 0x00	; 0
    53c2:	10 e0       	ldi	r17, 0x00	; 0
    53c4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    53c8:	c9 01       	movw	r24, r18
    53ca:	da 01       	movw	r26, r20
    53cc:	80 93 80 03 	sts	0x0380, r24
    53d0:	90 93 81 03 	sts	0x0381, r25
    53d4:	a0 93 82 03 	sts	0x0382, r26
    53d8:	b0 93 83 03 	sts	0x0383, r27
    53dc:	89 a9       	ldd	r24, Y+49	; 0x31
    53de:	9a a9       	ldd	r25, Y+50	; 0x32
    53e0:	6b a9       	ldd	r22, Y+51	; 0x33
    53e2:	7c a9       	ldd	r23, Y+52	; 0x34
    53e4:	ed a9       	ldd	r30, Y+53	; 0x35
    53e6:	fe a9       	ldd	r31, Y+54	; 0x36
    53e8:	af a9       	ldd	r26, Y+55	; 0x37
    53ea:	b8 ad       	ldd	r27, Y+56	; 0x38
    53ec:	28 2f       	mov	r18, r24
    53ee:	22 0d       	add	r18, r2
    53f0:	31 e0       	ldi	r19, 0x01	; 1
    53f2:	28 17       	cp	r18, r24
    53f4:	08 f0       	brcs	.+2      	; 0x53f8 <sens_calibrate+0xc72>
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	39 0f       	add	r19, r25
    53fa:	41 e0       	ldi	r20, 0x01	; 1
    53fc:	39 17       	cp	r19, r25
    53fe:	08 f0       	brcs	.+2      	; 0x5402 <sens_calibrate+0xc7c>
    5400:	40 e0       	ldi	r20, 0x00	; 0
    5402:	46 0f       	add	r20, r22
    5404:	51 e0       	ldi	r21, 0x01	; 1
    5406:	46 17       	cp	r20, r22
    5408:	08 f0       	brcs	.+2      	; 0x540c <sens_calibrate+0xc86>
    540a:	50 e0       	ldi	r21, 0x00	; 0
    540c:	57 0f       	add	r21, r23
    540e:	61 e0       	ldi	r22, 0x01	; 1
    5410:	57 17       	cp	r21, r23
    5412:	08 f0       	brcs	.+2      	; 0x5416 <sens_calibrate+0xc90>
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	6e 0f       	add	r22, r30
    5418:	71 e0       	ldi	r23, 0x01	; 1
    541a:	6e 17       	cp	r22, r30
    541c:	08 f0       	brcs	.+2      	; 0x5420 <sens_calibrate+0xc9a>
    541e:	70 e0       	ldi	r23, 0x00	; 0
    5420:	7f 0f       	add	r23, r31
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	7f 17       	cp	r23, r31
    5426:	08 f0       	brcs	.+2      	; 0x542a <sens_calibrate+0xca4>
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	8a 0f       	add	r24, r26
    542c:	91 e0       	ldi	r25, 0x01	; 1
    542e:	8a 17       	cp	r24, r26
    5430:	08 f0       	brcs	.+2      	; 0x5434 <sens_calibrate+0xcae>
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	9b 0f       	add	r25, r27
    5436:	22 96       	adiw	r28, 0x02	; 2
    5438:	af ac       	ldd	r10, Y+63	; 0x3f
    543a:	22 97       	sbiw	r28, 0x02	; 2
    543c:	bb 24       	eor	r11, r11
    543e:	cc 24       	eor	r12, r12
    5440:	dd 24       	eor	r13, r13
    5442:	ee 24       	eor	r14, r14
    5444:	ff 24       	eor	r15, r15
    5446:	00 e0       	ldi	r16, 0x00	; 0
    5448:	10 e0       	ldi	r17, 0x00	; 0
    544a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    544e:	c9 01       	movw	r24, r18
    5450:	da 01       	movw	r26, r20
    5452:	80 93 84 03 	sts	0x0384, r24
    5456:	90 93 85 03 	sts	0x0385, r25
    545a:	a0 93 86 03 	sts	0x0386, r26
    545e:	b0 93 87 03 	sts	0x0387, r27
    5462:	89 ad       	ldd	r24, Y+57	; 0x39
    5464:	9a ad       	ldd	r25, Y+58	; 0x3a
    5466:	6b ad       	ldd	r22, Y+59	; 0x3b
    5468:	7c ad       	ldd	r23, Y+60	; 0x3c
    546a:	ed ad       	ldd	r30, Y+61	; 0x3d
    546c:	fe ad       	ldd	r31, Y+62	; 0x3e
    546e:	1f ad       	ldd	r17, Y+63	; 0x3f
    5470:	2b 96       	adiw	r28, 0x0b	; 11
    5472:	ae ad       	ldd	r26, Y+62	; 0x3e
    5474:	bf ad       	ldd	r27, Y+63	; 0x3f
    5476:	2b 97       	sbiw	r28, 0x0b	; 11
    5478:	0c 91       	ld	r16, X
    547a:	28 2f       	mov	r18, r24
    547c:	22 0d       	add	r18, r2
    547e:	31 e0       	ldi	r19, 0x01	; 1
    5480:	28 17       	cp	r18, r24
    5482:	08 f0       	brcs	.+2      	; 0x5486 <sens_calibrate+0xd00>
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	39 0f       	add	r19, r25
    5488:	41 e0       	ldi	r20, 0x01	; 1
    548a:	39 17       	cp	r19, r25
    548c:	08 f0       	brcs	.+2      	; 0x5490 <sens_calibrate+0xd0a>
    548e:	40 e0       	ldi	r20, 0x00	; 0
    5490:	46 0f       	add	r20, r22
    5492:	51 e0       	ldi	r21, 0x01	; 1
    5494:	46 17       	cp	r20, r22
    5496:	08 f0       	brcs	.+2      	; 0x549a <sens_calibrate+0xd14>
    5498:	50 e0       	ldi	r21, 0x00	; 0
    549a:	57 0f       	add	r21, r23
    549c:	61 e0       	ldi	r22, 0x01	; 1
    549e:	57 17       	cp	r21, r23
    54a0:	08 f0       	brcs	.+2      	; 0x54a4 <sens_calibrate+0xd1e>
    54a2:	60 e0       	ldi	r22, 0x00	; 0
    54a4:	6e 0f       	add	r22, r30
    54a6:	71 e0       	ldi	r23, 0x01	; 1
    54a8:	6e 17       	cp	r22, r30
    54aa:	08 f0       	brcs	.+2      	; 0x54ae <sens_calibrate+0xd28>
    54ac:	70 e0       	ldi	r23, 0x00	; 0
    54ae:	7f 0f       	add	r23, r31
    54b0:	81 e0       	ldi	r24, 0x01	; 1
    54b2:	7f 17       	cp	r23, r31
    54b4:	08 f0       	brcs	.+2      	; 0x54b8 <sens_calibrate+0xd32>
    54b6:	80 e0       	ldi	r24, 0x00	; 0
    54b8:	81 0f       	add	r24, r17
    54ba:	91 e0       	ldi	r25, 0x01	; 1
    54bc:	81 17       	cp	r24, r17
    54be:	08 f0       	brcs	.+2      	; 0x54c2 <sens_calibrate+0xd3c>
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	90 0f       	add	r25, r16
    54c4:	22 96       	adiw	r28, 0x02	; 2
    54c6:	af ac       	ldd	r10, Y+63	; 0x3f
    54c8:	22 97       	sbiw	r28, 0x02	; 2
    54ca:	bb 24       	eor	r11, r11
    54cc:	cc 24       	eor	r12, r12
    54ce:	dd 24       	eor	r13, r13
    54d0:	ee 24       	eor	r14, r14
    54d2:	ff 24       	eor	r15, r15
    54d4:	00 e0       	ldi	r16, 0x00	; 0
    54d6:	10 e0       	ldi	r17, 0x00	; 0
    54d8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__udivdi3>
    54dc:	c9 01       	movw	r24, r18
    54de:	da 01       	movw	r26, r20
    54e0:	80 93 88 03 	sts	0x0388, r24
    54e4:	90 93 89 03 	sts	0x0389, r25
    54e8:	a0 93 8a 03 	sts	0x038A, r26
    54ec:	b0 93 8b 03 	sts	0x038B, r27
	{
		adc_offset[j] = calc_multi(sum[j], 1, t);
	}
	
	adc_start(0, _BV(ADIE));
}
    54f0:	c6 5b       	subi	r28, 0xB6	; 182
    54f2:	df 4f       	sbci	r29, 0xFF	; 255
    54f4:	0f b6       	in	r0, 0x3f	; 63
    54f6:	f8 94       	cli
    54f8:	de bf       	out	0x3e, r29	; 62
    54fa:	0f be       	out	0x3f, r0	; 63
    54fc:	cd bf       	out	0x3d, r28	; 61
    54fe:	cf 91       	pop	r28
    5500:	df 91       	pop	r29
    5502:	1f 91       	pop	r17
    5504:	0f 91       	pop	r16
    5506:	ff 90       	pop	r15
    5508:	ef 90       	pop	r14
    550a:	df 90       	pop	r13
    550c:	cf 90       	pop	r12
    550e:	bf 90       	pop	r11
    5510:	af 90       	pop	r10
    5512:	9f 90       	pop	r9
    5514:	8f 90       	pop	r8
    5516:	7f 90       	pop	r7
    5518:	6f 90       	pop	r6
    551a:	5f 90       	pop	r5
    551c:	4f 90       	pop	r4
    551e:	3f 90       	pop	r3
    5520:	2f 90       	pop	r2
    5522:	08 95       	ret
    5524:	9e 01       	movw	r18, r28
    5526:	20 5c       	subi	r18, 0xC0	; 192
    5528:	3f 4f       	sbci	r19, 0xFF	; 255
    552a:	2b 96       	adiw	r28, 0x0b	; 11
    552c:	3f af       	std	Y+63, r19	; 0x3f
    552e:	2e af       	std	Y+62, r18	; 0x3e
    5530:	2b 97       	sbiw	r28, 0x0b	; 11
    5532:	43 cd       	rjmp	.-1402   	; 0x4fba <sens_calibrate+0x834>

00005534 <adc_rounds_cnt>:

// returns the number of ADC samples that have been collected, clear the counter by setting c to 0, or else use 0xFF for c
volatile inline uint8_t adc_rounds_cnt(uint8_t c)
{
	adc_new_cycle &= c;
    5534:	90 91 8d 03 	lds	r25, 0x038D
    5538:	98 23       	and	r25, r24
    553a:	90 93 8d 03 	sts	0x038D, r25
	return adc_new_cycle;
    553e:	80 91 8d 03 	lds	r24, 0x038D
    5542:	08 95       	ret

00005544 <__vector_24>:
#ifdef use_ordered_sensors
static uint8_t adc_chan_order[6];
#endif

ISR(ADC_vect)
{
    5544:	1f 92       	push	r1
    5546:	0f 92       	push	r0
    5548:	0f b6       	in	r0, 0x3f	; 63
    554a:	0f 92       	push	r0
    554c:	11 24       	eor	r1, r1
    554e:	6f 93       	push	r22
    5550:	7f 93       	push	r23
    5552:	8f 93       	push	r24
    5554:	9f 93       	push	r25
    5556:	af 93       	push	r26
    5558:	bf 93       	push	r27
    555a:	ef 93       	push	r30
    555c:	ff 93       	push	r31
	#ifdef use_ordered_sensors
	adc_res_t[adc_chan_order[adc_chan]] = ADC; // read
    555e:	e0 91 8c 03 	lds	r30, 0x038C
    5562:	f0 e0       	ldi	r31, 0x00	; 0
    5564:	e2 57       	subi	r30, 0x72	; 114
    5566:	fc 4f       	sbci	r31, 0xFC	; 252
    5568:	e0 81       	ld	r30, Z
    556a:	f0 e0       	ldi	r31, 0x00	; 0
    556c:	80 91 78 00 	lds	r24, 0x0078
    5570:	90 91 79 00 	lds	r25, 0x0079
    5574:	a0 e0       	ldi	r26, 0x00	; 0
    5576:	b0 e0       	ldi	r27, 0x00	; 0
    5578:	ee 0f       	add	r30, r30
    557a:	ff 1f       	adc	r31, r31
    557c:	ee 0f       	add	r30, r30
    557e:	ff 1f       	adc	r31, r31
    5580:	e4 5d       	subi	r30, 0xD4	; 212
    5582:	fc 4f       	sbci	r31, 0xFC	; 252
    5584:	80 83       	st	Z, r24
    5586:	91 83       	std	Z+1, r25	; 0x01
    5588:	a2 83       	std	Z+2, r26	; 0x02
    558a:	b3 83       	std	Z+3, r27	; 0x03
	#else
	adc_res_t[adc_chan] = ADC; // read
	#endif
	
	adc_chan++; // next channel
    558c:	80 91 8c 03 	lds	r24, 0x038C
    5590:	8f 5f       	subi	r24, 0xFF	; 255
    5592:	80 93 8c 03 	sts	0x038C, r24
	adc_chan %= 6; // overflow channel count
    5596:	80 91 8c 03 	lds	r24, 0x038C
    559a:	66 e0       	ldi	r22, 0x06	; 6
    559c:	0e 94 a5 3c 	call	0x794a	; 0x794a <__udivmodqi4>
    55a0:	90 93 8c 03 	sts	0x038C, r25
	
	#ifdef use_ordered_sensors
	ADMUX = (ADMUX & 0b11100000) | adc_chan_order[adc_chan]; // set channel
    55a4:	90 91 7c 00 	lds	r25, 0x007C
    55a8:	e0 91 8c 03 	lds	r30, 0x038C
    55ac:	f0 e0       	ldi	r31, 0x00	; 0
    55ae:	e2 57       	subi	r30, 0x72	; 114
    55b0:	fc 4f       	sbci	r31, 0xFC	; 252
    55b2:	90 7e       	andi	r25, 0xE0	; 224
    55b4:	80 81       	ld	r24, Z
    55b6:	98 2b       	or	r25, r24
    55b8:	90 93 7c 00 	sts	0x007C, r25
	#else
	ADMUX = (ADMUX & 0b11100000) | adc_chan; // set channel
	#endif
	
	ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // start read
    55bc:	8f ec       	ldi	r24, 0xCF	; 207
    55be:	80 93 7a 00 	sts	0x007A, r24
	if(adc_chan == 0)
    55c2:	80 91 8c 03 	lds	r24, 0x038C
    55c6:	88 23       	and	r24, r24
    55c8:	69 f0       	breq	.+26     	; 0x55e4 <__vector_24+0xa0>
	{
		// copy to second array while interrupts are disabled
		memcpy(adc_res, adc_res_t, sizeof(int32_t) * 8);
		adc_new_cycle++;
	}
}
    55ca:	ff 91       	pop	r31
    55cc:	ef 91       	pop	r30
    55ce:	bf 91       	pop	r27
    55d0:	af 91       	pop	r26
    55d2:	9f 91       	pop	r25
    55d4:	8f 91       	pop	r24
    55d6:	7f 91       	pop	r23
    55d8:	6f 91       	pop	r22
    55da:	0f 90       	pop	r0
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	0f 90       	pop	r0
    55e0:	1f 90       	pop	r1
    55e2:	18 95       	reti
	
	ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // start read
	if(adc_chan == 0)
	{
		// copy to second array while interrupts are disabled
		memcpy(adc_res, adc_res_t, sizeof(int32_t) * 8);
    55e4:	ac e4       	ldi	r26, 0x4C	; 76
    55e6:	b3 e0       	ldi	r27, 0x03	; 3
    55e8:	ec e2       	ldi	r30, 0x2C	; 44
    55ea:	f3 e0       	ldi	r31, 0x03	; 3
    55ec:	80 e2       	ldi	r24, 0x20	; 32
    55ee:	01 90       	ld	r0, Z+
    55f0:	0d 92       	st	X+, r0
    55f2:	81 50       	subi	r24, 0x01	; 1
    55f4:	e1 f7       	brne	.-8      	; 0x55ee <__vector_24+0xaa>
		adc_new_cycle++;
    55f6:	80 91 8d 03 	lds	r24, 0x038D
    55fa:	8f 5f       	subi	r24, 0xFF	; 255
    55fc:	80 93 8d 03 	sts	0x038D, r24
    5600:	e4 cf       	rjmp	.-56     	; 0x55ca <__vector_24+0x86>

00005602 <calc_atan2>:


#ifdef use_atan

volatile inline int32_t calc_atan2(int32_t y, int32_t x)
{
    5602:	2f 92       	push	r2
    5604:	3f 92       	push	r3
    5606:	4f 92       	push	r4
    5608:	5f 92       	push	r5
    560a:	6f 92       	push	r6
    560c:	7f 92       	push	r7
    560e:	8f 92       	push	r8
    5610:	9f 92       	push	r9
    5612:	af 92       	push	r10
    5614:	bf 92       	push	r11
    5616:	cf 92       	push	r12
    5618:	df 92       	push	r13
    561a:	ef 92       	push	r14
    561c:	ff 92       	push	r15
    561e:	0f 93       	push	r16
    5620:	1f 93       	push	r17
    5622:	df 93       	push	r29
    5624:	cf 93       	push	r28
    5626:	00 d0       	rcall	.+0      	; 0x5628 <calc_atan2+0x26>
    5628:	00 d0       	rcall	.+0      	; 0x562a <calc_atan2+0x28>
    562a:	cd b7       	in	r28, 0x3d	; 61
    562c:	de b7       	in	r29, 0x3e	; 62
    562e:	69 83       	std	Y+1, r22	; 0x01
    5630:	7a 83       	std	Y+2, r23	; 0x02
    5632:	8b 83       	std	Y+3, r24	; 0x03
    5634:	9c 83       	std	Y+4, r25	; 0x04
    5636:	59 01       	movw	r10, r18
    5638:	6a 01       	movw	r12, r20
        // calculate arctan angle using opposite length and adjacent length
        // using look up table with the division of opp/adj as the address
        
        int32_t z = 0;
        if(calc_abs(x) > calc_abs(y))
    563a:	19 01       	movw	r2, r18
    563c:	2a 01       	movw	r4, r20
    563e:	57 fd       	sbrc	r21, 7
    5640:	d1 c0       	rjmp	.+418    	; 0x57e4 <calc_atan2+0x1e2>
    5642:	69 80       	ldd	r6, Y+1	; 0x01
    5644:	7a 80       	ldd	r7, Y+2	; 0x02
    5646:	8b 80       	ldd	r8, Y+3	; 0x03
    5648:	9c 80       	ldd	r9, Y+4	; 0x04
    564a:	97 fc       	sbrc	r9, 7
    564c:	c2 c0       	rjmp	.+388    	; 0x57d2 <calc_atan2+0x1d0>
    564e:	62 14       	cp	r6, r2
    5650:	73 04       	cpc	r7, r3
    5652:	84 04       	cpc	r8, r4
    5654:	95 04       	cpc	r9, r5
    5656:	0c f0       	brlt	.+2      	; 0x565a <calc_atan2+0x58>
    5658:	58 c0       	rjmp	.+176    	; 0x570a <calc_atan2+0x108>
        else if(x == y)
        {
                z = atan_multiplier;
        }

        int32_t r_ = pgm_read_dword(&(atan_tbl[calc_abs(z)]));
    565a:	c6 01       	movw	r24, r12
    565c:	b5 01       	movw	r22, r10
    565e:	22 e0       	ldi	r18, 0x02	; 2
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	40 e0       	ldi	r20, 0x00	; 0
    5664:	50 e0       	ldi	r21, 0x00	; 0
    5666:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    566a:	79 01       	movw	r14, r18
    566c:	8a 01       	movw	r16, r20
    566e:	69 81       	ldd	r22, Y+1	; 0x01
    5670:	7a 81       	ldd	r23, Y+2	; 0x02
    5672:	8b 81       	ldd	r24, Y+3	; 0x03
    5674:	9c 81       	ldd	r25, Y+4	; 0x04
    5676:	28 e6       	ldi	r18, 0x68	; 104
    5678:	31 e0       	ldi	r19, 0x01	; 1
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	50 e0       	ldi	r21, 0x00	; 0
    567e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5682:	e6 0e       	add	r14, r22
    5684:	f7 1e       	adc	r15, r23
    5686:	08 1f       	adc	r16, r24
    5688:	19 1f       	adc	r17, r25
    568a:	c8 01       	movw	r24, r16
    568c:	b7 01       	movw	r22, r14
    568e:	a6 01       	movw	r20, r12
    5690:	95 01       	movw	r18, r10
    5692:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    5696:	c9 01       	movw	r24, r18
    5698:	da 01       	movw	r26, r20
    569a:	b7 fd       	sbrc	r27, 7
    569c:	bf c0       	rjmp	.+382    	; 0x581c <calc_atan2+0x21a>
    569e:	fc 01       	movw	r30, r24
    56a0:	ee 0f       	add	r30, r30
    56a2:	ff 1f       	adc	r31, r31
    56a4:	ee 0f       	add	r30, r30
    56a6:	ff 1f       	adc	r31, r31
    56a8:	e9 57       	subi	r30, 0x79	; 121
    56aa:	fe 4f       	sbci	r31, 0xFE	; 254
    56ac:	85 91       	lpm	r24, Z+
    56ae:	95 91       	lpm	r25, Z+
    56b0:	a5 91       	lpm	r26, Z+
    56b2:	b4 91       	lpm	r27, Z+
    56b4:	9c 01       	movw	r18, r24
    56b6:	ad 01       	movw	r20, r26
        int32_t _r = r_;
        int32_t r;

        if(calc_abs(x) < calc_abs(y))
    56b8:	26 14       	cp	r2, r6
    56ba:	37 04       	cpc	r3, r7
    56bc:	48 04       	cpc	r4, r8
    56be:	59 04       	cpc	r5, r9
    56c0:	0c f4       	brge	.+2      	; 0x56c4 <calc_atan2+0xc2>
    56c2:	58 c0       	rjmp	.+176    	; 0x5774 <calc_atan2+0x172>
        {
                _r = (90 * MATH_MULTIPLIER) - r_;
        }

        if(x >= 0)
    56c4:	d7 fc       	sbrc	r13, 7
    56c6:	60 c0       	rjmp	.+192    	; 0x5788 <calc_atan2+0x186>
        {
                if(y < 0)
    56c8:	29 81       	ldd	r18, Y+1	; 0x01
    56ca:	3a 81       	ldd	r19, Y+2	; 0x02
    56cc:	4b 81       	ldd	r20, Y+3	; 0x03
    56ce:	5c 81       	ldd	r21, Y+4	; 0x04
    56d0:	57 fd       	sbrc	r21, 7
    56d2:	90 c0       	rjmp	.+288    	; 0x57f4 <calc_atan2+0x1f2>
    56d4:	9c 01       	movw	r18, r24
    56d6:	ad 01       	movw	r20, r26
                r = y >= 0 ? (180 * MATH_MULTIPLIER) - _r : (-180 * MATH_MULTIPLIER) + _r;
        }

        return r;
        // note that angle is returned in degrees
}
    56d8:	b9 01       	movw	r22, r18
    56da:	ca 01       	movw	r24, r20
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	0f 90       	pop	r0
    56e2:	0f 90       	pop	r0
    56e4:	cf 91       	pop	r28
    56e6:	df 91       	pop	r29
    56e8:	1f 91       	pop	r17
    56ea:	0f 91       	pop	r16
    56ec:	ff 90       	pop	r15
    56ee:	ef 90       	pop	r14
    56f0:	df 90       	pop	r13
    56f2:	cf 90       	pop	r12
    56f4:	bf 90       	pop	r11
    56f6:	af 90       	pop	r10
    56f8:	9f 90       	pop	r9
    56fa:	8f 90       	pop	r8
    56fc:	7f 90       	pop	r7
    56fe:	6f 90       	pop	r6
    5700:	5f 90       	pop	r5
    5702:	4f 90       	pop	r4
    5704:	3f 90       	pop	r3
    5706:	2f 90       	pop	r2
    5708:	08 95       	ret
        int32_t z = 0;
        if(calc_abs(x) > calc_abs(y))
        {
                z = calc_multi(y, atan_multiplier, x);
        }
        else if(calc_abs(x) < calc_abs(y))
    570a:	26 14       	cp	r2, r6
    570c:	37 04       	cpc	r3, r7
    570e:	48 04       	cpc	r4, r8
    5710:	59 04       	cpc	r5, r9
    5712:	0c f0       	brlt	.+2      	; 0x5716 <calc_atan2+0x114>
    5714:	48 c0       	rjmp	.+144    	; 0x57a6 <calc_atan2+0x1a4>
        else if(x == y)
        {
                z = atan_multiplier;
        }

        int32_t r_ = pgm_read_dword(&(atan_tbl[calc_abs(z)]));
    5716:	c6 01       	movw	r24, r12
    5718:	b5 01       	movw	r22, r10
    571a:	28 e6       	ldi	r18, 0x68	; 104
    571c:	31 e0       	ldi	r19, 0x01	; 1
    571e:	40 e0       	ldi	r20, 0x00	; 0
    5720:	50 e0       	ldi	r21, 0x00	; 0
    5722:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5726:	7b 01       	movw	r14, r22
    5728:	8c 01       	movw	r16, r24
    572a:	69 81       	ldd	r22, Y+1	; 0x01
    572c:	7a 81       	ldd	r23, Y+2	; 0x02
    572e:	8b 81       	ldd	r24, Y+3	; 0x03
    5730:	9c 81       	ldd	r25, Y+4	; 0x04
    5732:	22 e0       	ldi	r18, 0x02	; 2
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	40 e0       	ldi	r20, 0x00	; 0
    5738:	50 e0       	ldi	r21, 0x00	; 0
    573a:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    573e:	e2 0e       	add	r14, r18
    5740:	f3 1e       	adc	r15, r19
    5742:	04 1f       	adc	r16, r20
    5744:	15 1f       	adc	r17, r21
    5746:	c8 01       	movw	r24, r16
    5748:	b7 01       	movw	r22, r14
    574a:	29 81       	ldd	r18, Y+1	; 0x01
    574c:	3a 81       	ldd	r19, Y+2	; 0x02
    574e:	4b 81       	ldd	r20, Y+3	; 0x03
    5750:	5c 81       	ldd	r21, Y+4	; 0x04
    5752:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    5756:	c9 01       	movw	r24, r18
    5758:	da 01       	movw	r26, r20
    575a:	b7 fd       	sbrc	r27, 7
    575c:	6e c0       	rjmp	.+220    	; 0x583a <calc_atan2+0x238>
    575e:	fc 01       	movw	r30, r24
    5760:	ee 0f       	add	r30, r30
    5762:	ff 1f       	adc	r31, r31
    5764:	ee 0f       	add	r30, r30
    5766:	ff 1f       	adc	r31, r31
    5768:	e9 57       	subi	r30, 0x79	; 121
    576a:	fe 4f       	sbci	r31, 0xFE	; 254
    576c:	25 91       	lpm	r18, Z+
    576e:	35 91       	lpm	r19, Z+
    5770:	45 91       	lpm	r20, Z+
    5772:	54 91       	lpm	r21, Z+
        int32_t _r = r_;
        int32_t r;

        if(calc_abs(x) < calc_abs(y))
        {
                _r = (90 * MATH_MULTIPLIER) - r_;
    5774:	80 e9       	ldi	r24, 0x90	; 144
    5776:	9f e5       	ldi	r25, 0x5F	; 95
    5778:	a0 e0       	ldi	r26, 0x00	; 0
    577a:	b0 e0       	ldi	r27, 0x00	; 0
    577c:	82 1b       	sub	r24, r18
    577e:	93 0b       	sbc	r25, r19
    5780:	a4 0b       	sbc	r26, r20
    5782:	b5 0b       	sbc	r27, r21
        }

        if(x >= 0)
    5784:	d7 fe       	sbrs	r13, 7
    5786:	a0 cf       	rjmp	.-192    	; 0x56c8 <calc_atan2+0xc6>
                }
                r = _r;
        }
        else
        {
                r = y >= 0 ? (180 * MATH_MULTIPLIER) - _r : (-180 * MATH_MULTIPLIER) + _r;
    5788:	29 81       	ldd	r18, Y+1	; 0x01
    578a:	3a 81       	ldd	r19, Y+2	; 0x02
    578c:	4b 81       	ldd	r20, Y+3	; 0x03
    578e:	5c 81       	ldd	r21, Y+4	; 0x04
    5790:	57 fd       	sbrc	r21, 7
    5792:	4c c0       	rjmp	.+152    	; 0x582c <calc_atan2+0x22a>
    5794:	20 e2       	ldi	r18, 0x20	; 32
    5796:	3f eb       	ldi	r19, 0xBF	; 191
    5798:	4f ef       	ldi	r20, 0xFF	; 255
    579a:	5f ef       	ldi	r21, 0xFF	; 255
    579c:	28 1b       	sub	r18, r24
    579e:	39 0b       	sbc	r19, r25
    57a0:	4a 0b       	sbc	r20, r26
    57a2:	5b 0b       	sbc	r21, r27
    57a4:	99 cf       	rjmp	.-206    	; 0x56d8 <calc_atan2+0xd6>
        }
        else if(calc_abs(x) < calc_abs(y))
        {
                z = calc_multi(x, atan_multiplier, y);
        }
        else if(x == 0 && y == 0)
    57a6:	a1 14       	cp	r10, r1
    57a8:	b1 04       	cpc	r11, r1
    57aa:	c1 04       	cpc	r12, r1
    57ac:	d1 04       	cpc	r13, r1
    57ae:	51 f5       	brne	.+84     	; 0x5804 <calc_atan2+0x202>
    57b0:	29 81       	ldd	r18, Y+1	; 0x01
    57b2:	3a 81       	ldd	r19, Y+2	; 0x02
    57b4:	4b 81       	ldd	r20, Y+3	; 0x03
    57b6:	5c 81       	ldd	r21, Y+4	; 0x04
    57b8:	21 15       	cp	r18, r1
    57ba:	31 05       	cpc	r19, r1
    57bc:	41 05       	cpc	r20, r1
    57be:	51 05       	cpc	r21, r1
    57c0:	09 f4       	brne	.+2      	; 0x57c4 <calc_atan2+0x1c2>
    57c2:	43 c0       	rjmp	.+134    	; 0x584a <calc_atan2+0x248>
                }
                r = _r;
        }
        else
        {
                r = y >= 0 ? (180 * MATH_MULTIPLIER) - _r : (-180 * MATH_MULTIPLIER) + _r;
    57c4:	e7 e8       	ldi	r30, 0x87	; 135
    57c6:	f1 e0       	ldi	r31, 0x01	; 1
        else if(x == y)
        {
                z = atan_multiplier;
        }

        int32_t r_ = pgm_read_dword(&(atan_tbl[calc_abs(z)]));
    57c8:	85 91       	lpm	r24, Z+
    57ca:	95 91       	lpm	r25, Z+
    57cc:	a5 91       	lpm	r26, Z+
    57ce:	b4 91       	lpm	r27, Z+
    57d0:	79 cf       	rjmp	.-270    	; 0x56c4 <calc_atan2+0xc2>
{
        // calculate arctan angle using opposite length and adjacent length
        // using look up table with the division of opp/adj as the address
        
        int32_t z = 0;
        if(calc_abs(x) > calc_abs(y))
    57d2:	90 94       	com	r9
    57d4:	80 94       	com	r8
    57d6:	70 94       	com	r7
    57d8:	60 94       	com	r6
    57da:	61 1c       	adc	r6, r1
    57dc:	71 1c       	adc	r7, r1
    57de:	81 1c       	adc	r8, r1
    57e0:	91 1c       	adc	r9, r1
    57e2:	35 cf       	rjmp	.-406    	; 0x564e <calc_atan2+0x4c>
    57e4:	22 24       	eor	r2, r2
    57e6:	33 24       	eor	r3, r3
    57e8:	21 01       	movw	r4, r2
    57ea:	22 1a       	sub	r2, r18
    57ec:	33 0a       	sbc	r3, r19
    57ee:	44 0a       	sbc	r4, r20
    57f0:	55 0a       	sbc	r5, r21
    57f2:	27 cf       	rjmp	.-434    	; 0x5642 <calc_atan2+0x40>

        if(x >= 0)
        {
                if(y < 0)
                {
                        _r *= -1;
    57f4:	22 27       	eor	r18, r18
    57f6:	33 27       	eor	r19, r19
    57f8:	a9 01       	movw	r20, r18
    57fa:	28 1b       	sub	r18, r24
    57fc:	39 0b       	sbc	r19, r25
    57fe:	4a 0b       	sbc	r20, r26
    5800:	5b 0b       	sbc	r21, r27
    5802:	6a cf       	rjmp	.-300    	; 0x56d8 <calc_atan2+0xd6>
        }
        else if(x == 0 && y == 0)
        {
                return 0;
        }
        else if(x == y)
    5804:	89 81       	ldd	r24, Y+1	; 0x01
    5806:	9a 81       	ldd	r25, Y+2	; 0x02
    5808:	ab 81       	ldd	r26, Y+3	; 0x03
    580a:	bc 81       	ldd	r27, Y+4	; 0x04
    580c:	a8 16       	cp	r10, r24
    580e:	b9 06       	cpc	r11, r25
    5810:	ca 06       	cpc	r12, r26
    5812:	db 06       	cpc	r13, r27
    5814:	b9 f6       	brne	.-82     	; 0x57c4 <calc_atan2+0x1c2>
                }
                r = _r;
        }
        else
        {
                r = y >= 0 ? (180 * MATH_MULTIPLIER) - _r : (-180 * MATH_MULTIPLIER) + _r;
    5816:	e7 e2       	ldi	r30, 0x27	; 39
    5818:	f7 e0       	ldi	r31, 0x07	; 7
    581a:	d6 cf       	rjmp	.-84     	; 0x57c8 <calc_atan2+0x1c6>
        else if(x == y)
        {
                z = atan_multiplier;
        }

        int32_t r_ = pgm_read_dword(&(atan_tbl[calc_abs(z)]));
    581c:	b0 95       	com	r27
    581e:	a0 95       	com	r26
    5820:	90 95       	com	r25
    5822:	81 95       	neg	r24
    5824:	9f 4f       	sbci	r25, 0xFF	; 255
    5826:	af 4f       	sbci	r26, 0xFF	; 255
    5828:	bf 4f       	sbci	r27, 0xFF	; 255
    582a:	39 cf       	rjmp	.-398    	; 0x569e <calc_atan2+0x9c>
                }
                r = _r;
        }
        else
        {
                r = y >= 0 ? (180 * MATH_MULTIPLIER) - _r : (-180 * MATH_MULTIPLIER) + _r;
    582c:	9c 01       	movw	r18, r24
    582e:	ad 01       	movw	r20, r26
    5830:	20 52       	subi	r18, 0x20	; 32
    5832:	3f 4b       	sbci	r19, 0xBF	; 191
    5834:	4f 4f       	sbci	r20, 0xFF	; 255
    5836:	5f 4f       	sbci	r21, 0xFF	; 255
    5838:	4f cf       	rjmp	.-354    	; 0x56d8 <calc_atan2+0xd6>
        else if(x == y)
        {
                z = atan_multiplier;
        }

        int32_t r_ = pgm_read_dword(&(atan_tbl[calc_abs(z)]));
    583a:	b0 95       	com	r27
    583c:	a0 95       	com	r26
    583e:	90 95       	com	r25
    5840:	81 95       	neg	r24
    5842:	9f 4f       	sbci	r25, 0xFF	; 255
    5844:	af 4f       	sbci	r26, 0xFF	; 255
    5846:	bf 4f       	sbci	r27, 0xFF	; 255
    5848:	8a cf       	rjmp	.-236    	; 0x575e <calc_atan2+0x15c>
        }
        else if(calc_abs(x) < calc_abs(y))
        {
                z = calc_multi(x, atan_multiplier, y);
        }
        else if(x == 0 && y == 0)
    584a:	20 e0       	ldi	r18, 0x00	; 0
    584c:	30 e0       	ldi	r19, 0x00	; 0
    584e:	40 e0       	ldi	r20, 0x00	; 0
    5850:	50 e0       	ldi	r21, 0x00	; 0
    5852:	42 cf       	rjmp	.-380    	; 0x56d8 <calc_atan2+0xd6>

00005854 <PID_mv>:
}

#endif

volatile inline int32_t PID_mv(PID_data * pid, int32_t kp, int32_t ki, int32_t kd, int32_t current, int32_t target)
{
    5854:	4f 92       	push	r4
    5856:	5f 92       	push	r5
    5858:	6f 92       	push	r6
    585a:	7f 92       	push	r7
    585c:	8f 92       	push	r8
    585e:	9f 92       	push	r9
    5860:	af 92       	push	r10
    5862:	bf 92       	push	r11
    5864:	cf 92       	push	r12
    5866:	df 92       	push	r13
    5868:	ef 92       	push	r14
    586a:	ff 92       	push	r15
    586c:	0f 93       	push	r16
    586e:	1f 93       	push	r17
    5870:	df 93       	push	r29
    5872:	cf 93       	push	r28
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	28 97       	sbiw	r28, 0x08	; 8
    587a:	0f b6       	in	r0, 0x3f	; 63
    587c:	f8 94       	cli
    587e:	de bf       	out	0x3e, r29	; 62
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	cd bf       	out	0x3d, r28	; 61
    5884:	2c 01       	movw	r4, r24
    5886:	49 83       	std	Y+1, r20	; 0x01
    5888:	5a 83       	std	Y+2, r21	; 0x02
    588a:	6b 83       	std	Y+3, r22	; 0x03
    588c:	7c 83       	std	Y+4, r23	; 0x04
    588e:	0d 83       	std	Y+5, r16	; 0x05
    5890:	1e 83       	std	Y+6, r17	; 0x06
    5892:	2f 83       	std	Y+7, r18	; 0x07
    5894:	38 87       	std	Y+8, r19	; 0x08
    5896:	a7 01       	movw	r20, r14
    5898:	96 01       	movw	r18, r12
    589a:	eb 8c       	ldd	r14, Y+27	; 0x1b
    589c:	fc 8c       	ldd	r15, Y+28	; 0x1c
    589e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    58a0:	1e 8d       	ldd	r17, Y+30	; 0x1e
        // proportional, integral, derivative
        // refer to external resources to learn more about this functioln
        
        int32_t err = target - current;
    58a2:	e8 18       	sub	r14, r8
    58a4:	f9 08       	sbc	r15, r9
    58a6:	0a 09       	sbc	r16, r10
    58a8:	1b 09       	sbc	r17, r11

        pid->err_sum = calc_constrain(pid->err_sum + err, -1000000, 1000000);
    58aa:	dc 01       	movw	r26, r24
    58ac:	6d 91       	ld	r22, X+
    58ae:	7d 91       	ld	r23, X+
    58b0:	8d 91       	ld	r24, X+
    58b2:	9c 91       	ld	r25, X
    58b4:	6e 0d       	add	r22, r14
    58b6:	7f 1d       	adc	r23, r15
    58b8:	80 1f       	adc	r24, r16
    58ba:	91 1f       	adc	r25, r17
    58bc:	61 34       	cpi	r22, 0x41	; 65
    58be:	b2 e4       	ldi	r27, 0x42	; 66
    58c0:	7b 07       	cpc	r23, r27
    58c2:	bf e0       	ldi	r27, 0x0F	; 15
    58c4:	8b 07       	cpc	r24, r27
    58c6:	b0 e0       	ldi	r27, 0x00	; 0
    58c8:	9b 07       	cpc	r25, r27
    58ca:	24 f0       	brlt	.+8      	; 0x58d4 <PID_mv+0x80>
    58cc:	60 e4       	ldi	r22, 0x40	; 64
    58ce:	72 e4       	ldi	r23, 0x42	; 66
    58d0:	8f e0       	ldi	r24, 0x0F	; 15
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	3b 01       	movw	r6, r22
    58d6:	4c 01       	movw	r8, r24
    58d8:	60 3c       	cpi	r22, 0xC0	; 192
    58da:	ed eb       	ldi	r30, 0xBD	; 189
    58dc:	7e 07       	cpc	r23, r30
    58de:	e0 ef       	ldi	r30, 0xF0	; 240
    58e0:	8e 07       	cpc	r24, r30
    58e2:	ef ef       	ldi	r30, 0xFF	; 255
    58e4:	9e 07       	cpc	r25, r30
    58e6:	44 f4       	brge	.+16     	; 0x58f8 <PID_mv+0xa4>
    58e8:	60 ec       	ldi	r22, 0xC0	; 192
    58ea:	66 2e       	mov	r6, r22
    58ec:	6d eb       	ldi	r22, 0xBD	; 189
    58ee:	76 2e       	mov	r7, r22
    58f0:	60 ef       	ldi	r22, 0xF0	; 240
    58f2:	86 2e       	mov	r8, r22
    58f4:	6f ef       	ldi	r22, 0xFF	; 255
    58f6:	96 2e       	mov	r9, r22
    58f8:	d2 01       	movw	r26, r4
    58fa:	6d 92       	st	X+, r6
    58fc:	7d 92       	st	X+, r7
    58fe:	8d 92       	st	X+, r8
    5900:	9c 92       	st	X, r9
    5902:	13 97       	sbiw	r26, 0x03	; 3

        int32_t delta_err = err - pid->err_last;

        int32_t mv = err * kp + pid->err_sum * ki + delta_err * kd;
    5904:	14 96       	adiw	r26, 0x04	; 4
    5906:	8d 91       	ld	r24, X+
    5908:	9d 91       	ld	r25, X+
    590a:	0d 90       	ld	r0, X+
    590c:	bc 91       	ld	r27, X
    590e:	a0 2d       	mov	r26, r0
    5910:	57 01       	movw	r10, r14
    5912:	68 01       	movw	r12, r16
    5914:	a8 1a       	sub	r10, r24
    5916:	b9 0a       	sbc	r11, r25
    5918:	ca 0a       	sbc	r12, r26
    591a:	db 0a       	sbc	r13, r27
    591c:	c6 01       	movw	r24, r12
    591e:	b5 01       	movw	r22, r10
    5920:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5924:	5b 01       	movw	r10, r22
    5926:	6c 01       	movw	r12, r24

        pid->err_last = err;
    5928:	d2 01       	movw	r26, r4
    592a:	14 96       	adiw	r26, 0x04	; 4
    592c:	ed 92       	st	X+, r14
    592e:	fd 92       	st	X+, r15
    5930:	0d 93       	st	X+, r16
    5932:	1c 93       	st	X, r17
    5934:	17 97       	sbiw	r26, 0x07	; 7
    5936:	c8 01       	movw	r24, r16
    5938:	b7 01       	movw	r22, r14
    593a:	29 81       	ldd	r18, Y+1	; 0x01
    593c:	3a 81       	ldd	r19, Y+2	; 0x02
    593e:	4b 81       	ldd	r20, Y+3	; 0x03
    5940:	5c 81       	ldd	r21, Y+4	; 0x04
    5942:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5946:	7b 01       	movw	r14, r22
    5948:	8c 01       	movw	r16, r24
    594a:	84 ef       	ldi	r24, 0xF4	; 244
    594c:	91 e0       	ldi	r25, 0x01	; 1
    594e:	a0 e0       	ldi	r26, 0x00	; 0
    5950:	b0 e0       	ldi	r27, 0x00	; 0
    5952:	e8 0e       	add	r14, r24
    5954:	f9 1e       	adc	r15, r25
    5956:	0a 1f       	adc	r16, r26
    5958:	1b 1f       	adc	r17, r27
    595a:	ea 0c       	add	r14, r10
    595c:	fb 1c       	adc	r15, r11
    595e:	0c 1d       	adc	r16, r12
    5960:	1d 1d       	adc	r17, r13
    5962:	c4 01       	movw	r24, r8
    5964:	b3 01       	movw	r22, r6
    5966:	2d 81       	ldd	r18, Y+5	; 0x05
    5968:	3e 81       	ldd	r19, Y+6	; 0x06
    596a:	4f 81       	ldd	r20, Y+7	; 0x07
    596c:	58 85       	ldd	r21, Y+8	; 0x08
    596e:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5972:	e6 0e       	add	r14, r22
    5974:	f7 1e       	adc	r15, r23
    5976:	08 1f       	adc	r16, r24
    5978:	19 1f       	adc	r17, r25
    597a:	c8 01       	movw	r24, r16
    597c:	b7 01       	movw	r22, r14
    597e:	28 ee       	ldi	r18, 0xE8	; 232
    5980:	33 e0       	ldi	r19, 0x03	; 3
    5982:	40 e0       	ldi	r20, 0x00	; 0
    5984:	50 e0       	ldi	r21, 0x00	; 0
    5986:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    598a:	ca 01       	movw	r24, r20

        return calc_multi(mv, 1, MATH_MULTIPLIER);
}
    598c:	b9 01       	movw	r22, r18
    598e:	28 96       	adiw	r28, 0x08	; 8
    5990:	0f b6       	in	r0, 0x3f	; 63
    5992:	f8 94       	cli
    5994:	de bf       	out	0x3e, r29	; 62
    5996:	0f be       	out	0x3f, r0	; 63
    5998:	cd bf       	out	0x3d, r28	; 61
    599a:	cf 91       	pop	r28
    599c:	df 91       	pop	r29
    599e:	1f 91       	pop	r17
    59a0:	0f 91       	pop	r16
    59a2:	ff 90       	pop	r15
    59a4:	ef 90       	pop	r14
    59a6:	df 90       	pop	r13
    59a8:	cf 90       	pop	r12
    59aa:	bf 90       	pop	r11
    59ac:	af 90       	pop	r10
    59ae:	9f 90       	pop	r9
    59b0:	8f 90       	pop	r8
    59b2:	7f 90       	pop	r7
    59b4:	6f 90       	pop	r6
    59b6:	5f 90       	pop	r5
    59b8:	4f 90       	pop	r4
    59ba:	08 95       	ret

000059bc <PID_init>:

inline PID_data PID_init()
{
    59bc:	df 93       	push	r29
    59be:	cf 93       	push	r28
    59c0:	cd b7       	in	r28, 0x3d	; 61
    59c2:	de b7       	in	r29, 0x3e	; 62
    59c4:	28 97       	sbiw	r28, 0x08	; 8
    59c6:	0f b6       	in	r0, 0x3f	; 63
    59c8:	f8 94       	cli
    59ca:	de bf       	out	0x3e, r29	; 62
    59cc:	0f be       	out	0x3f, r0	; 63
    59ce:	cd bf       	out	0x3d, r28	; 61
        // create a PID persistent data structure and reset its values
        PID_data r;
        r.err_sum = 0;
        r.err_last = 0;
        return r;
    59d0:	1d 82       	std	Y+5, r1	; 0x05
    59d2:	1e 82       	std	Y+6, r1	; 0x06
    59d4:	1f 82       	std	Y+7, r1	; 0x07
    59d6:	18 86       	std	Y+8, r1	; 0x08
    59d8:	19 82       	std	Y+1, r1	; 0x01
    59da:	1a 82       	std	Y+2, r1	; 0x02
    59dc:	1b 82       	std	Y+3, r1	; 0x03
    59de:	1c 82       	std	Y+4, r1	; 0x04
    59e0:	29 81       	ldd	r18, Y+1	; 0x01
    59e2:	3a 81       	ldd	r19, Y+2	; 0x02
    59e4:	4b 81       	ldd	r20, Y+3	; 0x03
    59e6:	5c 81       	ldd	r21, Y+4	; 0x04
    59e8:	6d 81       	ldd	r22, Y+5	; 0x05
    59ea:	7e 81       	ldd	r23, Y+6	; 0x06
}
    59ec:	8f 81       	ldd	r24, Y+7	; 0x07
    59ee:	98 85       	ldd	r25, Y+8	; 0x08
    59f0:	28 96       	adiw	r28, 0x08	; 8
    59f2:	0f b6       	in	r0, 0x3f	; 63
    59f4:	f8 94       	cli
    59f6:	de bf       	out	0x3e, r29	; 62
    59f8:	0f be       	out	0x3f, r0	; 63
    59fa:	cd bf       	out	0x3d, r28	; 61
    59fc:	cf 91       	pop	r28
    59fe:	df 91       	pop	r29
    5a00:	08 95       	ret

00005a02 <complementary_filter>:

#ifdef use_comp_filter

volatile inline int32_t complementary_filter(int32_t * ang, int32_t accel_ang, int32_t gyro_r, int32_t w, int32_t dt)
{
    5a02:	2f 92       	push	r2
    5a04:	3f 92       	push	r3
    5a06:	4f 92       	push	r4
    5a08:	5f 92       	push	r5
    5a0a:	6f 92       	push	r6
    5a0c:	7f 92       	push	r7
    5a0e:	8f 92       	push	r8
    5a10:	9f 92       	push	r9
    5a12:	af 92       	push	r10
    5a14:	bf 92       	push	r11
    5a16:	cf 92       	push	r12
    5a18:	df 92       	push	r13
    5a1a:	ef 92       	push	r14
    5a1c:	ff 92       	push	r15
    5a1e:	0f 93       	push	r16
    5a20:	1f 93       	push	r17
    5a22:	df 93       	push	r29
    5a24:	cf 93       	push	r28
    5a26:	00 d0       	rcall	.+0      	; 0x5a28 <complementary_filter+0x26>
    5a28:	00 d0       	rcall	.+0      	; 0x5a2a <complementary_filter+0x28>
    5a2a:	cd b7       	in	r28, 0x3d	; 61
    5a2c:	de b7       	in	r29, 0x3e	; 62
    5a2e:	1c 01       	movw	r2, r24
    5a30:	2a 01       	movw	r4, r20
    5a32:	3b 01       	movw	r6, r22
    5a34:	a9 01       	movw	r20, r18
    5a36:	98 01       	movw	r18, r16
    5a38:	c5 01       	movw	r24, r10
    5a3a:	b4 01       	movw	r22, r8
        volatile int32_t g = calc_multi(gyro_r, dt, MATH_MULTIPLIER);
    5a3c:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5a40:	6c 50       	subi	r22, 0x0C	; 12
    5a42:	7e 4f       	sbci	r23, 0xFE	; 254
    5a44:	8f 4f       	sbci	r24, 0xFF	; 255
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	e8 ee       	ldi	r30, 0xE8	; 232
    5a4a:	8e 2e       	mov	r8, r30
    5a4c:	e3 e0       	ldi	r30, 0x03	; 3
    5a4e:	9e 2e       	mov	r9, r30
    5a50:	a1 2c       	mov	r10, r1
    5a52:	b1 2c       	mov	r11, r1
    5a54:	28 ee       	ldi	r18, 0xE8	; 232
    5a56:	33 e0       	ldi	r19, 0x03	; 3
    5a58:	40 e0       	ldi	r20, 0x00	; 0
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
    5a5c:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    5a60:	c9 01       	movw	r24, r18
    5a62:	da 01       	movw	r26, r20
    5a64:	89 83       	std	Y+1, r24	; 0x01
    5a66:	9a 83       	std	Y+2, r25	; 0x02
    5a68:	ab 83       	std	Y+3, r26	; 0x03
    5a6a:	bc 83       	std	Y+4, r27	; 0x04
        *ang = calc_multi
    5a6c:	29 81       	ldd	r18, Y+1	; 0x01
    5a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    5a70:	4b 81       	ldd	r20, Y+3	; 0x03
    5a72:	5c 81       	ldd	r21, Y+4	; 0x04
    5a74:	8c 18       	sub	r8, r12
    5a76:	9d 08       	sbc	r9, r13
    5a78:	ae 08       	sbc	r10, r14
    5a7a:	bf 08       	sbc	r11, r15
    5a7c:	f1 01       	movw	r30, r2
    5a7e:	80 81       	ld	r24, Z
    5a80:	91 81       	ldd	r25, Z+1	; 0x01
    5a82:	a2 81       	ldd	r26, Z+2	; 0x02
    5a84:	b3 81       	ldd	r27, Z+3	; 0x03
    5a86:	28 0f       	add	r18, r24
    5a88:	39 1f       	adc	r19, r25
    5a8a:	4a 1f       	adc	r20, r26
    5a8c:	5b 1f       	adc	r21, r27
    5a8e:	c5 01       	movw	r24, r10
    5a90:	b4 01       	movw	r22, r8
    5a92:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5a96:	6c 50       	subi	r22, 0x0C	; 12
    5a98:	7e 4f       	sbci	r23, 0xFE	; 254
    5a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a9e:	28 ee       	ldi	r18, 0xE8	; 232
    5aa0:	33 e0       	ldi	r19, 0x03	; 3
    5aa2:	40 e0       	ldi	r20, 0x00	; 0
    5aa4:	50 e0       	ldi	r21, 0x00	; 0
    5aa6:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    5aaa:	49 01       	movw	r8, r18
    5aac:	5a 01       	movw	r10, r20
    5aae:	c7 01       	movw	r24, r14
    5ab0:	b6 01       	movw	r22, r12
    5ab2:	a3 01       	movw	r20, r6
    5ab4:	92 01       	movw	r18, r4
    5ab6:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    5aba:	6c 50       	subi	r22, 0x0C	; 12
    5abc:	7e 4f       	sbci	r23, 0xFE	; 254
    5abe:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac2:	28 ee       	ldi	r18, 0xE8	; 232
    5ac4:	33 e0       	ldi	r19, 0x03	; 3
    5ac6:	40 e0       	ldi	r20, 0x00	; 0
    5ac8:	50 e0       	ldi	r21, 0x00	; 0
    5aca:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <__divmodsi4>
    5ace:	82 0e       	add	r8, r18
    5ad0:	93 1e       	adc	r9, r19
    5ad2:	a4 1e       	adc	r10, r20
    5ad4:	b5 1e       	adc	r11, r21
    5ad6:	f1 01       	movw	r30, r2
    5ad8:	80 82       	st	Z, r8
    5ada:	91 82       	std	Z+1, r9	; 0x01
    5adc:	a2 82       	std	Z+2, r10	; 0x02
    5ade:	b3 82       	std	Z+3, r11	; 0x03
                                (MATH_MULTIPLIER - w),
                                (*ang + g),
                                MATH_MULTIPLIER
                        ) + calc_multi(w, accel_ang, MATH_MULTIPLIER);
        return *ang;
}
    5ae0:	b4 01       	movw	r22, r8
    5ae2:	c5 01       	movw	r24, r10
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	0f 90       	pop	r0
    5aea:	0f 90       	pop	r0
    5aec:	cf 91       	pop	r28
    5aee:	df 91       	pop	r29
    5af0:	1f 91       	pop	r17
    5af2:	0f 91       	pop	r16
    5af4:	ff 90       	pop	r15
    5af6:	ef 90       	pop	r14
    5af8:	df 90       	pop	r13
    5afa:	cf 90       	pop	r12
    5afc:	bf 90       	pop	r11
    5afe:	af 90       	pop	r10
    5b00:	9f 90       	pop	r9
    5b02:	8f 90       	pop	r8
    5b04:	7f 90       	pop	r7
    5b06:	6f 90       	pop	r6
    5b08:	5f 90       	pop	r5
    5b0a:	4f 90       	pop	r4
    5b0c:	3f 90       	pop	r3
    5b0e:	2f 90       	pop	r2
    5b10:	08 95       	ret

00005b12 <calibration_default>:
#ifndef calibration_autogen_functs_h
#define calibration_autogen_functs_h
void calibration_default(Calibration * x)
{
    5b12:	fc 01       	movw	r30, r24
	x->f_mot_bot = 0;
    5b14:	10 82       	st	Z, r1
    5b16:	11 82       	std	Z+1, r1	; 0x01
    5b18:	12 82       	std	Z+2, r1	; 0x02
    5b1a:	13 82       	std	Z+3, r1	; 0x03
	x->b_mot_bot = 0;
    5b1c:	14 82       	std	Z+4, r1	; 0x04
    5b1e:	15 82       	std	Z+5, r1	; 0x05
    5b20:	16 82       	std	Z+6, r1	; 0x06
    5b22:	17 82       	std	Z+7, r1	; 0x07
	x->l_mot_bot = 0;
    5b24:	10 86       	std	Z+8, r1	; 0x08
    5b26:	11 86       	std	Z+9, r1	; 0x09
    5b28:	12 86       	std	Z+10, r1	; 0x0a
    5b2a:	13 86       	std	Z+11, r1	; 0x0b
	x->r_mot_bot = 0;
    5b2c:	14 86       	std	Z+12, r1	; 0x0c
    5b2e:	15 86       	std	Z+13, r1	; 0x0d
    5b30:	16 86       	std	Z+14, r1	; 0x0e
    5b32:	17 86       	std	Z+15, r1	; 0x0f
	x->f_mot_scale = MATH_MULTI;
    5b34:	28 ee       	ldi	r18, 0xE8	; 232
    5b36:	33 e0       	ldi	r19, 0x03	; 3
    5b38:	40 e0       	ldi	r20, 0x00	; 0
    5b3a:	50 e0       	ldi	r21, 0x00	; 0
    5b3c:	20 8b       	std	Z+16, r18	; 0x10
    5b3e:	31 8b       	std	Z+17, r19	; 0x11
    5b40:	42 8b       	std	Z+18, r20	; 0x12
    5b42:	53 8b       	std	Z+19, r21	; 0x13
	x->b_mot_scale = MATH_MULTI;
    5b44:	24 8b       	std	Z+20, r18	; 0x14
    5b46:	35 8b       	std	Z+21, r19	; 0x15
    5b48:	46 8b       	std	Z+22, r20	; 0x16
    5b4a:	57 8b       	std	Z+23, r21	; 0x17
	x->l_mot_scale = MATH_MULTI;
    5b4c:	20 8f       	std	Z+24, r18	; 0x18
    5b4e:	31 8f       	std	Z+25, r19	; 0x19
    5b50:	42 8f       	std	Z+26, r20	; 0x1a
    5b52:	53 8f       	std	Z+27, r21	; 0x1b
	x->r_mot_scale = MATH_MULTI;
    5b54:	24 8f       	std	Z+28, r18	; 0x1c
    5b56:	35 8f       	std	Z+29, r19	; 0x1d
    5b58:	46 8f       	std	Z+30, r20	; 0x1e
    5b5a:	57 8f       	std	Z+31, r21	; 0x1f
	x->motor_mode = 0b00000000;
    5b5c:	10 a2       	std	Z+32, r1	; 0x20
	x->yaw_gyro_scale = MATH_MULTI;
    5b5e:	21 a3       	std	Z+33, r18	; 0x21
    5b60:	32 a3       	std	Z+34, r19	; 0x22
    5b62:	43 a3       	std	Z+35, r20	; 0x23
    5b64:	54 a3       	std	Z+36, r21	; 0x24
	x->roll_accel_bot = 294;
    5b66:	86 e2       	ldi	r24, 0x26	; 38
    5b68:	91 e0       	ldi	r25, 0x01	; 1
    5b6a:	a0 e0       	ldi	r26, 0x00	; 0
    5b6c:	b0 e0       	ldi	r27, 0x00	; 0
    5b6e:	85 a3       	std	Z+37, r24	; 0x25
    5b70:	96 a3       	std	Z+38, r25	; 0x26
    5b72:	a7 a3       	std	Z+39, r26	; 0x27
    5b74:	b0 a7       	std	Z+40, r27	; 0x28
	x->roll_accel_center = 544;
    5b76:	80 e2       	ldi	r24, 0x20	; 32
    5b78:	92 e0       	ldi	r25, 0x02	; 2
    5b7a:	a0 e0       	ldi	r26, 0x00	; 0
    5b7c:	b0 e0       	ldi	r27, 0x00	; 0
    5b7e:	81 a7       	std	Z+41, r24	; 0x29
    5b80:	92 a7       	std	Z+42, r25	; 0x2a
    5b82:	a3 a7       	std	Z+43, r26	; 0x2b
    5b84:	b4 a7       	std	Z+44, r27	; 0x2c
	x->roll_accel_top = 796;
    5b86:	8c e1       	ldi	r24, 0x1C	; 28
    5b88:	93 e0       	ldi	r25, 0x03	; 3
    5b8a:	a0 e0       	ldi	r26, 0x00	; 0
    5b8c:	b0 e0       	ldi	r27, 0x00	; 0
    5b8e:	85 a7       	std	Z+45, r24	; 0x2d
    5b90:	96 a7       	std	Z+46, r25	; 0x2e
    5b92:	a7 a7       	std	Z+47, r26	; 0x2f
    5b94:	b0 ab       	std	Z+48, r27	; 0x30
	x->pitch_accel_bot = 303;
    5b96:	8f e2       	ldi	r24, 0x2F	; 47
    5b98:	91 e0       	ldi	r25, 0x01	; 1
    5b9a:	a0 e0       	ldi	r26, 0x00	; 0
    5b9c:	b0 e0       	ldi	r27, 0x00	; 0
    5b9e:	81 ab       	std	Z+49, r24	; 0x31
    5ba0:	92 ab       	std	Z+50, r25	; 0x32
    5ba2:	a3 ab       	std	Z+51, r26	; 0x33
    5ba4:	b4 ab       	std	Z+52, r27	; 0x34
	x->pitch_accel_center = 551;
    5ba6:	87 e2       	ldi	r24, 0x27	; 39
    5ba8:	92 e0       	ldi	r25, 0x02	; 2
    5baa:	a0 e0       	ldi	r26, 0x00	; 0
    5bac:	b0 e0       	ldi	r27, 0x00	; 0
    5bae:	85 ab       	std	Z+53, r24	; 0x35
    5bb0:	96 ab       	std	Z+54, r25	; 0x36
    5bb2:	a7 ab       	std	Z+55, r26	; 0x37
    5bb4:	b0 af       	std	Z+56, r27	; 0x38
	x->pitch_accel_top = 812;
    5bb6:	8c e2       	ldi	r24, 0x2C	; 44
    5bb8:	93 e0       	ldi	r25, 0x03	; 3
    5bba:	a0 e0       	ldi	r26, 0x00	; 0
    5bbc:	b0 e0       	ldi	r27, 0x00	; 0
    5bbe:	81 af       	std	Z+57, r24	; 0x39
    5bc0:	92 af       	std	Z+58, r25	; 0x3a
    5bc2:	a3 af       	std	Z+59, r26	; 0x3b
    5bc4:	b4 af       	std	Z+60, r27	; 0x3c
	x->vert_accel_bot = 255;
    5bc6:	fd 96       	adiw	r30, 0x3d	; 61
    5bc8:	8f ef       	ldi	r24, 0xFF	; 255
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	a0 e0       	ldi	r26, 0x00	; 0
    5bce:	b0 e0       	ldi	r27, 0x00	; 0
    5bd0:	81 93       	st	Z+, r24
    5bd2:	91 93       	st	Z+, r25
    5bd4:	a1 93       	st	Z+, r26
    5bd6:	b1 93       	st	Z+, r27
	x->vert_accel_top = 756;
    5bd8:	84 ef       	ldi	r24, 0xF4	; 244
    5bda:	92 e0       	ldi	r25, 0x02	; 2
    5bdc:	a0 e0       	ldi	r26, 0x00	; 0
    5bde:	b0 e0       	ldi	r27, 0x00	; 0
    5be0:	81 93       	st	Z+, r24
    5be2:	91 93       	st	Z+, r25
    5be4:	a1 93       	st	Z+, r26
    5be6:	b1 93       	st	Z+, r27
	x->pitch_angle_offset = 0;
    5be8:	11 92       	st	Z+, r1
    5bea:	11 92       	st	Z+, r1
    5bec:	11 92       	st	Z+, r1
    5bee:	11 92       	st	Z+, r1
	x->roll_angle_offset = 0;
    5bf0:	11 92       	st	Z+, r1
    5bf2:	11 92       	st	Z+, r1
    5bf4:	11 92       	st	Z+, r1
    5bf6:	11 92       	st	Z+, r1
	x->pitch_gyro_to_rate = 6;
    5bf8:	86 e0       	ldi	r24, 0x06	; 6
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	a0 e0       	ldi	r26, 0x00	; 0
    5bfe:	b0 e0       	ldi	r27, 0x00	; 0
    5c00:	81 93       	st	Z+, r24
    5c02:	91 93       	st	Z+, r25
    5c04:	a1 93       	st	Z+, r26
    5c06:	b1 93       	st	Z+, r27
	x->roll_gyro_to_rate = 6;
    5c08:	81 93       	st	Z+, r24
    5c0a:	91 93       	st	Z+, r25
    5c0c:	a1 93       	st	Z+, r26
    5c0e:	b1 93       	st	Z+, r27
	x->roll_ppm_center = ticks_500us * 3;
    5c10:	80 e3       	ldi	r24, 0x30	; 48
    5c12:	95 e7       	ldi	r25, 0x75	; 117
    5c14:	a0 e0       	ldi	r26, 0x00	; 0
    5c16:	b0 e0       	ldi	r27, 0x00	; 0
    5c18:	81 93       	st	Z+, r24
    5c1a:	91 93       	st	Z+, r25
    5c1c:	a1 93       	st	Z+, r26
    5c1e:	b1 93       	st	Z+, r27
	x->pitch_ppm_center = ticks_500us * 3;
    5c20:	81 93       	st	Z+, r24
    5c22:	91 93       	st	Z+, r25
    5c24:	a1 93       	st	Z+, r26
    5c26:	b1 93       	st	Z+, r27
	x->yaw_ppm_center = ticks_500us * 3;
    5c28:	81 93       	st	Z+, r24
    5c2a:	91 93       	st	Z+, r25
    5c2c:	a1 93       	st	Z+, r26
    5c2e:	b1 93       	st	Z+, r27
	x->throttle_ppm_center = ticks_500us * 3;
    5c30:	81 93       	st	Z+, r24
    5c32:	91 93       	st	Z+, r25
    5c34:	a1 93       	st	Z+, r26
    5c36:	b1 93       	st	Z+, r27
	x->roll_ppm_scale = MATH_MULTI;
    5c38:	21 93       	st	Z+, r18
    5c3a:	31 93       	st	Z+, r19
    5c3c:	41 93       	st	Z+, r20
    5c3e:	51 93       	st	Z+, r21
	x->pitch_ppm_scale = MATH_MULTI;
    5c40:	21 93       	st	Z+, r18
    5c42:	31 93       	st	Z+, r19
    5c44:	41 93       	st	Z+, r20
    5c46:	51 93       	st	Z+, r21
	x->yaw_ppm_scale = MATH_MULTI;
    5c48:	21 93       	st	Z+, r18
    5c4a:	31 93       	st	Z+, r19
    5c4c:	41 93       	st	Z+, r20
    5c4e:	51 93       	st	Z+, r21
	x->throttle_ppm_scale = MATH_MULTI;
    5c50:	21 93       	st	Z+, r18
    5c52:	31 93       	st	Z+, r19
    5c54:	41 93       	st	Z+, r20
    5c56:	51 93       	st	Z+, r21
	x->throttle_hover = ticks_500us * 3;
    5c58:	81 93       	st	Z+, r24
    5c5a:	91 93       	st	Z+, r25
    5c5c:	a1 93       	st	Z+, r26
    5c5e:	b1 93       	st	Z+, r27
	x->roll_level_kp = MATH_MULTI;
    5c60:	21 93       	st	Z+, r18
    5c62:	31 93       	st	Z+, r19
    5c64:	41 93       	st	Z+, r20
    5c66:	51 93       	st	Z+, r21
	x->roll_level_ki = 0;
    5c68:	11 92       	st	Z+, r1
    5c6a:	11 92       	st	Z+, r1
    5c6c:	11 92       	st	Z+, r1
    5c6e:	11 92       	st	Z+, r1
	x->roll_level_kd = 0;
    5c70:	11 92       	st	Z+, r1
    5c72:	11 92       	st	Z+, r1
    5c74:	11 92       	st	Z+, r1
    5c76:	11 92       	st	Z+, r1
	x->pitch_level_kp = MATH_MULTI;
    5c78:	21 93       	st	Z+, r18
    5c7a:	31 93       	st	Z+, r19
    5c7c:	41 93       	st	Z+, r20
    5c7e:	51 93       	st	Z+, r21
	x->pitch_level_ki = 0;
    5c80:	11 92       	st	Z+, r1
    5c82:	11 92       	st	Z+, r1
    5c84:	11 92       	st	Z+, r1
    5c86:	11 92       	st	Z+, r1
	x->pitch_level_kd = 0;
    5c88:	11 92       	st	Z+, r1
    5c8a:	11 92       	st	Z+, r1
    5c8c:	11 92       	st	Z+, r1
    5c8e:	11 92       	st	Z+, r1
	x->roll_rate_kp = MATH_MULTI;
    5c90:	21 93       	st	Z+, r18
    5c92:	31 93       	st	Z+, r19
    5c94:	41 93       	st	Z+, r20
    5c96:	51 93       	st	Z+, r21
	x->roll_rate_ki = 0;
    5c98:	11 92       	st	Z+, r1
    5c9a:	11 92       	st	Z+, r1
    5c9c:	11 92       	st	Z+, r1
    5c9e:	11 92       	st	Z+, r1
	x->roll_rate_kd = 0;
    5ca0:	11 92       	st	Z+, r1
    5ca2:	11 92       	st	Z+, r1
    5ca4:	11 92       	st	Z+, r1
    5ca6:	11 92       	st	Z+, r1
	x->pitch_rate_kp = MATH_MULTI;
    5ca8:	21 93       	st	Z+, r18
    5caa:	31 93       	st	Z+, r19
    5cac:	41 93       	st	Z+, r20
    5cae:	51 93       	st	Z+, r21
	x->pitch_rate_ki = 0;
    5cb0:	11 92       	st	Z+, r1
    5cb2:	11 92       	st	Z+, r1
    5cb4:	11 92       	st	Z+, r1
    5cb6:	11 92       	st	Z+, r1
	x->pitch_rate_kd = 0;
    5cb8:	11 92       	st	Z+, r1
    5cba:	11 92       	st	Z+, r1
    5cbc:	11 92       	st	Z+, r1
    5cbe:	11 92       	st	Z+, r1
	x->yaw_kp = MATH_MULTI;
    5cc0:	21 93       	st	Z+, r18
    5cc2:	31 93       	st	Z+, r19
    5cc4:	41 93       	st	Z+, r20
    5cc6:	51 93       	st	Z+, r21
	x->yaw_ki = 0;
    5cc8:	11 92       	st	Z+, r1
    5cca:	11 92       	st	Z+, r1
    5ccc:	11 92       	st	Z+, r1
    5cce:	11 92       	st	Z+, r1
	x->yaw_kd = 0;
    5cd0:	11 92       	st	Z+, r1
    5cd2:	11 92       	st	Z+, r1
    5cd4:	11 92       	st	Z+, r1
    5cd6:	11 92       	st	Z+, r1
	x->yaw_ppm_chan = 0;
    5cd8:	11 92       	st	Z+, r1
	x->throttle_ppm_chan = 1;
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	81 93       	st	Z+, r24
	x->pitch_ppm_chan = 2;
    5cde:	82 e0       	ldi	r24, 0x02	; 2
    5ce0:	81 93       	st	Z+, r24
	x->roll_ppm_chan = 3;
    5ce2:	83 e0       	ldi	r24, 0x03	; 3
    5ce4:	81 93       	st	Z+, r24
	x->unlock_ppm_chan = 5;
    5ce6:	85 e0       	ldi	r24, 0x05	; 5
    5ce8:	81 93       	st	Z+, r24
	x->delta_time_const = MATH_MULTI;
    5cea:	21 93       	st	Z+, r18
    5cec:	31 93       	st	Z+, r19
    5cee:	41 93       	st	Z+, r20
    5cf0:	51 93       	st	Z+, r21
	x->comp_filter_w = MATH_MULTI / 2;
    5cf2:	84 ef       	ldi	r24, 0xF4	; 244
    5cf4:	91 e0       	ldi	r25, 0x01	; 1
    5cf6:	a0 e0       	ldi	r26, 0x00	; 0
    5cf8:	b0 e0       	ldi	r27, 0x00	; 0
    5cfa:	81 93       	st	Z+, r24
    5cfc:	91 93       	st	Z+, r25
    5cfe:	a1 93       	st	Z+, r26
    5d00:	b1 93       	st	Z+, r27
	x->button_hold_down = 250;
    5d02:	8a ef       	ldi	r24, 0xFA	; 250
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	a0 e0       	ldi	r26, 0x00	; 0
    5d08:	b0 e0       	ldi	r27, 0x00	; 0
    5d0a:	80 83       	st	Z, r24
    5d0c:	91 83       	std	Z+1, r25	; 0x01
    5d0e:	a2 83       	std	Z+2, r26	; 0x02
    5d10:	b3 83       	std	Z+3, r27	; 0x03
}
    5d12:	08 95       	ret

00005d14 <calibration_write>:


void calibration_write(Calibration * x, int32_t addr, int32_t data)
{
    5d14:	0f 93       	push	r16
    5d16:	1f 93       	push	r17
    5d18:	dc 01       	movw	r26, r24
	switch(addr)
    5d1a:	fa 01       	movw	r30, r20
    5d1c:	46 33       	cpi	r20, 0x36	; 54
    5d1e:	51 05       	cpc	r21, r1
    5d20:	78 f4       	brcc	.+30     	; 0x5d40 <calibration_write+0x2c>
    5d22:	e2 5c       	subi	r30, 0xC2	; 194
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	ee 0f       	add	r30, r30
    5d28:	ff 1f       	adc	r31, r31
    5d2a:	05 90       	lpm	r0, Z+
    5d2c:	f4 91       	lpm	r31, Z+
    5d2e:	e0 2d       	mov	r30, r0
    5d30:	09 94       	ijmp
			break;
		case 52:
			x->comp_filter_w = (int32_t)data;
			break;
		case 53:
			x->button_hold_down = (uint32_t)data;
    5d32:	fc 01       	movw	r30, r24
    5d34:	ee 53       	subi	r30, 0x3E	; 62
    5d36:	ff 4f       	sbci	r31, 0xFF	; 255
    5d38:	00 83       	st	Z, r16
    5d3a:	11 83       	std	Z+1, r17	; 0x01
    5d3c:	22 83       	std	Z+2, r18	; 0x02
    5d3e:	33 83       	std	Z+3, r19	; 0x03
			break;
		default:
			break;
	}
}
    5d40:	1f 91       	pop	r17
    5d42:	0f 91       	pop	r16
    5d44:	08 95       	ret
			break;
		case 51:
			x->delta_time_const = (int32_t)data;
			break;
		case 52:
			x->comp_filter_w = (int32_t)data;
    5d46:	fc 01       	movw	r30, r24
    5d48:	e2 54       	subi	r30, 0x42	; 66
    5d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4c:	00 83       	st	Z, r16
    5d4e:	11 83       	std	Z+1, r17	; 0x01
    5d50:	22 83       	std	Z+2, r18	; 0x02
    5d52:	33 83       	std	Z+3, r19	; 0x03
    5d54:	f5 cf       	rjmp	.-22     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 50:
			x->unlock_ppm_chan = (uint8_t)data;
			break;
		case 51:
			x->delta_time_const = (int32_t)data;
    5d56:	fc 01       	movw	r30, r24
    5d58:	e6 54       	subi	r30, 0x46	; 70
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	00 83       	st	Z, r16
    5d5e:	11 83       	std	Z+1, r17	; 0x01
    5d60:	22 83       	std	Z+2, r18	; 0x02
    5d62:	33 83       	std	Z+3, r19	; 0x03
    5d64:	ed cf       	rjmp	.-38     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 49:
			x->roll_ppm_chan = (uint8_t)data;
			break;
		case 50:
			x->unlock_ppm_chan = (uint8_t)data;
    5d66:	a7 54       	subi	r26, 0x47	; 71
    5d68:	bf 4f       	sbci	r27, 0xFF	; 255
    5d6a:	0c 93       	st	X, r16
    5d6c:	e9 cf       	rjmp	.-46     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 48:
			x->pitch_ppm_chan = (uint8_t)data;
			break;
		case 49:
			x->roll_ppm_chan = (uint8_t)data;
    5d6e:	a8 54       	subi	r26, 0x48	; 72
    5d70:	bf 4f       	sbci	r27, 0xFF	; 255
    5d72:	0c 93       	st	X, r16
    5d74:	e5 cf       	rjmp	.-54     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 47:
			x->throttle_ppm_chan = (uint8_t)data;
			break;
		case 48:
			x->pitch_ppm_chan = (uint8_t)data;
    5d76:	a9 54       	subi	r26, 0x49	; 73
    5d78:	bf 4f       	sbci	r27, 0xFF	; 255
    5d7a:	0c 93       	st	X, r16
    5d7c:	e1 cf       	rjmp	.-62     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 46:
			x->yaw_ppm_chan = (uint8_t)data;
			break;
		case 47:
			x->throttle_ppm_chan = (uint8_t)data;
    5d7e:	aa 54       	subi	r26, 0x4A	; 74
    5d80:	bf 4f       	sbci	r27, 0xFF	; 255
    5d82:	0c 93       	st	X, r16
    5d84:	dd cf       	rjmp	.-70     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 45:
			x->yaw_kd = (int32_t)data;
			break;
		case 46:
			x->yaw_ppm_chan = (uint8_t)data;
    5d86:	ab 54       	subi	r26, 0x4B	; 75
    5d88:	bf 4f       	sbci	r27, 0xFF	; 255
    5d8a:	0c 93       	st	X, r16
    5d8c:	d9 cf       	rjmp	.-78     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 44:
			x->yaw_ki = (int32_t)data;
			break;
		case 45:
			x->yaw_kd = (int32_t)data;
    5d8e:	fc 01       	movw	r30, r24
    5d90:	ef 54       	subi	r30, 0x4F	; 79
    5d92:	ff 4f       	sbci	r31, 0xFF	; 255
    5d94:	00 83       	st	Z, r16
    5d96:	11 83       	std	Z+1, r17	; 0x01
    5d98:	22 83       	std	Z+2, r18	; 0x02
    5d9a:	33 83       	std	Z+3, r19	; 0x03
    5d9c:	d1 cf       	rjmp	.-94     	; 0x5d40 <calibration_write+0x2c>
			break;
		case 43:
			x->yaw_kp = (int32_t)data;
			break;
		case 44:
			x->yaw_ki = (int32_t)data;
    5d9e:	fc 01       	movw	r30, r24
    5da0:	e3 55       	subi	r30, 0x53	; 83
    5da2:	ff 4f       	sbci	r31, 0xFF	; 255
    5da4:	00 83       	st	Z, r16
    5da6:	11 83       	std	Z+1, r17	; 0x01
    5da8:	22 83       	std	Z+2, r18	; 0x02
    5daa:	33 83       	std	Z+3, r19	; 0x03
    5dac:	c9 cf       	rjmp	.-110    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 42:
			x->pitch_rate_kd = (int32_t)data;
			break;
		case 43:
			x->yaw_kp = (int32_t)data;
    5dae:	fc 01       	movw	r30, r24
    5db0:	e7 55       	subi	r30, 0x57	; 87
    5db2:	ff 4f       	sbci	r31, 0xFF	; 255
    5db4:	00 83       	st	Z, r16
    5db6:	11 83       	std	Z+1, r17	; 0x01
    5db8:	22 83       	std	Z+2, r18	; 0x02
    5dba:	33 83       	std	Z+3, r19	; 0x03
    5dbc:	c1 cf       	rjmp	.-126    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 41:
			x->pitch_rate_ki = (int32_t)data;
			break;
		case 42:
			x->pitch_rate_kd = (int32_t)data;
    5dbe:	fc 01       	movw	r30, r24
    5dc0:	eb 55       	subi	r30, 0x5B	; 91
    5dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc4:	00 83       	st	Z, r16
    5dc6:	11 83       	std	Z+1, r17	; 0x01
    5dc8:	22 83       	std	Z+2, r18	; 0x02
    5dca:	33 83       	std	Z+3, r19	; 0x03
    5dcc:	b9 cf       	rjmp	.-142    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 40:
			x->pitch_rate_kp = (int32_t)data;
			break;
		case 41:
			x->pitch_rate_ki = (int32_t)data;
    5dce:	fc 01       	movw	r30, r24
    5dd0:	ef 55       	subi	r30, 0x5F	; 95
    5dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd4:	00 83       	st	Z, r16
    5dd6:	11 83       	std	Z+1, r17	; 0x01
    5dd8:	22 83       	std	Z+2, r18	; 0x02
    5dda:	33 83       	std	Z+3, r19	; 0x03
    5ddc:	b1 cf       	rjmp	.-158    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 39:
			x->roll_rate_kd = (int32_t)data;
			break;
		case 40:
			x->pitch_rate_kp = (int32_t)data;
    5dde:	fc 01       	movw	r30, r24
    5de0:	e3 56       	subi	r30, 0x63	; 99
    5de2:	ff 4f       	sbci	r31, 0xFF	; 255
    5de4:	00 83       	st	Z, r16
    5de6:	11 83       	std	Z+1, r17	; 0x01
    5de8:	22 83       	std	Z+2, r18	; 0x02
    5dea:	33 83       	std	Z+3, r19	; 0x03
    5dec:	a9 cf       	rjmp	.-174    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 38:
			x->roll_rate_ki = (int32_t)data;
			break;
		case 39:
			x->roll_rate_kd = (int32_t)data;
    5dee:	fc 01       	movw	r30, r24
    5df0:	e7 56       	subi	r30, 0x67	; 103
    5df2:	ff 4f       	sbci	r31, 0xFF	; 255
    5df4:	00 83       	st	Z, r16
    5df6:	11 83       	std	Z+1, r17	; 0x01
    5df8:	22 83       	std	Z+2, r18	; 0x02
    5dfa:	33 83       	std	Z+3, r19	; 0x03
    5dfc:	a1 cf       	rjmp	.-190    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 37:
			x->roll_rate_kp = (int32_t)data;
			break;
		case 38:
			x->roll_rate_ki = (int32_t)data;
    5dfe:	fc 01       	movw	r30, r24
    5e00:	eb 56       	subi	r30, 0x6B	; 107
    5e02:	ff 4f       	sbci	r31, 0xFF	; 255
    5e04:	00 83       	st	Z, r16
    5e06:	11 83       	std	Z+1, r17	; 0x01
    5e08:	22 83       	std	Z+2, r18	; 0x02
    5e0a:	33 83       	std	Z+3, r19	; 0x03
    5e0c:	99 cf       	rjmp	.-206    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 36:
			x->pitch_level_kd = (int32_t)data;
			break;
		case 37:
			x->roll_rate_kp = (int32_t)data;
    5e0e:	fc 01       	movw	r30, r24
    5e10:	ef 56       	subi	r30, 0x6F	; 111
    5e12:	ff 4f       	sbci	r31, 0xFF	; 255
    5e14:	00 83       	st	Z, r16
    5e16:	11 83       	std	Z+1, r17	; 0x01
    5e18:	22 83       	std	Z+2, r18	; 0x02
    5e1a:	33 83       	std	Z+3, r19	; 0x03
    5e1c:	91 cf       	rjmp	.-222    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 35:
			x->pitch_level_ki = (int32_t)data;
			break;
		case 36:
			x->pitch_level_kd = (int32_t)data;
    5e1e:	fc 01       	movw	r30, r24
    5e20:	e3 57       	subi	r30, 0x73	; 115
    5e22:	ff 4f       	sbci	r31, 0xFF	; 255
    5e24:	00 83       	st	Z, r16
    5e26:	11 83       	std	Z+1, r17	; 0x01
    5e28:	22 83       	std	Z+2, r18	; 0x02
    5e2a:	33 83       	std	Z+3, r19	; 0x03
    5e2c:	89 cf       	rjmp	.-238    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 34:
			x->pitch_level_kp = (int32_t)data;
			break;
		case 35:
			x->pitch_level_ki = (int32_t)data;
    5e2e:	fc 01       	movw	r30, r24
    5e30:	e7 57       	subi	r30, 0x77	; 119
    5e32:	ff 4f       	sbci	r31, 0xFF	; 255
    5e34:	00 83       	st	Z, r16
    5e36:	11 83       	std	Z+1, r17	; 0x01
    5e38:	22 83       	std	Z+2, r18	; 0x02
    5e3a:	33 83       	std	Z+3, r19	; 0x03
    5e3c:	81 cf       	rjmp	.-254    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 33:
			x->roll_level_kd = (int32_t)data;
			break;
		case 34:
			x->pitch_level_kp = (int32_t)data;
    5e3e:	fc 01       	movw	r30, r24
    5e40:	eb 57       	subi	r30, 0x7B	; 123
    5e42:	ff 4f       	sbci	r31, 0xFF	; 255
    5e44:	00 83       	st	Z, r16
    5e46:	11 83       	std	Z+1, r17	; 0x01
    5e48:	22 83       	std	Z+2, r18	; 0x02
    5e4a:	33 83       	std	Z+3, r19	; 0x03
    5e4c:	79 cf       	rjmp	.-270    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 32:
			x->roll_level_ki = (int32_t)data;
			break;
		case 33:
			x->roll_level_kd = (int32_t)data;
    5e4e:	fc 01       	movw	r30, r24
    5e50:	ef 57       	subi	r30, 0x7F	; 127
    5e52:	ff 4f       	sbci	r31, 0xFF	; 255
    5e54:	00 83       	st	Z, r16
    5e56:	11 83       	std	Z+1, r17	; 0x01
    5e58:	22 83       	std	Z+2, r18	; 0x02
    5e5a:	33 83       	std	Z+3, r19	; 0x03
    5e5c:	71 cf       	rjmp	.-286    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 31:
			x->roll_level_kp = (int32_t)data;
			break;
		case 32:
			x->roll_level_ki = (int32_t)data;
    5e5e:	fc 01       	movw	r30, r24
    5e60:	e3 58       	subi	r30, 0x83	; 131
    5e62:	ff 4f       	sbci	r31, 0xFF	; 255
    5e64:	00 83       	st	Z, r16
    5e66:	11 83       	std	Z+1, r17	; 0x01
    5e68:	22 83       	std	Z+2, r18	; 0x02
    5e6a:	33 83       	std	Z+3, r19	; 0x03
    5e6c:	69 cf       	rjmp	.-302    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 30:
			x->throttle_hover = (int32_t)data;
			break;
		case 31:
			x->roll_level_kp = (int32_t)data;
    5e6e:	fc 01       	movw	r30, r24
    5e70:	e7 58       	subi	r30, 0x87	; 135
    5e72:	ff 4f       	sbci	r31, 0xFF	; 255
    5e74:	00 83       	st	Z, r16
    5e76:	11 83       	std	Z+1, r17	; 0x01
    5e78:	22 83       	std	Z+2, r18	; 0x02
    5e7a:	33 83       	std	Z+3, r19	; 0x03
    5e7c:	61 cf       	rjmp	.-318    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 29:
			x->throttle_ppm_scale = (int32_t)data;
			break;
		case 30:
			x->throttle_hover = (int32_t)data;
    5e7e:	fc 01       	movw	r30, r24
    5e80:	eb 58       	subi	r30, 0x8B	; 139
    5e82:	ff 4f       	sbci	r31, 0xFF	; 255
    5e84:	00 83       	st	Z, r16
    5e86:	11 83       	std	Z+1, r17	; 0x01
    5e88:	22 83       	std	Z+2, r18	; 0x02
    5e8a:	33 83       	std	Z+3, r19	; 0x03
    5e8c:	59 cf       	rjmp	.-334    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 28:
			x->yaw_ppm_scale = (int32_t)data;
			break;
		case 29:
			x->throttle_ppm_scale = (int32_t)data;
    5e8e:	fc 01       	movw	r30, r24
    5e90:	ef 58       	subi	r30, 0x8F	; 143
    5e92:	ff 4f       	sbci	r31, 0xFF	; 255
    5e94:	00 83       	st	Z, r16
    5e96:	11 83       	std	Z+1, r17	; 0x01
    5e98:	22 83       	std	Z+2, r18	; 0x02
    5e9a:	33 83       	std	Z+3, r19	; 0x03
    5e9c:	51 cf       	rjmp	.-350    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 27:
			x->pitch_ppm_scale = (int32_t)data;
			break;
		case 28:
			x->yaw_ppm_scale = (int32_t)data;
    5e9e:	fc 01       	movw	r30, r24
    5ea0:	e3 59       	subi	r30, 0x93	; 147
    5ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea4:	00 83       	st	Z, r16
    5ea6:	11 83       	std	Z+1, r17	; 0x01
    5ea8:	22 83       	std	Z+2, r18	; 0x02
    5eaa:	33 83       	std	Z+3, r19	; 0x03
    5eac:	49 cf       	rjmp	.-366    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 26:
			x->roll_ppm_scale = (int32_t)data;
			break;
		case 27:
			x->pitch_ppm_scale = (int32_t)data;
    5eae:	fc 01       	movw	r30, r24
    5eb0:	e7 59       	subi	r30, 0x97	; 151
    5eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb4:	00 83       	st	Z, r16
    5eb6:	11 83       	std	Z+1, r17	; 0x01
    5eb8:	22 83       	std	Z+2, r18	; 0x02
    5eba:	33 83       	std	Z+3, r19	; 0x03
    5ebc:	41 cf       	rjmp	.-382    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 25:
			x->throttle_ppm_center = (int32_t)data;
			break;
		case 26:
			x->roll_ppm_scale = (int32_t)data;
    5ebe:	fc 01       	movw	r30, r24
    5ec0:	eb 59       	subi	r30, 0x9B	; 155
    5ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec4:	00 83       	st	Z, r16
    5ec6:	11 83       	std	Z+1, r17	; 0x01
    5ec8:	22 83       	std	Z+2, r18	; 0x02
    5eca:	33 83       	std	Z+3, r19	; 0x03
    5ecc:	39 cf       	rjmp	.-398    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 24:
			x->yaw_ppm_center = (int32_t)data;
			break;
		case 25:
			x->throttle_ppm_center = (int32_t)data;
    5ece:	fc 01       	movw	r30, r24
    5ed0:	ef 59       	subi	r30, 0x9F	; 159
    5ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed4:	00 83       	st	Z, r16
    5ed6:	11 83       	std	Z+1, r17	; 0x01
    5ed8:	22 83       	std	Z+2, r18	; 0x02
    5eda:	33 83       	std	Z+3, r19	; 0x03
    5edc:	31 cf       	rjmp	.-414    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 23:
			x->pitch_ppm_center = (int32_t)data;
			break;
		case 24:
			x->yaw_ppm_center = (int32_t)data;
    5ede:	fc 01       	movw	r30, r24
    5ee0:	e3 5a       	subi	r30, 0xA3	; 163
    5ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee4:	00 83       	st	Z, r16
    5ee6:	11 83       	std	Z+1, r17	; 0x01
    5ee8:	22 83       	std	Z+2, r18	; 0x02
    5eea:	33 83       	std	Z+3, r19	; 0x03
    5eec:	29 cf       	rjmp	.-430    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 22:
			x->roll_ppm_center = (int32_t)data;
			break;
		case 23:
			x->pitch_ppm_center = (int32_t)data;
    5eee:	fc 01       	movw	r30, r24
    5ef0:	e7 5a       	subi	r30, 0xA7	; 167
    5ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef4:	00 83       	st	Z, r16
    5ef6:	11 83       	std	Z+1, r17	; 0x01
    5ef8:	22 83       	std	Z+2, r18	; 0x02
    5efa:	33 83       	std	Z+3, r19	; 0x03
    5efc:	21 cf       	rjmp	.-446    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 21:
			x->roll_gyro_to_rate = (int32_t)data;
			break;
		case 22:
			x->roll_ppm_center = (int32_t)data;
    5efe:	fc 01       	movw	r30, r24
    5f00:	eb 5a       	subi	r30, 0xAB	; 171
    5f02:	ff 4f       	sbci	r31, 0xFF	; 255
    5f04:	00 83       	st	Z, r16
    5f06:	11 83       	std	Z+1, r17	; 0x01
    5f08:	22 83       	std	Z+2, r18	; 0x02
    5f0a:	33 83       	std	Z+3, r19	; 0x03
    5f0c:	19 cf       	rjmp	.-462    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 20:
			x->pitch_gyro_to_rate = (int32_t)data;
			break;
		case 21:
			x->roll_gyro_to_rate = (int32_t)data;
    5f0e:	fc 01       	movw	r30, r24
    5f10:	ef 5a       	subi	r30, 0xAF	; 175
    5f12:	ff 4f       	sbci	r31, 0xFF	; 255
    5f14:	00 83       	st	Z, r16
    5f16:	11 83       	std	Z+1, r17	; 0x01
    5f18:	22 83       	std	Z+2, r18	; 0x02
    5f1a:	33 83       	std	Z+3, r19	; 0x03
    5f1c:	11 cf       	rjmp	.-478    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 19:
			x->roll_angle_offset = (int32_t)data;
			break;
		case 20:
			x->pitch_gyro_to_rate = (int32_t)data;
    5f1e:	fc 01       	movw	r30, r24
    5f20:	e3 5b       	subi	r30, 0xB3	; 179
    5f22:	ff 4f       	sbci	r31, 0xFF	; 255
    5f24:	00 83       	st	Z, r16
    5f26:	11 83       	std	Z+1, r17	; 0x01
    5f28:	22 83       	std	Z+2, r18	; 0x02
    5f2a:	33 83       	std	Z+3, r19	; 0x03
    5f2c:	09 cf       	rjmp	.-494    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 18:
			x->pitch_angle_offset = (int32_t)data;
			break;
		case 19:
			x->roll_angle_offset = (int32_t)data;
    5f2e:	fc 01       	movw	r30, r24
    5f30:	e7 5b       	subi	r30, 0xB7	; 183
    5f32:	ff 4f       	sbci	r31, 0xFF	; 255
    5f34:	00 83       	st	Z, r16
    5f36:	11 83       	std	Z+1, r17	; 0x01
    5f38:	22 83       	std	Z+2, r18	; 0x02
    5f3a:	33 83       	std	Z+3, r19	; 0x03
    5f3c:	01 cf       	rjmp	.-510    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 17:
			x->vert_accel_top = (int32_t)data;
			break;
		case 18:
			x->pitch_angle_offset = (int32_t)data;
    5f3e:	fc 01       	movw	r30, r24
    5f40:	eb 5b       	subi	r30, 0xBB	; 187
    5f42:	ff 4f       	sbci	r31, 0xFF	; 255
    5f44:	00 83       	st	Z, r16
    5f46:	11 83       	std	Z+1, r17	; 0x01
    5f48:	22 83       	std	Z+2, r18	; 0x02
    5f4a:	33 83       	std	Z+3, r19	; 0x03
    5f4c:	f9 ce       	rjmp	.-526    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 16:
			x->vert_accel_bot = (int32_t)data;
			break;
		case 17:
			x->vert_accel_top = (int32_t)data;
    5f4e:	fc 01       	movw	r30, r24
    5f50:	ef 5b       	subi	r30, 0xBF	; 191
    5f52:	ff 4f       	sbci	r31, 0xFF	; 255
    5f54:	00 83       	st	Z, r16
    5f56:	11 83       	std	Z+1, r17	; 0x01
    5f58:	22 83       	std	Z+2, r18	; 0x02
    5f5a:	33 83       	std	Z+3, r19	; 0x03
    5f5c:	f1 ce       	rjmp	.-542    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 15:
			x->pitch_accel_top = (int32_t)data;
			break;
		case 16:
			x->vert_accel_bot = (int32_t)data;
    5f5e:	fc 01       	movw	r30, r24
    5f60:	fd 96       	adiw	r30, 0x3d	; 61
    5f62:	00 83       	st	Z, r16
    5f64:	11 83       	std	Z+1, r17	; 0x01
    5f66:	22 83       	std	Z+2, r18	; 0x02
    5f68:	33 83       	std	Z+3, r19	; 0x03
    5f6a:	ea ce       	rjmp	.-556    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 14:
			x->pitch_accel_center = (int32_t)data;
			break;
		case 15:
			x->pitch_accel_top = (int32_t)data;
    5f6c:	d9 96       	adiw	r26, 0x39	; 57
    5f6e:	0c 93       	st	X, r16
    5f70:	d9 97       	sbiw	r26, 0x39	; 57
    5f72:	da 96       	adiw	r26, 0x3a	; 58
    5f74:	1c 93       	st	X, r17
    5f76:	da 97       	sbiw	r26, 0x3a	; 58
    5f78:	db 96       	adiw	r26, 0x3b	; 59
    5f7a:	2c 93       	st	X, r18
    5f7c:	db 97       	sbiw	r26, 0x3b	; 59
    5f7e:	dc 96       	adiw	r26, 0x3c	; 60
    5f80:	3c 93       	st	X, r19
    5f82:	de ce       	rjmp	.-580    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 13:
			x->pitch_accel_bot = (int32_t)data;
			break;
		case 14:
			x->pitch_accel_center = (int32_t)data;
    5f84:	d5 96       	adiw	r26, 0x35	; 53
    5f86:	0c 93       	st	X, r16
    5f88:	d5 97       	sbiw	r26, 0x35	; 53
    5f8a:	d6 96       	adiw	r26, 0x36	; 54
    5f8c:	1c 93       	st	X, r17
    5f8e:	d6 97       	sbiw	r26, 0x36	; 54
    5f90:	d7 96       	adiw	r26, 0x37	; 55
    5f92:	2c 93       	st	X, r18
    5f94:	d7 97       	sbiw	r26, 0x37	; 55
    5f96:	d8 96       	adiw	r26, 0x38	; 56
    5f98:	3c 93       	st	X, r19
    5f9a:	d2 ce       	rjmp	.-604    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 12:
			x->roll_accel_top = (int32_t)data;
			break;
		case 13:
			x->pitch_accel_bot = (int32_t)data;
    5f9c:	d1 96       	adiw	r26, 0x31	; 49
    5f9e:	0c 93       	st	X, r16
    5fa0:	d1 97       	sbiw	r26, 0x31	; 49
    5fa2:	d2 96       	adiw	r26, 0x32	; 50
    5fa4:	1c 93       	st	X, r17
    5fa6:	d2 97       	sbiw	r26, 0x32	; 50
    5fa8:	d3 96       	adiw	r26, 0x33	; 51
    5faa:	2c 93       	st	X, r18
    5fac:	d3 97       	sbiw	r26, 0x33	; 51
    5fae:	d4 96       	adiw	r26, 0x34	; 52
    5fb0:	3c 93       	st	X, r19
    5fb2:	c6 ce       	rjmp	.-628    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 11:
			x->roll_accel_center = (int32_t)data;
			break;
		case 12:
			x->roll_accel_top = (int32_t)data;
    5fb4:	9d 96       	adiw	r26, 0x2d	; 45
    5fb6:	0c 93       	st	X, r16
    5fb8:	9d 97       	sbiw	r26, 0x2d	; 45
    5fba:	9e 96       	adiw	r26, 0x2e	; 46
    5fbc:	1c 93       	st	X, r17
    5fbe:	9e 97       	sbiw	r26, 0x2e	; 46
    5fc0:	9f 96       	adiw	r26, 0x2f	; 47
    5fc2:	2c 93       	st	X, r18
    5fc4:	9f 97       	sbiw	r26, 0x2f	; 47
    5fc6:	d0 96       	adiw	r26, 0x30	; 48
    5fc8:	3c 93       	st	X, r19
    5fca:	ba ce       	rjmp	.-652    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 10:
			x->roll_accel_bot = (int32_t)data;
			break;
		case 11:
			x->roll_accel_center = (int32_t)data;
    5fcc:	99 96       	adiw	r26, 0x29	; 41
    5fce:	0c 93       	st	X, r16
    5fd0:	99 97       	sbiw	r26, 0x29	; 41
    5fd2:	9a 96       	adiw	r26, 0x2a	; 42
    5fd4:	1c 93       	st	X, r17
    5fd6:	9a 97       	sbiw	r26, 0x2a	; 42
    5fd8:	9b 96       	adiw	r26, 0x2b	; 43
    5fda:	2c 93       	st	X, r18
    5fdc:	9b 97       	sbiw	r26, 0x2b	; 43
    5fde:	9c 96       	adiw	r26, 0x2c	; 44
    5fe0:	3c 93       	st	X, r19
    5fe2:	ae ce       	rjmp	.-676    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 9:
			x->yaw_gyro_scale = (int32_t)data;
			break;
		case 10:
			x->roll_accel_bot = (int32_t)data;
    5fe4:	95 96       	adiw	r26, 0x25	; 37
    5fe6:	0c 93       	st	X, r16
    5fe8:	95 97       	sbiw	r26, 0x25	; 37
    5fea:	96 96       	adiw	r26, 0x26	; 38
    5fec:	1c 93       	st	X, r17
    5fee:	96 97       	sbiw	r26, 0x26	; 38
    5ff0:	97 96       	adiw	r26, 0x27	; 39
    5ff2:	2c 93       	st	X, r18
    5ff4:	97 97       	sbiw	r26, 0x27	; 39
    5ff6:	98 96       	adiw	r26, 0x28	; 40
    5ff8:	3c 93       	st	X, r19
    5ffa:	a2 ce       	rjmp	.-700    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 8:
			x->motor_mode = (uint8_t)data;
			break;
		case 9:
			x->yaw_gyro_scale = (int32_t)data;
    5ffc:	91 96       	adiw	r26, 0x21	; 33
    5ffe:	0c 93       	st	X, r16
    6000:	91 97       	sbiw	r26, 0x21	; 33
    6002:	92 96       	adiw	r26, 0x22	; 34
    6004:	1c 93       	st	X, r17
    6006:	92 97       	sbiw	r26, 0x22	; 34
    6008:	93 96       	adiw	r26, 0x23	; 35
    600a:	2c 93       	st	X, r18
    600c:	93 97       	sbiw	r26, 0x23	; 35
    600e:	94 96       	adiw	r26, 0x24	; 36
    6010:	3c 93       	st	X, r19
    6012:	96 ce       	rjmp	.-724    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 7:
			x->r_mot_scale = (int32_t)data;
			break;
		case 8:
			x->motor_mode = (uint8_t)data;
    6014:	90 96       	adiw	r26, 0x20	; 32
    6016:	0c 93       	st	X, r16
    6018:	93 ce       	rjmp	.-730    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 6:
			x->l_mot_scale = (int32_t)data;
			break;
		case 7:
			x->r_mot_scale = (int32_t)data;
    601a:	5c 96       	adiw	r26, 0x1c	; 28
    601c:	0c 93       	st	X, r16
    601e:	5c 97       	sbiw	r26, 0x1c	; 28
    6020:	5d 96       	adiw	r26, 0x1d	; 29
    6022:	1c 93       	st	X, r17
    6024:	5d 97       	sbiw	r26, 0x1d	; 29
    6026:	5e 96       	adiw	r26, 0x1e	; 30
    6028:	2c 93       	st	X, r18
    602a:	5e 97       	sbiw	r26, 0x1e	; 30
    602c:	5f 96       	adiw	r26, 0x1f	; 31
    602e:	3c 93       	st	X, r19
    6030:	87 ce       	rjmp	.-754    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 5:
			x->b_mot_scale = (int32_t)data;
			break;
		case 6:
			x->l_mot_scale = (int32_t)data;
    6032:	58 96       	adiw	r26, 0x18	; 24
    6034:	0c 93       	st	X, r16
    6036:	58 97       	sbiw	r26, 0x18	; 24
    6038:	59 96       	adiw	r26, 0x19	; 25
    603a:	1c 93       	st	X, r17
    603c:	59 97       	sbiw	r26, 0x19	; 25
    603e:	5a 96       	adiw	r26, 0x1a	; 26
    6040:	2c 93       	st	X, r18
    6042:	5a 97       	sbiw	r26, 0x1a	; 26
    6044:	5b 96       	adiw	r26, 0x1b	; 27
    6046:	3c 93       	st	X, r19
    6048:	7b ce       	rjmp	.-778    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 4:
			x->f_mot_scale = (int32_t)data;
			break;
		case 5:
			x->b_mot_scale = (int32_t)data;
    604a:	54 96       	adiw	r26, 0x14	; 20
    604c:	0c 93       	st	X, r16
    604e:	54 97       	sbiw	r26, 0x14	; 20
    6050:	55 96       	adiw	r26, 0x15	; 21
    6052:	1c 93       	st	X, r17
    6054:	55 97       	sbiw	r26, 0x15	; 21
    6056:	56 96       	adiw	r26, 0x16	; 22
    6058:	2c 93       	st	X, r18
    605a:	56 97       	sbiw	r26, 0x16	; 22
    605c:	57 96       	adiw	r26, 0x17	; 23
    605e:	3c 93       	st	X, r19
    6060:	6f ce       	rjmp	.-802    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 3:
			x->r_mot_bot = (int32_t)data;
			break;
		case 4:
			x->f_mot_scale = (int32_t)data;
    6062:	50 96       	adiw	r26, 0x10	; 16
    6064:	0c 93       	st	X, r16
    6066:	50 97       	sbiw	r26, 0x10	; 16
    6068:	51 96       	adiw	r26, 0x11	; 17
    606a:	1c 93       	st	X, r17
    606c:	51 97       	sbiw	r26, 0x11	; 17
    606e:	52 96       	adiw	r26, 0x12	; 18
    6070:	2c 93       	st	X, r18
    6072:	52 97       	sbiw	r26, 0x12	; 18
    6074:	53 96       	adiw	r26, 0x13	; 19
    6076:	3c 93       	st	X, r19
    6078:	63 ce       	rjmp	.-826    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 2:
			x->l_mot_bot = (int32_t)data;
			break;
		case 3:
			x->r_mot_bot = (int32_t)data;
    607a:	1c 96       	adiw	r26, 0x0c	; 12
    607c:	0c 93       	st	X, r16
    607e:	1c 97       	sbiw	r26, 0x0c	; 12
    6080:	1d 96       	adiw	r26, 0x0d	; 13
    6082:	1c 93       	st	X, r17
    6084:	1d 97       	sbiw	r26, 0x0d	; 13
    6086:	1e 96       	adiw	r26, 0x0e	; 14
    6088:	2c 93       	st	X, r18
    608a:	1e 97       	sbiw	r26, 0x0e	; 14
    608c:	1f 96       	adiw	r26, 0x0f	; 15
    608e:	3c 93       	st	X, r19
    6090:	57 ce       	rjmp	.-850    	; 0x5d40 <calibration_write+0x2c>
			break;
		case 1:
			x->b_mot_bot = (int32_t)data;
			break;
		case 2:
			x->l_mot_bot = (int32_t)data;
    6092:	18 96       	adiw	r26, 0x08	; 8
    6094:	0c 93       	st	X, r16
    6096:	18 97       	sbiw	r26, 0x08	; 8
    6098:	19 96       	adiw	r26, 0x09	; 9
    609a:	1c 93       	st	X, r17
    609c:	19 97       	sbiw	r26, 0x09	; 9
    609e:	1a 96       	adiw	r26, 0x0a	; 10
    60a0:	2c 93       	st	X, r18
    60a2:	1a 97       	sbiw	r26, 0x0a	; 10
    60a4:	1b 96       	adiw	r26, 0x0b	; 11
    60a6:	3c 93       	st	X, r19
    60a8:	4b ce       	rjmp	.-874    	; 0x5d40 <calibration_write+0x2c>
	{
		case 0:
			x->f_mot_bot = (int32_t)data;
			break;
		case 1:
			x->b_mot_bot = (int32_t)data;
    60aa:	14 96       	adiw	r26, 0x04	; 4
    60ac:	0c 93       	st	X, r16
    60ae:	14 97       	sbiw	r26, 0x04	; 4
    60b0:	15 96       	adiw	r26, 0x05	; 5
    60b2:	1c 93       	st	X, r17
    60b4:	15 97       	sbiw	r26, 0x05	; 5
    60b6:	16 96       	adiw	r26, 0x06	; 6
    60b8:	2c 93       	st	X, r18
    60ba:	16 97       	sbiw	r26, 0x06	; 6
    60bc:	17 96       	adiw	r26, 0x07	; 7
    60be:	3c 93       	st	X, r19
    60c0:	3f ce       	rjmp	.-898    	; 0x5d40 <calibration_write+0x2c>
void calibration_write(Calibration * x, int32_t addr, int32_t data)
{
	switch(addr)
	{
		case 0:
			x->f_mot_bot = (int32_t)data;
    60c2:	0c 93       	st	X, r16
    60c4:	11 96       	adiw	r26, 0x01	; 1
    60c6:	1c 93       	st	X, r17
    60c8:	11 97       	sbiw	r26, 0x01	; 1
    60ca:	12 96       	adiw	r26, 0x02	; 2
    60cc:	2c 93       	st	X, r18
    60ce:	12 97       	sbiw	r26, 0x02	; 2
    60d0:	13 96       	adiw	r26, 0x03	; 3
    60d2:	3c 93       	st	X, r19
    60d4:	35 ce       	rjmp	.-918    	; 0x5d40 <calibration_write+0x2c>

000060d6 <calibration_load>:
		eeprom_write_byte_if_different(addr, c[addr]);
	}
}

void calibration_load(Calibration * x)
{
    60d6:	0f 93       	push	r16
    60d8:	1f 93       	push	r17
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	8c 01       	movw	r16, r24
    60e0:	c0 e0       	ldi	r28, 0x00	; 0
    60e2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t * c = x;
	
	for (uint32_t addr = 0; addr < sizeof(Calibration); addr++)
	{
		c[addr] = eeprom_read_byte(addr);
    60e4:	ce 01       	movw	r24, r28
    60e6:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <__eerd_byte_m644p>
    60ea:	f8 01       	movw	r30, r16
    60ec:	ec 0f       	add	r30, r28
    60ee:	fd 1f       	adc	r31, r29
    60f0:	80 83       	st	Z, r24
    60f2:	21 96       	adiw	r28, 0x01	; 1

void calibration_load(Calibration * x)
{
	uint8_t * c = x;
	
	for (uint32_t addr = 0; addr < sizeof(Calibration); addr++)
    60f4:	c6 3c       	cpi	r28, 0xC6	; 198
    60f6:	d1 05       	cpc	r29, r1
    60f8:	a9 f7       	brne	.-22     	; 0x60e4 <calibration_load+0xe>
	{
		c[addr] = eeprom_read_byte(addr);
	}
}
    60fa:	df 91       	pop	r29
    60fc:	cf 91       	pop	r28
    60fe:	1f 91       	pop	r17
    6100:	0f 91       	pop	r16
    6102:	08 95       	ret

00006104 <eeprom_write_byte_if_different>:
#include "config.h"

#include "calibration.h"

void eeprom_write_byte_if_different(uint32_t addr, uint8_t data)
{
    6104:	df 92       	push	r13
    6106:	ef 92       	push	r14
    6108:	ff 92       	push	r15
    610a:	0f 93       	push	r16
    610c:	1f 93       	push	r17
    610e:	7b 01       	movw	r14, r22
    6110:	8c 01       	movw	r16, r24
    6112:	d4 2e       	mov	r13, r20
	if (eeprom_read_byte(addr) != data)
    6114:	cb 01       	movw	r24, r22
    6116:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <__eerd_byte_m644p>
    611a:	8d 15       	cp	r24, r13
    611c:	21 f0       	breq	.+8      	; 0x6126 <eeprom_write_byte_if_different+0x22>
	{
		eeprom_write_byte(addr, data);
    611e:	c7 01       	movw	r24, r14
    6120:	6d 2d       	mov	r22, r13
    6122:	0e 94 ea 41 	call	0x83d4	; 0x83d4 <__eewr_byte_m644p>
	}
}
    6126:	1f 91       	pop	r17
    6128:	0f 91       	pop	r16
    612a:	ff 90       	pop	r15
    612c:	ef 90       	pop	r14
    612e:	df 90       	pop	r13
    6130:	08 95       	ret

00006132 <calibration_save>:

void calibration_save(Calibration * x)
{
    6132:	ef 92       	push	r14
    6134:	ff 92       	push	r15
    6136:	1f 93       	push	r17
    6138:	cf 93       	push	r28
    613a:	df 93       	push	r29
    613c:	7c 01       	movw	r14, r24
    613e:	c0 e0       	ldi	r28, 0x00	; 0
    6140:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t * c = x;
	
	for (uint32_t addr = 0; addr < sizeof(Calibration); addr++)
	{
		eeprom_write_byte_if_different(addr, c[addr]);
    6142:	f7 01       	movw	r30, r14
    6144:	ec 0f       	add	r30, r28
    6146:	fd 1f       	adc	r31, r29
    6148:	10 81       	ld	r17, Z

#include "calibration.h"

void eeprom_write_byte_if_different(uint32_t addr, uint8_t data)
{
	if (eeprom_read_byte(addr) != data)
    614a:	ce 01       	movw	r24, r28
    614c:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <__eerd_byte_m644p>
    6150:	18 17       	cp	r17, r24
    6152:	21 f0       	breq	.+8      	; 0x615c <calibration_save+0x2a>
	{
		eeprom_write_byte(addr, data);
    6154:	ce 01       	movw	r24, r28
    6156:	61 2f       	mov	r22, r17
    6158:	0e 94 ea 41 	call	0x83d4	; 0x83d4 <__eewr_byte_m644p>
    615c:	21 96       	adiw	r28, 0x01	; 1

void calibration_save(Calibration * x)
{
	uint8_t * c = x;
	
	for (uint32_t addr = 0; addr < sizeof(Calibration); addr++)
    615e:	c6 3c       	cpi	r28, 0xC6	; 198
    6160:	d1 05       	cpc	r29, r1
    6162:	79 f7       	brne	.-34     	; 0x6142 <calibration_save+0x10>
	{
		eeprom_write_byte_if_different(addr, c[addr]);
	}
}
    6164:	df 91       	pop	r29
    6166:	cf 91       	pop	r28
    6168:	1f 91       	pop	r17
    616a:	ff 90       	pop	r15
    616c:	ef 90       	pop	r14
    616e:	08 95       	ret

00006170 <ser_tx>:
void ser_tx(uint8_t p, uint8_t c)
{
	// select buffer based on port
	volatile ser_buff_s * ser_tx_buff;
	
	if (p == 1)
    6170:	81 30       	cpi	r24, 0x01	; 1
    6172:	39 f0       	breq	.+14     	; 0x6182 <ser_tx+0x12>
	else
	{
		#ifdef use_buffered_tx0
		ser_tx_buff = &ser_tx_buff_0;
		#else
		loop_until_bit_is_set(UCSR0A, UDRE0);
    6174:	80 91 c0 00 	lds	r24, 0x00C0
    6178:	85 ff       	sbrs	r24, 5
    617a:	fc cf       	rjmp	.-8      	; 0x6174 <ser_tx+0x4>
		UDR0 = c;
    617c:	60 93 c6 00 	sts	0x00C6, r22
    6180:	08 95       	ret
	if (p == 1)
	{
		#ifdef use_buffered_tx1
		ser_tx_buff = &ser_tx_buff_1;
		#else
		loop_until_bit_is_set(UCSR1A, UDRE1);
    6182:	80 91 c8 00 	lds	r24, 0x00C8
    6186:	85 ff       	sbrs	r24, 5
    6188:	fc cf       	rjmp	.-8      	; 0x6182 <ser_tx+0x12>
		UDR1 = c;
    618a:	60 93 ce 00 	sts	0x00CE, r22
    618e:	08 95       	ret

00006190 <ser_rx>:
{
	ser_tx(1, c);
}

uint8_t ser_rx(uint8_t p, uint8_t * r)
{
    6190:	cf 93       	push	r28
    6192:	df 93       	push	r29
    6194:	fb 01       	movw	r30, r22
	ser_buff_s * ser_rx_buff = &ser_rx_buff_0;
	
	if (p == 1)
    6196:	81 30       	cpi	r24, 0x01	; 1
    6198:	21 f1       	breq	.+72     	; 0x61e2 <ser_rx+0x52>
    619a:	c6 ea       	ldi	r28, 0xA6	; 166
    619c:	d3 e0       	ldi	r29, 0x03	; 3
	{
		ser_rx_buff = &ser_rx_buff_1;
	}
	
	if(ser_rx_buff->h == ser_rx_buff->t) // if buffer empty, return error
    619e:	8a 81       	ldd	r24, Y+2	; 0x02
    61a0:	9b 81       	ldd	r25, Y+3	; 0x03
    61a2:	2c 81       	ldd	r18, Y+4	; 0x04
    61a4:	3d 81       	ldd	r19, Y+5	; 0x05
    61a6:	82 17       	cp	r24, r18
    61a8:	93 07       	cpc	r25, r19
    61aa:	21 f1       	breq	.+72     	; 0x61f4 <ser_rx+0x64>
		*r = 0;
		return 0;
	}
	else
	{
		*r = (ser_rx_buff->s + ser_rx_buff->h - ser_rx_buff->t) % ser_rx_buff->s;
    61ac:	6e 81       	ldd	r22, Y+6	; 0x06
    61ae:	7f 81       	ldd	r23, Y+7	; 0x07
    61b0:	86 0f       	add	r24, r22
    61b2:	97 1f       	adc	r25, r23
    61b4:	82 1b       	sub	r24, r18
    61b6:	93 0b       	sbc	r25, r19
    61b8:	0e 94 b1 3c 	call	0x7962	; 0x7962 <__udivmodhi4>
    61bc:	80 83       	st	Z, r24
		uint8_t data = ser_rx_buff->d[ser_rx_buff->t]; // read from buffer
    61be:	8c 81       	ldd	r24, Y+4	; 0x04
    61c0:	9d 81       	ldd	r25, Y+5	; 0x05
    61c2:	e8 81       	ld	r30, Y
    61c4:	f9 81       	ldd	r31, Y+1	; 0x01
    61c6:	e8 0f       	add	r30, r24
    61c8:	f9 1f       	adc	r31, r25
    61ca:	e0 81       	ld	r30, Z
		ser_rx_buff->t = (ser_rx_buff->t + 1) % ser_rx_buff->s; // advance buffer read pointer
    61cc:	6e 81       	ldd	r22, Y+6	; 0x06
    61ce:	7f 81       	ldd	r23, Y+7	; 0x07
    61d0:	01 96       	adiw	r24, 0x01	; 1
    61d2:	0e 94 b1 3c 	call	0x7962	; 0x7962 <__udivmodhi4>
    61d6:	9d 83       	std	Y+5, r25	; 0x05
    61d8:	8c 83       	std	Y+4, r24	; 0x04
		return data; // return
	}
}
    61da:	8e 2f       	mov	r24, r30
    61dc:	df 91       	pop	r29
    61de:	cf 91       	pop	r28
    61e0:	08 95       	ret

uint8_t ser_rx(uint8_t p, uint8_t * r)
{
	ser_buff_s * ser_rx_buff = &ser_rx_buff_0;
	
	if (p == 1)
    61e2:	cf ea       	ldi	r28, 0xAF	; 175
    61e4:	d3 e0       	ldi	r29, 0x03	; 3
	{
		ser_rx_buff = &ser_rx_buff_1;
	}
	
	if(ser_rx_buff->h == ser_rx_buff->t) // if buffer empty, return error
    61e6:	8a 81       	ldd	r24, Y+2	; 0x02
    61e8:	9b 81       	ldd	r25, Y+3	; 0x03
    61ea:	2c 81       	ldd	r18, Y+4	; 0x04
    61ec:	3d 81       	ldd	r19, Y+5	; 0x05
    61ee:	82 17       	cp	r24, r18
    61f0:	93 07       	cpc	r25, r19
    61f2:	e1 f6       	brne	.-72     	; 0x61ac <ser_rx+0x1c>
	{
		*r = 0;
    61f4:	10 82       	st	Z, r1
    61f6:	e0 e0       	ldi	r30, 0x00	; 0
		*r = (ser_rx_buff->s + ser_rx_buff->h - ser_rx_buff->t) % ser_rx_buff->s;
		uint8_t data = ser_rx_buff->d[ser_rx_buff->t]; // read from buffer
		ser_rx_buff->t = (ser_rx_buff->t + 1) % ser_rx_buff->s; // advance buffer read pointer
		return data; // return
	}
}
    61f8:	8e 2f       	mov	r24, r30
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	08 95       	ret

00006200 <ser_tx_is_busy>:

uint8_t ser_tx_is_busy(uint8_t p)
{
	if (p == 1)
    6200:	81 30       	cpi	r24, 0x01	; 1
    6202:	19 f0       	breq	.+6      	; 0x620a <ser_tx_is_busy+0xa>
	{
		return ser_tx_buff_1.f;
	}
	
	return ser_tx_buff_0.f;
    6204:	80 91 9c 03 	lds	r24, 0x039C
}
    6208:	08 95       	ret

uint8_t ser_tx_is_busy(uint8_t p)
{
	if (p == 1)
	{
		return ser_tx_buff_1.f;
    620a:	80 91 a5 03 	lds	r24, 0x03A5
    620e:	08 95       	ret

00006210 <__vector_22>:
	
	return ser_tx_buff_0.f;
}

ISR(USART0_TX_vect)
{
    6210:	1f 92       	push	r1
    6212:	0f 92       	push	r0
    6214:	0f b6       	in	r0, 0x3f	; 63
    6216:	0f 92       	push	r0
    6218:	11 24       	eor	r1, r1
    621a:	2f 93       	push	r18
    621c:	3f 93       	push	r19
    621e:	5f 93       	push	r21
    6220:	6f 93       	push	r22
    6222:	7f 93       	push	r23
    6224:	8f 93       	push	r24
    6226:	9f 93       	push	r25
    6228:	af 93       	push	r26
    622a:	bf 93       	push	r27
    622c:	ef 93       	push	r30
    622e:	ff 93       	push	r31
	if(ser_tx_buff_0.h != ser_tx_buff_0.t)
    6230:	20 91 96 03 	lds	r18, 0x0396
    6234:	30 91 97 03 	lds	r19, 0x0397
    6238:	80 91 98 03 	lds	r24, 0x0398
    623c:	90 91 99 03 	lds	r25, 0x0399
    6240:	28 17       	cp	r18, r24
    6242:	39 07       	cpc	r19, r25
    6244:	61 f1       	breq	.+88     	; 0x629e <__vector_22+0x8e>
	{
		// still data in buffer, output next char in queue and advance pointer
		UDR0 = ser_tx_buff_0.d[ser_tx_buff_0.h];
    6246:	e0 91 94 03 	lds	r30, 0x0394
    624a:	f0 91 95 03 	lds	r31, 0x0395
    624e:	80 91 96 03 	lds	r24, 0x0396
    6252:	90 91 97 03 	lds	r25, 0x0397
    6256:	e8 0f       	add	r30, r24
    6258:	f9 1f       	adc	r31, r25
    625a:	80 81       	ld	r24, Z
    625c:	80 93 c6 00 	sts	0x00C6, r24
		ser_tx_buff_0.h = (ser_tx_buff_0.h + 1) % ser_tx_buff_0.s;
    6260:	80 91 96 03 	lds	r24, 0x0396
    6264:	90 91 97 03 	lds	r25, 0x0397
    6268:	60 91 9a 03 	lds	r22, 0x039A
    626c:	70 91 9b 03 	lds	r23, 0x039B
    6270:	01 96       	adiw	r24, 0x01	; 1
    6272:	0e 94 b1 3c 	call	0x7962	; 0x7962 <__udivmodhi4>
    6276:	90 93 97 03 	sts	0x0397, r25
    627a:	80 93 96 03 	sts	0x0396, r24
		// all done
		ser_tx_buff_0.h = 0;
		ser_tx_buff_0.t = 0;
		ser_tx_buff_0.f = 0;
	}
}
    627e:	ff 91       	pop	r31
    6280:	ef 91       	pop	r30
    6282:	bf 91       	pop	r27
    6284:	af 91       	pop	r26
    6286:	9f 91       	pop	r25
    6288:	8f 91       	pop	r24
    628a:	7f 91       	pop	r23
    628c:	6f 91       	pop	r22
    628e:	5f 91       	pop	r21
    6290:	3f 91       	pop	r19
    6292:	2f 91       	pop	r18
    6294:	0f 90       	pop	r0
    6296:	0f be       	out	0x3f, r0	; 63
    6298:	0f 90       	pop	r0
    629a:	1f 90       	pop	r1
    629c:	18 95       	reti
		ser_tx_buff_0.h = (ser_tx_buff_0.h + 1) % ser_tx_buff_0.s;
	}
	else
	{
		// all done
		ser_tx_buff_0.h = 0;
    629e:	10 92 97 03 	sts	0x0397, r1
    62a2:	10 92 96 03 	sts	0x0396, r1
		ser_tx_buff_0.t = 0;
    62a6:	10 92 99 03 	sts	0x0399, r1
    62aa:	10 92 98 03 	sts	0x0398, r1
		ser_tx_buff_0.f = 0;
    62ae:	10 92 9c 03 	sts	0x039C, r1
    62b2:	e5 cf       	rjmp	.-54     	; 0x627e <__vector_22+0x6e>

000062b4 <__vector_20>:
	}
}

ISR(USART0_RX_vect)
{	
    62b4:	1f 92       	push	r1
    62b6:	0f 92       	push	r0
    62b8:	0f b6       	in	r0, 0x3f	; 63
    62ba:	0f 92       	push	r0
    62bc:	11 24       	eor	r1, r1
    62be:	2f 93       	push	r18
    62c0:	3f 93       	push	r19
    62c2:	4f 93       	push	r20
    62c4:	5f 93       	push	r21
    62c6:	6f 93       	push	r22
    62c8:	7f 93       	push	r23
    62ca:	8f 93       	push	r24
    62cc:	9f 93       	push	r25
    62ce:	af 93       	push	r26
    62d0:	bf 93       	push	r27
    62d2:	ef 93       	push	r30
    62d4:	ff 93       	push	r31
	uint8_t data = UDR0; // read
    62d6:	40 91 c6 00 	lds	r20, 0x00C6
	uint8_t temp = (ser_rx_buff_0.h + 1) % ser_rx_buff_0.s; // check buffer location first
    62da:	80 91 a8 03 	lds	r24, 0x03A8
    62de:	90 91 a9 03 	lds	r25, 0x03A9
    62e2:	60 91 ac 03 	lds	r22, 0x03AC
    62e6:	70 91 ad 03 	lds	r23, 0x03AD
	if(temp != ser_rx_buff_0.t) // if not overflow
    62ea:	01 96       	adiw	r24, 0x01	; 1
    62ec:	0e 94 b1 3c 	call	0x7962	; 0x7962 <__udivmodhi4>
    62f0:	28 2f       	mov	r18, r24
    62f2:	30 e0       	ldi	r19, 0x00	; 0
    62f4:	80 91 aa 03 	lds	r24, 0x03AA
    62f8:	90 91 ab 03 	lds	r25, 0x03AB
    62fc:	28 17       	cp	r18, r24
    62fe:	39 07       	cpc	r19, r25
    6300:	79 f0       	breq	.+30     	; 0x6320 <__vector_20+0x6c>
	{
		ser_rx_buff_0.d[ser_rx_buff_0.h] = data; // store in buffer
    6302:	e0 91 a6 03 	lds	r30, 0x03A6
    6306:	f0 91 a7 03 	lds	r31, 0x03A7
    630a:	80 91 a8 03 	lds	r24, 0x03A8
    630e:	90 91 a9 03 	lds	r25, 0x03A9
    6312:	e8 0f       	add	r30, r24
    6314:	f9 1f       	adc	r31, r25
    6316:	40 83       	st	Z, r20
		ser_rx_buff_0.h = temp; // increase array pointer
    6318:	30 93 a9 03 	sts	0x03A9, r19
    631c:	20 93 a8 03 	sts	0x03A8, r18
	}
}
    6320:	ff 91       	pop	r31
    6322:	ef 91       	pop	r30
    6324:	bf 91       	pop	r27
    6326:	af 91       	pop	r26
    6328:	9f 91       	pop	r25
    632a:	8f 91       	pop	r24
    632c:	7f 91       	pop	r23
    632e:	6f 91       	pop	r22
    6330:	5f 91       	pop	r21
    6332:	4f 91       	pop	r20
    6334:	3f 91       	pop	r19
    6336:	2f 91       	pop	r18
    6338:	0f 90       	pop	r0
    633a:	0f be       	out	0x3f, r0	; 63
    633c:	0f 90       	pop	r0
    633e:	1f 90       	pop	r1
    6340:	18 95       	reti

00006342 <__vector_30>:

#ifdef __AVR_ATmega644P__

ISR(USART1_TX_vect)
{
    6342:	1f 92       	push	r1
    6344:	0f 92       	push	r0
    6346:	0f b6       	in	r0, 0x3f	; 63
    6348:	0f 92       	push	r0
    634a:	11 24       	eor	r1, r1
    634c:	2f 93       	push	r18
    634e:	3f 93       	push	r19
    6350:	5f 93       	push	r21
    6352:	6f 93       	push	r22
    6354:	7f 93       	push	r23
    6356:	8f 93       	push	r24
    6358:	9f 93       	push	r25
    635a:	af 93       	push	r26
    635c:	bf 93       	push	r27
    635e:	ef 93       	push	r30
    6360:	ff 93       	push	r31
	if(ser_tx_buff_1.h != ser_tx_buff_1.t)
    6362:	20 91 9f 03 	lds	r18, 0x039F
    6366:	30 91 a0 03 	lds	r19, 0x03A0
    636a:	80 91 a1 03 	lds	r24, 0x03A1
    636e:	90 91 a2 03 	lds	r25, 0x03A2
    6372:	28 17       	cp	r18, r24
    6374:	39 07       	cpc	r19, r25
    6376:	61 f1       	breq	.+88     	; 0x63d0 <__vector_30+0x8e>
	{
		UDR1 = ser_tx_buff_1.d[ser_tx_buff_1.h];
    6378:	e0 91 9d 03 	lds	r30, 0x039D
    637c:	f0 91 9e 03 	lds	r31, 0x039E
    6380:	80 91 9f 03 	lds	r24, 0x039F
    6384:	90 91 a0 03 	lds	r25, 0x03A0
    6388:	e8 0f       	add	r30, r24
    638a:	f9 1f       	adc	r31, r25
    638c:	80 81       	ld	r24, Z
    638e:	80 93 ce 00 	sts	0x00CE, r24
		ser_tx_buff_1.h = (ser_tx_buff_1.h + 1) % ser_tx_buff_1.s;
    6392:	80 91 9f 03 	lds	r24, 0x039F
    6396:	90 91 a0 03 	lds	r25, 0x03A0
    639a:	60 91 a3 03 	lds	r22, 0x03A3
    639e:	70 91 a4 03 	lds	r23, 0x03A4
    63a2:	01 96       	adiw	r24, 0x01	; 1
    63a4:	0e 94 b1 3c 	call	0x7962	; 0x7962 <__udivmodhi4>
    63a8:	90 93 a0 03 	sts	0x03A0, r25
    63ac:	80 93 9f 03 	sts	0x039F, r24
	{
		ser_tx_buff_1.h = 0;
		ser_tx_buff_1.t = 0;
		ser_tx_buff_1.f = 0;
	}
}
    63b0:	ff 91       	pop	r31
    63b2:	ef 91       	pop	r30
    63b4:	bf 91       	pop	r27
    63b6:	af 91       	pop	r26
    63b8:	9f 91       	pop	r25
    63ba:	8f 91       	pop	r24
    63bc:	7f 91       	pop	r23
    63be:	6f 91       	pop	r22
    63c0:	5f 91       	pop	r21
    63c2:	3f 91       	pop	r19
    63c4:	2f 91       	pop	r18
    63c6:	0f 90       	pop	r0
    63c8:	0f be       	out	0x3f, r0	; 63
    63ca:	0f 90       	pop	r0
    63cc:	1f 90       	pop	r1
    63ce:	18 95       	reti
		UDR1 = ser_tx_buff_1.d[ser_tx_buff_1.h];
		ser_tx_buff_1.h = (ser_tx_buff_1.h + 1) % ser_tx_buff_1.s;
	}
	else
	{
		ser_tx_buff_1.h = 0;
    63d0:	10 92 a0 03 	sts	0x03A0, r1
    63d4:	10 92 9f 03 	sts	0x039F, r1
		ser_tx_buff_1.t = 0;
    63d8:	10 92 a2 03 	sts	0x03A2, r1
    63dc:	10 92 a1 03 	sts	0x03A1, r1
		ser_tx_buff_1.f = 0;
    63e0:	10 92 a5 03 	sts	0x03A5, r1
    63e4:	e5 cf       	rjmp	.-54     	; 0x63b0 <__vector_30+0x6e>

000063e6 <__vector_28>:
	}
}

ISR(USART1_RX_vect)
{
    63e6:	1f 92       	push	r1
    63e8:	0f 92       	push	r0
    63ea:	0f b6       	in	r0, 0x3f	; 63
    63ec:	0f 92       	push	r0
    63ee:	11 24       	eor	r1, r1
    63f0:	2f 93       	push	r18
    63f2:	3f 93       	push	r19
    63f4:	4f 93       	push	r20
    63f6:	5f 93       	push	r21
    63f8:	6f 93       	push	r22
    63fa:	7f 93       	push	r23
    63fc:	8f 93       	push	r24
    63fe:	9f 93       	push	r25
    6400:	af 93       	push	r26
    6402:	bf 93       	push	r27
    6404:	ef 93       	push	r30
    6406:	ff 93       	push	r31
	uint8_t data = UDR1; // read
    6408:	40 91 ce 00 	lds	r20, 0x00CE
	uint8_t temp = (ser_rx_buff_1.h + 1) % ser_rx_buff_1.s; // check buffer location first
    640c:	80 91 b1 03 	lds	r24, 0x03B1
    6410:	90 91 b2 03 	lds	r25, 0x03B2
    6414:	60 91 b5 03 	lds	r22, 0x03B5
    6418:	70 91 b6 03 	lds	r23, 0x03B6
	if(temp != ser_rx_buff_1.t) // if not overflow
    641c:	01 96       	adiw	r24, 0x01	; 1
    641e:	0e 94 b1 3c 	call	0x7962	; 0x7962 <__udivmodhi4>
    6422:	28 2f       	mov	r18, r24
    6424:	30 e0       	ldi	r19, 0x00	; 0
    6426:	80 91 b3 03 	lds	r24, 0x03B3
    642a:	90 91 b4 03 	lds	r25, 0x03B4
    642e:	28 17       	cp	r18, r24
    6430:	39 07       	cpc	r19, r25
    6432:	79 f0       	breq	.+30     	; 0x6452 <__vector_28+0x6c>
	{
		ser_rx_buff_1.d[ser_rx_buff_1.h] = data; // store in buffer
    6434:	e0 91 af 03 	lds	r30, 0x03AF
    6438:	f0 91 b0 03 	lds	r31, 0x03B0
    643c:	80 91 b1 03 	lds	r24, 0x03B1
    6440:	90 91 b2 03 	lds	r25, 0x03B2
    6444:	e8 0f       	add	r30, r24
    6446:	f9 1f       	adc	r31, r25
    6448:	40 83       	st	Z, r20
		ser_rx_buff_1.h = temp; // increase array pointer
    644a:	30 93 b2 03 	sts	0x03B2, r19
    644e:	20 93 b1 03 	sts	0x03B1, r18
	}
}
    6452:	ff 91       	pop	r31
    6454:	ef 91       	pop	r30
    6456:	bf 91       	pop	r27
    6458:	af 91       	pop	r26
    645a:	9f 91       	pop	r25
    645c:	8f 91       	pop	r24
    645e:	7f 91       	pop	r23
    6460:	6f 91       	pop	r22
    6462:	5f 91       	pop	r21
    6464:	4f 91       	pop	r20
    6466:	3f 91       	pop	r19
    6468:	2f 91       	pop	r18
    646a:	0f 90       	pop	r0
    646c:	0f be       	out	0x3f, r0	; 63
    646e:	0f 90       	pop	r0
    6470:	1f 90       	pop	r1
    6472:	18 95       	reti

00006474 <ser_buff_init>:
	#endif
}
#endif

void ser_buff_init(ser_buff_s * b, uint8_t s)
{
    6474:	ff 92       	push	r15
    6476:	0f 93       	push	r16
    6478:	1f 93       	push	r17
    647a:	8c 01       	movw	r16, r24
    647c:	f6 2e       	mov	r15, r22
	// reset head and tail, flag
	b->h = 0;
    647e:	fc 01       	movw	r30, r24
    6480:	13 82       	std	Z+3, r1	; 0x03
    6482:	12 82       	std	Z+2, r1	; 0x02
	b->t = 0;
    6484:	15 82       	std	Z+5, r1	; 0x05
    6486:	14 82       	std	Z+4, r1	; 0x04
	b->f = 0;
    6488:	10 86       	std	Z+8, r1	; 0x08
	
	// set size and allocate memory
	b->s = s;
    648a:	66 83       	std	Z+6, r22	; 0x06
    648c:	17 82       	std	Z+7, r1	; 0x07
	free(b->d);
    648e:	80 81       	ld	r24, Z
    6490:	91 81       	ldd	r25, Z+1	; 0x01
    6492:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <free>
	b->d = calloc(sizeof(uint8_t), s);
    6496:	81 e0       	ldi	r24, 0x01	; 1
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	6f 2d       	mov	r22, r15
    649c:	70 e0       	ldi	r23, 0x00	; 0
    649e:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <calloc>
    64a2:	f8 01       	movw	r30, r16
    64a4:	80 83       	st	Z, r24
    64a6:	91 83       	std	Z+1, r25	; 0x01
}
    64a8:	1f 91       	pop	r17
    64aa:	0f 91       	pop	r16
    64ac:	ff 90       	pop	r15
    64ae:	08 95       	ret

000064b0 <ser_tx_1>:
{
	ser_tx(0, c);
}

void ser_tx_1(char c, FILE * stream)
{
    64b0:	98 2f       	mov	r25, r24
	if (p == 1)
	{
		#ifdef use_buffered_tx1
		ser_tx_buff = &ser_tx_buff_1;
		#else
		loop_until_bit_is_set(UCSR1A, UDRE1);
    64b2:	80 91 c8 00 	lds	r24, 0x00C8
    64b6:	85 ff       	sbrs	r24, 5
    64b8:	fc cf       	rjmp	.-8      	; 0x64b2 <ser_tx_1+0x2>
		UDR1 = c;
    64ba:	90 93 ce 00 	sts	0x00CE, r25
}

void ser_tx_1(char c, FILE * stream)
{
	ser_tx(1, c);
}
    64be:	08 95       	ret

000064c0 <ser_tx_0>:
		ser_tx_buff->f = 1;
	}
}

void ser_tx_0(char c, FILE * stream)
{
    64c0:	98 2f       	mov	r25, r24
	else
	{
		#ifdef use_buffered_tx0
		ser_tx_buff = &ser_tx_buff_0;
		#else
		loop_until_bit_is_set(UCSR0A, UDRE0);
    64c2:	80 91 c0 00 	lds	r24, 0x00C0
    64c6:	85 ff       	sbrs	r24, 5
    64c8:	fc cf       	rjmp	.-8      	; 0x64c2 <ser_tx_0+0x2>
		UDR0 = c;
    64ca:	90 93 c6 00 	sts	0x00C6, r25
}

void ser_tx_0(char c, FILE * stream)
{
	ser_tx(0, c);
}
    64ce:	08 95       	ret

000064d0 <ser1_init>:
	#endif
}

#ifdef __AVR_ATmega644P__
void ser1_init(uint16_t ubrr, uint8_t rxs, uint8_t txs)
{
    64d0:	ef 92       	push	r14
    64d2:	ff 92       	push	r15
    64d4:	0f 93       	push	r16
    64d6:	1f 93       	push	r17
    64d8:	06 2f       	mov	r16, r22
	UBRR1 = ubrr;
    64da:	90 93 cd 00 	sts	0x00CD, r25
    64de:	80 93 cc 00 	sts	0x00CC, r24
#endif

void ser_buff_init(ser_buff_s * b, uint8_t s)
{
	// reset head and tail, flag
	b->h = 0;
    64e2:	10 92 b2 03 	sts	0x03B2, r1
    64e6:	10 92 b1 03 	sts	0x03B1, r1
	b->t = 0;
    64ea:	10 92 b4 03 	sts	0x03B4, r1
    64ee:	10 92 b3 03 	sts	0x03B3, r1
	b->f = 0;
    64f2:	10 92 b7 03 	sts	0x03B7, r1
	
	// set size and allocate memory
	b->s = s;
    64f6:	10 e0       	ldi	r17, 0x00	; 0
    64f8:	10 93 b6 03 	sts	0x03B6, r17
    64fc:	00 93 b5 03 	sts	0x03B5, r16
	free(b->d);
    6500:	81 eb       	ldi	r24, 0xB1	; 177
    6502:	e8 2e       	mov	r14, r24
    6504:	83 e0       	ldi	r24, 0x03	; 3
    6506:	f8 2e       	mov	r15, r24
    6508:	f7 01       	movw	r30, r14
    650a:	32 97       	sbiw	r30, 0x02	; 2
    650c:	80 81       	ld	r24, Z
    650e:	91 81       	ldd	r25, Z+1	; 0x01
    6510:	7f 01       	movw	r14, r30
    6512:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <free>
	b->d = calloc(sizeof(uint8_t), s);
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	b8 01       	movw	r22, r16
    651c:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <calloc>
    6520:	f7 01       	movw	r30, r14
    6522:	91 83       	std	Z+1, r25	; 0x01
    6524:	80 83       	st	Z, r24
{
	UBRR1 = ubrr;

	ser_buff_init(&ser_rx_buff_1, rxs);

	UCSR1B = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
    6526:	88 e9       	ldi	r24, 0x98	; 152
    6528:	80 93 c9 00 	sts	0x00C9, r24
	
	#ifdef use_buffered_tx1
	UCSR1B |= _BV(TXCIE1);
	ser_buff_init(&ser_tx_buff_1, txs);
	#endif
}
    652c:	1f 91       	pop	r17
    652e:	0f 91       	pop	r16
    6530:	ff 90       	pop	r15
    6532:	ef 90       	pop	r14
    6534:	08 95       	ret

00006536 <ser0_init>:
static volatile ser_buff_s ser_tx_buff_1;
static volatile ser_buff_s ser_rx_buff_0;
static volatile ser_buff_s ser_rx_buff_1;

void ser0_init(uint16_t ubrr, uint8_t rxs, uint8_t txs)
{
    6536:	ef 92       	push	r14
    6538:	ff 92       	push	r15
    653a:	0f 93       	push	r16
    653c:	1f 93       	push	r17
    653e:	06 2f       	mov	r16, r22
	UBRR0 = ubrr; // set baud
    6540:	90 93 c5 00 	sts	0x00C5, r25
    6544:	80 93 c4 00 	sts	0x00C4, r24
#endif

void ser_buff_init(ser_buff_s * b, uint8_t s)
{
	// reset head and tail, flag
	b->h = 0;
    6548:	10 92 a9 03 	sts	0x03A9, r1
    654c:	10 92 a8 03 	sts	0x03A8, r1
	b->t = 0;
    6550:	10 92 ab 03 	sts	0x03AB, r1
    6554:	10 92 aa 03 	sts	0x03AA, r1
	b->f = 0;
    6558:	10 92 ae 03 	sts	0x03AE, r1
	
	// set size and allocate memory
	b->s = s;
    655c:	10 e0       	ldi	r17, 0x00	; 0
    655e:	10 93 ad 03 	sts	0x03AD, r17
    6562:	00 93 ac 03 	sts	0x03AC, r16
	free(b->d);
    6566:	98 ea       	ldi	r25, 0xA8	; 168
    6568:	e9 2e       	mov	r14, r25
    656a:	93 e0       	ldi	r25, 0x03	; 3
    656c:	f9 2e       	mov	r15, r25
    656e:	f7 01       	movw	r30, r14
    6570:	32 97       	sbiw	r30, 0x02	; 2
    6572:	80 81       	ld	r24, Z
    6574:	91 81       	ldd	r25, Z+1	; 0x01
    6576:	7f 01       	movw	r14, r30
    6578:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <free>
	b->d = calloc(sizeof(uint8_t), s);
    657c:	81 e0       	ldi	r24, 0x01	; 1
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	b8 01       	movw	r22, r16
    6582:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <calloc>
    6586:	f7 01       	movw	r30, r14
    6588:	91 83       	std	Z+1, r25	; 0x01
    658a:	80 83       	st	Z, r24

	// initialize circular buffer
	ser_buff_init(&ser_rx_buff_0, rxs);

	// initialize port and associated interrupts
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    658c:	88 e9       	ldi	r24, 0x98	; 152
    658e:	80 93 c1 00 	sts	0x00C1, r24
	
	#ifdef use_buffered_tx0
	UCSR0B |= _BV(TXCIE0);
	ser_buff_init(&ser_tx_buff_0, txs);
	#endif
}
    6592:	1f 91       	pop	r17
    6594:	0f 91       	pop	r16
    6596:	ff 90       	pop	r15
    6598:	ef 90       	pop	r14
    659a:	08 95       	ret

0000659c <__vector_12>:
static volatile uint8_t ppm_tx_good;
static volatile uint8_t ppm_read_busy;
static volatile uint8_t ppm_has_cal;

ISR(TIMER1_CAPT_vect)
{
    659c:	1f 92       	push	r1
    659e:	0f 92       	push	r0
    65a0:	0f b6       	in	r0, 0x3f	; 63
    65a2:	0f 92       	push	r0
    65a4:	11 24       	eor	r1, r1
    65a6:	ef 92       	push	r14
    65a8:	ff 92       	push	r15
    65aa:	0f 93       	push	r16
    65ac:	1f 93       	push	r17
    65ae:	2f 93       	push	r18
    65b0:	3f 93       	push	r19
    65b2:	4f 93       	push	r20
    65b4:	5f 93       	push	r21
    65b6:	6f 93       	push	r22
    65b8:	7f 93       	push	r23
    65ba:	8f 93       	push	r24
    65bc:	9f 93       	push	r25
    65be:	af 93       	push	r26
    65c0:	bf 93       	push	r27
    65c2:	cf 93       	push	r28
    65c4:	df 93       	push	r29
    65c6:	ef 93       	push	r30
    65c8:	ff 93       	push	r31
	uint8_t ovf_cnt = ppm_ovf_cnt;
    65ca:	e0 91 dc 03 	lds	r30, 0x03DC
	ppm_ovf_cnt = 0;
    65ce:	10 92 dc 03 	sts	0x03DC, r1
	uint32_t t_icr = ICR1;
    65d2:	c0 91 86 00 	lds	r28, 0x0086
    65d6:	d0 91 87 00 	lds	r29, 0x0087
    65da:	9e 01       	movw	r18, r28
    65dc:	40 e0       	ldi	r20, 0x00	; 0
    65de:	50 e0       	ldi	r21, 0x00	; 0

	// calculate total time using overflows and time difference
	int32_t t = ((t_icr | 0x10000) - ppm_last_capt) & 0xFFFF;
    65e0:	60 91 da 03 	lds	r22, 0x03DA
    65e4:	70 91 db 03 	lds	r23, 0x03DB
	if(t_icr < ppm_last_capt)
    65e8:	80 91 da 03 	lds	r24, 0x03DA
    65ec:	90 91 db 03 	lds	r25, 0x03DB
    65f0:	a0 e0       	ldi	r26, 0x00	; 0
    65f2:	b0 e0       	ldi	r27, 0x00	; 0
    65f4:	28 17       	cp	r18, r24
    65f6:	39 07       	cpc	r19, r25
    65f8:	4a 07       	cpc	r20, r26
    65fa:	5b 07       	cpc	r21, r27
    65fc:	08 f4       	brcc	.+2      	; 0x6600 <__vector_12+0x64>
	{
	        ovf_cnt--;
    65fe:	e1 50       	subi	r30, 0x01	; 1
	uint8_t ovf_cnt = ppm_ovf_cnt;
	ppm_ovf_cnt = 0;
	uint32_t t_icr = ICR1;

	// calculate total time using overflows and time difference
	int32_t t = ((t_icr | 0x10000) - ppm_last_capt) & 0xFFFF;
    6600:	41 60       	ori	r20, 0x01	; 1
    6602:	cb 01       	movw	r24, r22
    6604:	a0 e0       	ldi	r26, 0x00	; 0
    6606:	b0 e0       	ldi	r27, 0x00	; 0
    6608:	28 1b       	sub	r18, r24
    660a:	39 0b       	sbc	r19, r25
    660c:	4a 0b       	sbc	r20, r26
    660e:	5b 0b       	sbc	r21, r27
    6610:	40 70       	andi	r20, 0x00	; 0
    6612:	50 70       	andi	r21, 0x00	; 0
	if(t_icr < ppm_last_capt)
	{
	        ovf_cnt--;
	}
	t += 0x10000 * ovf_cnt;
    6614:	8e 2f       	mov	r24, r30
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	a0 e0       	ldi	r26, 0x00	; 0
    661a:	b0 e0       	ldi	r27, 0x00	; 0
    661c:	8c 01       	movw	r16, r24
    661e:	ff 24       	eor	r15, r15
    6620:	ee 24       	eor	r14, r14
    6622:	e2 0e       	add	r14, r18
    6624:	f3 1e       	adc	r15, r19
    6626:	04 1f       	adc	r16, r20
    6628:	15 1f       	adc	r17, r21

	ppm_last_capt = t_icr;
    662a:	d0 93 db 03 	sts	0x03DB, r29
    662e:	c0 93 da 03 	sts	0x03DA, r28

	// check sync pulse
	if(t > ticks_500us * 6)
    6632:	81 e6       	ldi	r24, 0x61	; 97
    6634:	e8 16       	cp	r14, r24
    6636:	8a ee       	ldi	r24, 0xEA	; 234
    6638:	f8 06       	cpc	r15, r24
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	08 07       	cpc	r16, r24
    663e:	80 e0       	ldi	r24, 0x00	; 0
    6640:	18 07       	cpc	r17, r24
    6642:	20 f1       	brcs	.+72     	; 0x668c <__vector_12+0xf0>
	{
		ppm_highest_chan = ppm_chan;
    6644:	80 91 d8 03 	lds	r24, 0x03D8
    6648:	80 93 d9 03 	sts	0x03D9, r24
		ppm_chan = 0;
    664c:	10 92 d8 03 	sts	0x03D8, r1
		if(ppm_tx_good == 0)
    6650:	80 91 de 03 	lds	r24, 0x03DE
    6654:	88 23       	and	r24, r24
    6656:	19 f4       	brne	.+6      	; 0x665e <__vector_12+0xc2>
		{
			ppm_tx_good = 1;
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	80 93 de 03 	sts	0x03DE, r24
			{
				ppm_new_data = 1;
			}
		}
	}
}
    665e:	ff 91       	pop	r31
    6660:	ef 91       	pop	r30
    6662:	df 91       	pop	r29
    6664:	cf 91       	pop	r28
    6666:	bf 91       	pop	r27
    6668:	af 91       	pop	r26
    666a:	9f 91       	pop	r25
    666c:	8f 91       	pop	r24
    666e:	7f 91       	pop	r23
    6670:	6f 91       	pop	r22
    6672:	5f 91       	pop	r21
    6674:	4f 91       	pop	r20
    6676:	3f 91       	pop	r19
    6678:	2f 91       	pop	r18
    667a:	1f 91       	pop	r17
    667c:	0f 91       	pop	r16
    667e:	ff 90       	pop	r15
    6680:	ef 90       	pop	r14
    6682:	0f 90       	pop	r0
    6684:	0f be       	out	0x3f, r0	; 63
    6686:	0f 90       	pop	r0
    6688:	1f 90       	pop	r1
    668a:	18 95       	reti
			ppm_tx_good = 1;
		}
	}
	else // if pulse is shorter than 3ms, then it's a servo pulse
	{
		if(ppm_chan != ppm_read_busy - 1)
    668c:	20 91 d8 03 	lds	r18, 0x03D8
    6690:	80 91 df 03 	lds	r24, 0x03DF
    6694:	30 e0       	ldi	r19, 0x00	; 0
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	01 97       	sbiw	r24, 0x01	; 1
    669a:	28 17       	cp	r18, r24
    669c:	39 07       	cpc	r19, r25
    669e:	49 f0       	breq	.+18     	; 0x66b2 <__vector_12+0x116>
		{
			ppm_width[ppm_chan] = t; // store time
    66a0:	e0 91 d8 03 	lds	r30, 0x03D8
    66a4:	f0 e0       	ldi	r31, 0x00	; 0
    66a6:	ee 0f       	add	r30, r30
    66a8:	ff 1f       	adc	r31, r31
    66aa:	e8 54       	subi	r30, 0x48	; 72
    66ac:	fc 4f       	sbci	r31, 0xFC	; 252
    66ae:	f1 82       	std	Z+1, r15	; 0x01
    66b0:	e0 82       	st	Z, r14
		}
		ppm_chan++; // next channel
    66b2:	80 91 d8 03 	lds	r24, 0x03D8
    66b6:	8f 5f       	subi	r24, 0xFF	; 255
    66b8:	80 93 d8 03 	sts	0x03D8, r24
		if(ppm_chan >= 4 && ppm_tx_good != 0) // last channel, data is now good, reset to first pin
    66bc:	80 91 d8 03 	lds	r24, 0x03D8
    66c0:	84 30       	cpi	r24, 0x04	; 4
    66c2:	68 f2       	brcs	.-102    	; 0x665e <__vector_12+0xc2>
    66c4:	80 91 de 03 	lds	r24, 0x03DE
    66c8:	88 23       	and	r24, r24
    66ca:	49 f2       	breq	.-110    	; 0x665e <__vector_12+0xc2>
		{
			ppm_tx_good = 2;
    66cc:	82 e0       	ldi	r24, 0x02	; 2
    66ce:	80 93 de 03 	sts	0x03DE, r24
			if(ppm_chan == ppm_highest_chan)
    66d2:	90 91 d8 03 	lds	r25, 0x03D8
    66d6:	80 91 d9 03 	lds	r24, 0x03D9
    66da:	98 17       	cp	r25, r24
    66dc:	09 f0       	breq	.+2      	; 0x66e0 <__vector_12+0x144>
    66de:	bf cf       	rjmp	.-130    	; 0x665e <__vector_12+0xc2>
			{
				ppm_new_data = 1;
    66e0:	81 e0       	ldi	r24, 0x01	; 1
    66e2:	80 93 dd 03 	sts	0x03DD, r24
    66e6:	bb cf       	rjmp	.-138    	; 0x665e <__vector_12+0xc2>

000066e8 <__vector_15>:
		}
	}
}

ISR(TIMER1_OVF_vect)
{
    66e8:	1f 92       	push	r1
    66ea:	0f 92       	push	r0
    66ec:	0f b6       	in	r0, 0x3f	; 63
    66ee:	0f 92       	push	r0
    66f0:	11 24       	eor	r1, r1
    66f2:	8f 93       	push	r24
	ppm_ovf_cnt++;
    66f4:	80 91 dc 03 	lds	r24, 0x03DC
    66f8:	8f 5f       	subi	r24, 0xFF	; 255
    66fa:	80 93 dc 03 	sts	0x03DC, r24
	if(ppm_ovf_cnt > 10)
    66fe:	80 91 dc 03 	lds	r24, 0x03DC
    6702:	8b 30       	cpi	r24, 0x0B	; 11
    6704:	28 f0       	brcs	.+10     	; 0x6710 <__vector_15+0x28>
	{
		ppm_ovf_cnt = 10;
    6706:	8a e0       	ldi	r24, 0x0A	; 10
    6708:	80 93 dc 03 	sts	0x03DC, r24
		ppm_tx_good = 0;
    670c:	10 92 de 03 	sts	0x03DE, r1
	}
}
    6710:	8f 91       	pop	r24
    6712:	0f 90       	pop	r0
    6714:	0f be       	out	0x3f, r0	; 63
    6716:	0f 90       	pop	r0
    6718:	1f 90       	pop	r1
    671a:	18 95       	reti

0000671c <ppm_is_new_data>:
}

// if new ppm cycle
volatile inline uint8_t ppm_is_new_data(uint8_t c)
{
	ppm_new_data &= c;
    671c:	90 91 dd 03 	lds	r25, 0x03DD
    6720:	98 23       	and	r25, r24
    6722:	90 93 dd 03 	sts	0x03DD, r25
	return ppm_new_data;
    6726:	80 91 dd 03 	lds	r24, 0x03DD
}
    672a:	08 95       	ret

0000672c <ppm_tx_is_good>:

// returns whether or not the TX is on
volatile inline uint8_t ppm_tx_is_good(uint8_t c)
{
	ppm_tx_good &= c;
    672c:	90 91 de 03 	lds	r25, 0x03DE
    6730:	98 23       	and	r25, r24
    6732:	90 93 de 03 	sts	0x03DE, r25
	return ppm_tx_good;
    6736:	80 91 de 03 	lds	r24, 0x03DE
}
    673a:	08 95       	ret

0000673c <ppm_highest_chan_read>:

// report how many channels the TX is outputting
volatile inline uint8_t ppm_highest_chan_read()
{
	return ppm_highest_chan;
    673c:	80 91 d9 03 	lds	r24, 0x03D9
}
    6740:	08 95       	ret

00006742 <ppm_chan_read>:

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
    6742:	e8 2f       	mov	r30, r24
	if (ppm_tx_good == 0)
    6744:	80 91 de 03 	lds	r24, 0x03DE
    6748:	88 23       	and	r24, r24
    674a:	b9 f0       	breq	.+46     	; 0x677a <ppm_chan_read+0x38>
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    674c:	ef 5f       	subi	r30, 0xFF	; 255
    674e:	e0 93 df 03 	sts	0x03DF, r30
    6752:	e1 50       	subi	r30, 0x01	; 1
	int16_t r = ppm_width[i] - ppm_offset[i];
    6754:	f0 e0       	ldi	r31, 0x00	; 0
    6756:	ee 0f       	add	r30, r30
    6758:	ff 1f       	adc	r31, r31
    675a:	df 01       	movw	r26, r30
    675c:	a8 54       	subi	r26, 0x48	; 72
    675e:	bc 4f       	sbci	r27, 0xFC	; 252
    6760:	0d 90       	ld	r0, X+
    6762:	bc 91       	ld	r27, X
    6764:	a0 2d       	mov	r26, r0
    6766:	e8 53       	subi	r30, 0x38	; 56
    6768:	fc 4f       	sbci	r31, 0xFC	; 252
    676a:	80 81       	ld	r24, Z
    676c:	91 81       	ldd	r25, Z+1	; 0x01
    676e:	a8 1b       	sub	r26, r24
    6770:	b9 0b       	sbc	r27, r25
	ppm_read_busy = 0;
    6772:	10 92 df 03 	sts	0x03DF, r1
	return r;
}
    6776:	cd 01       	movw	r24, r26
    6778:	08 95       	ret
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    677a:	a0 e0       	ldi	r26, 0x00	; 0
    677c:	b0 e0       	ldi	r27, 0x00	; 0

	ppm_read_busy = i + 1;
	int16_t r = ppm_width[i] - ppm_offset[i];
	ppm_read_busy = 0;
	return r;
}
    677e:	cd 01       	movw	r24, r26
    6780:	08 95       	ret

00006782 <ppm_center>:

volatile inline uint16_t ppm_center(uint8_t i)
{
	return ppm_offset[i];
    6782:	e8 2f       	mov	r30, r24
    6784:	f0 e0       	ldi	r31, 0x00	; 0
    6786:	ee 0f       	add	r30, r30
    6788:	ff 1f       	adc	r31, r31
    678a:	e8 53       	subi	r30, 0x38	; 56
    678c:	fc 4f       	sbci	r31, 0xFC	; 252
    678e:	20 81       	ld	r18, Z
    6790:	31 81       	ldd	r19, Z+1	; 0x01
}
    6792:	c9 01       	movw	r24, r18
    6794:	08 95       	ret

00006796 <ppm_calibrate>:

// take the average center values of each channel to determin the value for stick center
void ppm_calibrate(uint8_t t)
{
    6796:	af 92       	push	r10
    6798:	bf 92       	push	r11
    679a:	cf 92       	push	r12
    679c:	df 92       	push	r13
    679e:	ef 92       	push	r14
    67a0:	ff 92       	push	r15
    67a2:	0f 93       	push	r16
    67a4:	1f 93       	push	r17
    67a6:	df 93       	push	r29
    67a8:	cf 93       	push	r28
    67aa:	cd b7       	in	r28, 0x3d	; 61
    67ac:	de b7       	in	r29, 0x3e	; 62
    67ae:	a0 97       	sbiw	r28, 0x20	; 32
    67b0:	0f b6       	in	r0, 0x3f	; 63
    67b2:	f8 94       	cli
    67b4:	de bf       	out	0x3e, r29	; 62
    67b6:	0f be       	out	0x3f, r0	; 63
    67b8:	cd bf       	out	0x3d, r28	; 61
    67ba:	68 2f       	mov	r22, r24
	// reset data
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_offset[i] = 0;
    67bc:	10 92 c9 03 	sts	0x03C9, r1
    67c0:	10 92 c8 03 	sts	0x03C8, r1
    67c4:	10 92 cb 03 	sts	0x03CB, r1
    67c8:	10 92 ca 03 	sts	0x03CA, r1
    67cc:	10 92 cd 03 	sts	0x03CD, r1
    67d0:	10 92 cc 03 	sts	0x03CC, r1
    67d4:	10 92 cf 03 	sts	0x03CF, r1
    67d8:	10 92 ce 03 	sts	0x03CE, r1
    67dc:	10 92 d1 03 	sts	0x03D1, r1
    67e0:	10 92 d0 03 	sts	0x03D0, r1
    67e4:	10 92 d3 03 	sts	0x03D3, r1
    67e8:	10 92 d2 03 	sts	0x03D2, r1
    67ec:	10 92 d5 03 	sts	0x03D5, r1
    67f0:	10 92 d4 03 	sts	0x03D4, r1
    67f4:	10 92 d7 03 	sts	0x03D7, r1
    67f8:	10 92 d6 03 	sts	0x03D6, r1
	}
	
	uint32_t sum[8] = {0,0,0,0,0,0,0,0};
    67fc:	fe 01       	movw	r30, r28
    67fe:	31 96       	adiw	r30, 0x01	; 1
    6800:	80 e2       	ldi	r24, 0x20	; 32
    6802:	df 01       	movw	r26, r30
    6804:	1d 92       	st	X+, r1
    6806:	8a 95       	dec	r24
    6808:	e9 f7       	brne	.-6      	; 0x6804 <ppm_calibrate+0x6e>
	for(uint8_t i = 0; i < t; i++)
    680a:	66 23       	and	r22, r22
    680c:	09 f4       	brne	.+2      	; 0x6810 <ppm_calibrate+0x7a>
    680e:	bf c0       	rjmp	.+382    	; 0x698e <ppm_calibrate+0x1f8>
    6810:	e0 e0       	ldi	r30, 0x00	; 0
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6812:	71 e0       	ldi	r23, 0x01	; 1
    6814:	f2 e0       	ldi	r31, 0x02	; 2
    6816:	a3 e0       	ldi	r26, 0x03	; 3
    6818:	b4 e0       	ldi	r27, 0x04	; 4
    681a:	95 e0       	ldi	r25, 0x05	; 5
    681c:	d9 2e       	mov	r13, r25
    681e:	86 e0       	ldi	r24, 0x06	; 6
    6820:	c8 2e       	mov	r12, r24
    6822:	07 e0       	ldi	r16, 0x07	; 7
    6824:	b0 2e       	mov	r11, r16
    6826:	18 e0       	ldi	r17, 0x08	; 8
    6828:	a1 2e       	mov	r10, r17
	
	uint32_t sum[8] = {0,0,0,0,0,0,0,0};
	for(uint8_t i = 0; i < t; i++)
	{
		// sum and average for each channel using t samples
		ppm_new_data = 0;
    682a:	10 92 dd 03 	sts	0x03DD, r1
		while(ppm_new_data == 0);
    682e:	80 91 dd 03 	lds	r24, 0x03DD
    6832:	88 23       	and	r24, r24
    6834:	e1 f3       	breq	.-8      	; 0x682e <ppm_calibrate+0x98>
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    6836:	e9 80       	ldd	r14, Y+1	; 0x01
    6838:	fa 80       	ldd	r15, Y+2	; 0x02
    683a:	0b 81       	ldd	r16, Y+3	; 0x03
    683c:	1c 81       	ldd	r17, Y+4	; 0x04
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    683e:	80 91 de 03 	lds	r24, 0x03DE
    6842:	88 23       	and	r24, r24
    6844:	09 f0       	breq	.+2      	; 0x6848 <ppm_calibrate+0xb2>
    6846:	ca c1       	rjmp	.+916    	; 0x6bdc <ppm_calibrate+0x446>
    6848:	20 e0       	ldi	r18, 0x00	; 0
    684a:	30 e0       	ldi	r19, 0x00	; 0
    684c:	40 e0       	ldi	r20, 0x00	; 0
    684e:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    6850:	2e 0d       	add	r18, r14
    6852:	3f 1d       	adc	r19, r15
    6854:	40 1f       	adc	r20, r16
    6856:	51 1f       	adc	r21, r17
    6858:	29 83       	std	Y+1, r18	; 0x01
    685a:	3a 83       	std	Y+2, r19	; 0x02
    685c:	4b 83       	std	Y+3, r20	; 0x03
    685e:	5c 83       	std	Y+4, r21	; 0x04
    6860:	ed 80       	ldd	r14, Y+5	; 0x05
    6862:	fe 80       	ldd	r15, Y+6	; 0x06
    6864:	0f 81       	ldd	r16, Y+7	; 0x07
    6866:	18 85       	ldd	r17, Y+8	; 0x08
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    6868:	80 91 de 03 	lds	r24, 0x03DE
    686c:	88 23       	and	r24, r24
    686e:	09 f0       	breq	.+2      	; 0x6872 <ppm_calibrate+0xdc>
    6870:	a1 c1       	rjmp	.+834    	; 0x6bb4 <ppm_calibrate+0x41e>
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	40 e0       	ldi	r20, 0x00	; 0
    6878:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    687a:	2e 0d       	add	r18, r14
    687c:	3f 1d       	adc	r19, r15
    687e:	40 1f       	adc	r20, r16
    6880:	51 1f       	adc	r21, r17
    6882:	2d 83       	std	Y+5, r18	; 0x05
    6884:	3e 83       	std	Y+6, r19	; 0x06
    6886:	4f 83       	std	Y+7, r20	; 0x07
    6888:	58 87       	std	Y+8, r21	; 0x08
    688a:	e9 84       	ldd	r14, Y+9	; 0x09
    688c:	fa 84       	ldd	r15, Y+10	; 0x0a
    688e:	0b 85       	ldd	r16, Y+11	; 0x0b
    6890:	1c 85       	ldd	r17, Y+12	; 0x0c
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    6892:	80 91 de 03 	lds	r24, 0x03DE
    6896:	88 23       	and	r24, r24
    6898:	09 f0       	breq	.+2      	; 0x689c <ppm_calibrate+0x106>
    689a:	78 c1       	rjmp	.+752    	; 0x6b8c <ppm_calibrate+0x3f6>
    689c:	20 e0       	ldi	r18, 0x00	; 0
    689e:	30 e0       	ldi	r19, 0x00	; 0
    68a0:	40 e0       	ldi	r20, 0x00	; 0
    68a2:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    68a4:	2e 0d       	add	r18, r14
    68a6:	3f 1d       	adc	r19, r15
    68a8:	40 1f       	adc	r20, r16
    68aa:	51 1f       	adc	r21, r17
    68ac:	29 87       	std	Y+9, r18	; 0x09
    68ae:	3a 87       	std	Y+10, r19	; 0x0a
    68b0:	4b 87       	std	Y+11, r20	; 0x0b
    68b2:	5c 87       	std	Y+12, r21	; 0x0c
    68b4:	ed 84       	ldd	r14, Y+13	; 0x0d
    68b6:	fe 84       	ldd	r15, Y+14	; 0x0e
    68b8:	0f 85       	ldd	r16, Y+15	; 0x0f
    68ba:	18 89       	ldd	r17, Y+16	; 0x10
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    68bc:	80 91 de 03 	lds	r24, 0x03DE
    68c0:	88 23       	and	r24, r24
    68c2:	09 f0       	breq	.+2      	; 0x68c6 <ppm_calibrate+0x130>
    68c4:	4f c1       	rjmp	.+670    	; 0x6b64 <ppm_calibrate+0x3ce>
    68c6:	20 e0       	ldi	r18, 0x00	; 0
    68c8:	30 e0       	ldi	r19, 0x00	; 0
    68ca:	40 e0       	ldi	r20, 0x00	; 0
    68cc:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    68ce:	2e 0d       	add	r18, r14
    68d0:	3f 1d       	adc	r19, r15
    68d2:	40 1f       	adc	r20, r16
    68d4:	51 1f       	adc	r21, r17
    68d6:	2d 87       	std	Y+13, r18	; 0x0d
    68d8:	3e 87       	std	Y+14, r19	; 0x0e
    68da:	4f 87       	std	Y+15, r20	; 0x0f
    68dc:	58 8b       	std	Y+16, r21	; 0x10
    68de:	e9 88       	ldd	r14, Y+17	; 0x11
    68e0:	fa 88       	ldd	r15, Y+18	; 0x12
    68e2:	0b 89       	ldd	r16, Y+19	; 0x13
    68e4:	1c 89       	ldd	r17, Y+20	; 0x14
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    68e6:	80 91 de 03 	lds	r24, 0x03DE
    68ea:	88 23       	and	r24, r24
    68ec:	09 f0       	breq	.+2      	; 0x68f0 <ppm_calibrate+0x15a>
    68ee:	26 c1       	rjmp	.+588    	; 0x6b3c <ppm_calibrate+0x3a6>
    68f0:	20 e0       	ldi	r18, 0x00	; 0
    68f2:	30 e0       	ldi	r19, 0x00	; 0
    68f4:	40 e0       	ldi	r20, 0x00	; 0
    68f6:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    68f8:	2e 0d       	add	r18, r14
    68fa:	3f 1d       	adc	r19, r15
    68fc:	40 1f       	adc	r20, r16
    68fe:	51 1f       	adc	r21, r17
    6900:	29 8b       	std	Y+17, r18	; 0x11
    6902:	3a 8b       	std	Y+18, r19	; 0x12
    6904:	4b 8b       	std	Y+19, r20	; 0x13
    6906:	5c 8b       	std	Y+20, r21	; 0x14
    6908:	ed 88       	ldd	r14, Y+21	; 0x15
    690a:	fe 88       	ldd	r15, Y+22	; 0x16
    690c:	0f 89       	ldd	r16, Y+23	; 0x17
    690e:	18 8d       	ldd	r17, Y+24	; 0x18
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    6910:	80 91 de 03 	lds	r24, 0x03DE
    6914:	88 23       	and	r24, r24
    6916:	09 f0       	breq	.+2      	; 0x691a <ppm_calibrate+0x184>
    6918:	fd c0       	rjmp	.+506    	; 0x6b14 <ppm_calibrate+0x37e>
    691a:	20 e0       	ldi	r18, 0x00	; 0
    691c:	30 e0       	ldi	r19, 0x00	; 0
    691e:	40 e0       	ldi	r20, 0x00	; 0
    6920:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    6922:	2e 0d       	add	r18, r14
    6924:	3f 1d       	adc	r19, r15
    6926:	40 1f       	adc	r20, r16
    6928:	51 1f       	adc	r21, r17
    692a:	2d 8b       	std	Y+21, r18	; 0x15
    692c:	3e 8b       	std	Y+22, r19	; 0x16
    692e:	4f 8b       	std	Y+23, r20	; 0x17
    6930:	58 8f       	std	Y+24, r21	; 0x18
    6932:	e9 8c       	ldd	r14, Y+25	; 0x19
    6934:	fa 8c       	ldd	r15, Y+26	; 0x1a
    6936:	0b 8d       	ldd	r16, Y+27	; 0x1b
    6938:	1c 8d       	ldd	r17, Y+28	; 0x1c
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    693a:	80 91 de 03 	lds	r24, 0x03DE
    693e:	88 23       	and	r24, r24
    6940:	09 f0       	breq	.+2      	; 0x6944 <ppm_calibrate+0x1ae>
    6942:	d4 c0       	rjmp	.+424    	; 0x6aec <ppm_calibrate+0x356>
    6944:	20 e0       	ldi	r18, 0x00	; 0
    6946:	30 e0       	ldi	r19, 0x00	; 0
    6948:	40 e0       	ldi	r20, 0x00	; 0
    694a:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    694c:	2e 0d       	add	r18, r14
    694e:	3f 1d       	adc	r19, r15
    6950:	40 1f       	adc	r20, r16
    6952:	51 1f       	adc	r21, r17
    6954:	29 8f       	std	Y+25, r18	; 0x19
    6956:	3a 8f       	std	Y+26, r19	; 0x1a
    6958:	4b 8f       	std	Y+27, r20	; 0x1b
    695a:	5c 8f       	std	Y+28, r21	; 0x1c
    695c:	ed 8c       	ldd	r14, Y+29	; 0x1d
    695e:	fe 8c       	ldd	r15, Y+30	; 0x1e
    6960:	0f 8d       	ldd	r16, Y+31	; 0x1f
    6962:	18 a1       	ldd	r17, Y+32	; 0x20
}

// read channel value in timer ticks
volatile inline int16_t ppm_chan_read(uint8_t i)
{
	if (ppm_tx_good == 0)
    6964:	80 91 de 03 	lds	r24, 0x03DE
    6968:	88 23       	and	r24, r24
    696a:	09 f0       	breq	.+2      	; 0x696e <ppm_calibrate+0x1d8>
    696c:	ab c0       	rjmp	.+342    	; 0x6ac4 <ppm_calibrate+0x32e>
    696e:	20 e0       	ldi	r18, 0x00	; 0
    6970:	30 e0       	ldi	r19, 0x00	; 0
    6972:	40 e0       	ldi	r20, 0x00	; 0
    6974:	50 e0       	ldi	r21, 0x00	; 0
		// sum and average for each channel using t samples
		ppm_new_data = 0;
		while(ppm_new_data == 0);
		for(uint8_t j = 0; j < 8; j++)
		{
			sum[j] += ppm_chan_read(j);
    6976:	2e 0d       	add	r18, r14
    6978:	3f 1d       	adc	r19, r15
    697a:	40 1f       	adc	r20, r16
    697c:	51 1f       	adc	r21, r17
    697e:	2d 8f       	std	Y+29, r18	; 0x1d
    6980:	3e 8f       	std	Y+30, r19	; 0x1e
    6982:	4f 8f       	std	Y+31, r20	; 0x1f
    6984:	58 a3       	std	Y+32, r21	; 0x20
	{
		ppm_offset[i] = 0;
	}
	
	uint32_t sum[8] = {0,0,0,0,0,0,0,0};
	for(uint8_t i = 0; i < t; i++)
    6986:	ef 5f       	subi	r30, 0xFF	; 255
    6988:	e6 17       	cp	r30, r22
    698a:	08 f4       	brcc	.+2      	; 0x698e <ppm_calibrate+0x1f8>
    698c:	4e cf       	rjmp	.-356    	; 0x682a <ppm_calibrate+0x94>
    698e:	70 e0       	ldi	r23, 0x00	; 0
    6990:	80 e0       	ldi	r24, 0x00	; 0
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    6998:	7b 01       	movw	r14, r22
    699a:	8c 01       	movw	r16, r24
	}
	
	// perform averaging
	for(uint8_t j = 0; j < 8; j++)
	{
		ppm_offset[j] = lround((double)sum[j] / (double)t);
    699c:	69 81       	ldd	r22, Y+1	; 0x01
    699e:	7a 81       	ldd	r23, Y+2	; 0x02
    69a0:	8b 81       	ldd	r24, Y+3	; 0x03
    69a2:	9c 81       	ldd	r25, Y+4	; 0x04
    69a4:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    69a8:	a8 01       	movw	r20, r16
    69aa:	97 01       	movw	r18, r14
    69ac:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    69b0:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    69b4:	70 93 c9 03 	sts	0x03C9, r23
    69b8:	60 93 c8 03 	sts	0x03C8, r22
    69bc:	6d 81       	ldd	r22, Y+5	; 0x05
    69be:	7e 81       	ldd	r23, Y+6	; 0x06
    69c0:	8f 81       	ldd	r24, Y+7	; 0x07
    69c2:	98 85       	ldd	r25, Y+8	; 0x08
    69c4:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    69c8:	a8 01       	movw	r20, r16
    69ca:	97 01       	movw	r18, r14
    69cc:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    69d0:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    69d4:	70 93 cb 03 	sts	0x03CB, r23
    69d8:	60 93 ca 03 	sts	0x03CA, r22
    69dc:	69 85       	ldd	r22, Y+9	; 0x09
    69de:	7a 85       	ldd	r23, Y+10	; 0x0a
    69e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    69e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    69e4:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    69e8:	a8 01       	movw	r20, r16
    69ea:	97 01       	movw	r18, r14
    69ec:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    69f0:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    69f4:	70 93 cd 03 	sts	0x03CD, r23
    69f8:	60 93 cc 03 	sts	0x03CC, r22
    69fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    69fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    6a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a02:	98 89       	ldd	r25, Y+16	; 0x10
    6a04:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    6a08:	a8 01       	movw	r20, r16
    6a0a:	97 01       	movw	r18, r14
    6a0c:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    6a10:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    6a14:	70 93 cf 03 	sts	0x03CF, r23
    6a18:	60 93 ce 03 	sts	0x03CE, r22
    6a1c:	69 89       	ldd	r22, Y+17	; 0x11
    6a1e:	7a 89       	ldd	r23, Y+18	; 0x12
    6a20:	8b 89       	ldd	r24, Y+19	; 0x13
    6a22:	9c 89       	ldd	r25, Y+20	; 0x14
    6a24:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    6a28:	a8 01       	movw	r20, r16
    6a2a:	97 01       	movw	r18, r14
    6a2c:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    6a30:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    6a34:	70 93 d1 03 	sts	0x03D1, r23
    6a38:	60 93 d0 03 	sts	0x03D0, r22
    6a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    6a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    6a40:	8f 89       	ldd	r24, Y+23	; 0x17
    6a42:	98 8d       	ldd	r25, Y+24	; 0x18
    6a44:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    6a48:	a8 01       	movw	r20, r16
    6a4a:	97 01       	movw	r18, r14
    6a4c:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    6a50:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    6a54:	70 93 d3 03 	sts	0x03D3, r23
    6a58:	60 93 d2 03 	sts	0x03D2, r22
    6a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    6a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a64:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    6a68:	a8 01       	movw	r20, r16
    6a6a:	97 01       	movw	r18, r14
    6a6c:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    6a70:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    6a74:	70 93 d5 03 	sts	0x03D5, r23
    6a78:	60 93 d4 03 	sts	0x03D4, r22
    6a7c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    6a7e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6a80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a82:	98 a1       	ldd	r25, Y+32	; 0x20
    6a84:	0e 94 92 12 	call	0x2524	; 0x2524 <__floatunsisf>
    6a88:	a8 01       	movw	r20, r16
    6a8a:	97 01       	movw	r18, r14
    6a8c:	0e 94 02 11 	call	0x2204	; 0x2204 <__divsf3>
    6a90:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <lround>
    6a94:	70 93 d7 03 	sts	0x03D7, r23
    6a98:	60 93 d6 03 	sts	0x03D6, r22
	}
	
	// set flag
	ppm_has_cal = 1;
    6a9c:	81 e0       	ldi	r24, 0x01	; 1
    6a9e:	80 93 e0 03 	sts	0x03E0, r24
    6aa2:	a0 96       	adiw	r28, 0x20	; 32
    6aa4:	0f b6       	in	r0, 0x3f	; 63
    6aa6:	f8 94       	cli
    6aa8:	de bf       	out	0x3e, r29	; 62
    6aaa:	0f be       	out	0x3f, r0	; 63
    6aac:	cd bf       	out	0x3d, r28	; 61
    6aae:	cf 91       	pop	r28
    6ab0:	df 91       	pop	r29
    6ab2:	1f 91       	pop	r17
    6ab4:	0f 91       	pop	r16
    6ab6:	ff 90       	pop	r15
    6ab8:	ef 90       	pop	r14
    6aba:	df 90       	pop	r13
    6abc:	cf 90       	pop	r12
    6abe:	bf 90       	pop	r11
    6ac0:	af 90       	pop	r10
    6ac2:	08 95       	ret
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6ac4:	a0 92 df 03 	sts	0x03DF, r10
	int16_t r = ppm_width[i] - ppm_offset[i];
    6ac8:	80 91 c6 03 	lds	r24, 0x03C6
    6acc:	90 91 c7 03 	lds	r25, 0x03C7
    6ad0:	20 91 d6 03 	lds	r18, 0x03D6
    6ad4:	30 91 d7 03 	lds	r19, 0x03D7
	ppm_read_busy = 0;
    6ad8:	10 92 df 03 	sts	0x03DF, r1
    6adc:	82 1b       	sub	r24, r18
    6ade:	93 0b       	sbc	r25, r19
    6ae0:	9c 01       	movw	r18, r24
    6ae2:	44 27       	eor	r20, r20
    6ae4:	37 fd       	sbrc	r19, 7
    6ae6:	40 95       	com	r20
    6ae8:	54 2f       	mov	r21, r20
    6aea:	45 cf       	rjmp	.-374    	; 0x6976 <ppm_calibrate+0x1e0>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6aec:	b0 92 df 03 	sts	0x03DF, r11
	int16_t r = ppm_width[i] - ppm_offset[i];
    6af0:	80 91 c4 03 	lds	r24, 0x03C4
    6af4:	90 91 c5 03 	lds	r25, 0x03C5
    6af8:	20 91 d4 03 	lds	r18, 0x03D4
    6afc:	30 91 d5 03 	lds	r19, 0x03D5
	ppm_read_busy = 0;
    6b00:	10 92 df 03 	sts	0x03DF, r1
    6b04:	82 1b       	sub	r24, r18
    6b06:	93 0b       	sbc	r25, r19
    6b08:	9c 01       	movw	r18, r24
    6b0a:	44 27       	eor	r20, r20
    6b0c:	37 fd       	sbrc	r19, 7
    6b0e:	40 95       	com	r20
    6b10:	54 2f       	mov	r21, r20
    6b12:	1c cf       	rjmp	.-456    	; 0x694c <ppm_calibrate+0x1b6>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6b14:	c0 92 df 03 	sts	0x03DF, r12
	int16_t r = ppm_width[i] - ppm_offset[i];
    6b18:	80 91 c2 03 	lds	r24, 0x03C2
    6b1c:	90 91 c3 03 	lds	r25, 0x03C3
    6b20:	20 91 d2 03 	lds	r18, 0x03D2
    6b24:	30 91 d3 03 	lds	r19, 0x03D3
	ppm_read_busy = 0;
    6b28:	10 92 df 03 	sts	0x03DF, r1
    6b2c:	82 1b       	sub	r24, r18
    6b2e:	93 0b       	sbc	r25, r19
    6b30:	9c 01       	movw	r18, r24
    6b32:	44 27       	eor	r20, r20
    6b34:	37 fd       	sbrc	r19, 7
    6b36:	40 95       	com	r20
    6b38:	54 2f       	mov	r21, r20
    6b3a:	f3 ce       	rjmp	.-538    	; 0x6922 <ppm_calibrate+0x18c>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6b3c:	d0 92 df 03 	sts	0x03DF, r13
	int16_t r = ppm_width[i] - ppm_offset[i];
    6b40:	80 91 c0 03 	lds	r24, 0x03C0
    6b44:	90 91 c1 03 	lds	r25, 0x03C1
    6b48:	20 91 d0 03 	lds	r18, 0x03D0
    6b4c:	30 91 d1 03 	lds	r19, 0x03D1
	ppm_read_busy = 0;
    6b50:	10 92 df 03 	sts	0x03DF, r1
    6b54:	82 1b       	sub	r24, r18
    6b56:	93 0b       	sbc	r25, r19
    6b58:	9c 01       	movw	r18, r24
    6b5a:	44 27       	eor	r20, r20
    6b5c:	37 fd       	sbrc	r19, 7
    6b5e:	40 95       	com	r20
    6b60:	54 2f       	mov	r21, r20
    6b62:	ca ce       	rjmp	.-620    	; 0x68f8 <ppm_calibrate+0x162>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6b64:	b0 93 df 03 	sts	0x03DF, r27
	int16_t r = ppm_width[i] - ppm_offset[i];
    6b68:	80 91 be 03 	lds	r24, 0x03BE
    6b6c:	90 91 bf 03 	lds	r25, 0x03BF
    6b70:	20 91 ce 03 	lds	r18, 0x03CE
    6b74:	30 91 cf 03 	lds	r19, 0x03CF
	ppm_read_busy = 0;
    6b78:	10 92 df 03 	sts	0x03DF, r1
    6b7c:	82 1b       	sub	r24, r18
    6b7e:	93 0b       	sbc	r25, r19
    6b80:	9c 01       	movw	r18, r24
    6b82:	44 27       	eor	r20, r20
    6b84:	37 fd       	sbrc	r19, 7
    6b86:	40 95       	com	r20
    6b88:	54 2f       	mov	r21, r20
    6b8a:	a1 ce       	rjmp	.-702    	; 0x68ce <ppm_calibrate+0x138>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6b8c:	a0 93 df 03 	sts	0x03DF, r26
	int16_t r = ppm_width[i] - ppm_offset[i];
    6b90:	80 91 bc 03 	lds	r24, 0x03BC
    6b94:	90 91 bd 03 	lds	r25, 0x03BD
    6b98:	20 91 cc 03 	lds	r18, 0x03CC
    6b9c:	30 91 cd 03 	lds	r19, 0x03CD
	ppm_read_busy = 0;
    6ba0:	10 92 df 03 	sts	0x03DF, r1
    6ba4:	82 1b       	sub	r24, r18
    6ba6:	93 0b       	sbc	r25, r19
    6ba8:	9c 01       	movw	r18, r24
    6baa:	44 27       	eor	r20, r20
    6bac:	37 fd       	sbrc	r19, 7
    6bae:	40 95       	com	r20
    6bb0:	54 2f       	mov	r21, r20
    6bb2:	78 ce       	rjmp	.-784    	; 0x68a4 <ppm_calibrate+0x10e>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6bb4:	f0 93 df 03 	sts	0x03DF, r31
	int16_t r = ppm_width[i] - ppm_offset[i];
    6bb8:	80 91 ba 03 	lds	r24, 0x03BA
    6bbc:	90 91 bb 03 	lds	r25, 0x03BB
    6bc0:	20 91 ca 03 	lds	r18, 0x03CA
    6bc4:	30 91 cb 03 	lds	r19, 0x03CB
	ppm_read_busy = 0;
    6bc8:	10 92 df 03 	sts	0x03DF, r1
    6bcc:	82 1b       	sub	r24, r18
    6bce:	93 0b       	sbc	r25, r19
    6bd0:	9c 01       	movw	r18, r24
    6bd2:	44 27       	eor	r20, r20
    6bd4:	37 fd       	sbrc	r19, 7
    6bd6:	40 95       	com	r20
    6bd8:	54 2f       	mov	r21, r20
    6bda:	4f ce       	rjmp	.-866    	; 0x687a <ppm_calibrate+0xe4>
	if (ppm_tx_good == 0)
	{
		return 0;
	}

	ppm_read_busy = i + 1;
    6bdc:	70 93 df 03 	sts	0x03DF, r23
	int16_t r = ppm_width[i] - ppm_offset[i];
    6be0:	80 91 b8 03 	lds	r24, 0x03B8
    6be4:	90 91 b9 03 	lds	r25, 0x03B9
    6be8:	20 91 c8 03 	lds	r18, 0x03C8
    6bec:	30 91 c9 03 	lds	r19, 0x03C9
	ppm_read_busy = 0;
    6bf0:	10 92 df 03 	sts	0x03DF, r1
    6bf4:	82 1b       	sub	r24, r18
    6bf6:	93 0b       	sbc	r25, r19
    6bf8:	9c 01       	movw	r18, r24
    6bfa:	44 27       	eor	r20, r20
    6bfc:	37 fd       	sbrc	r19, 7
    6bfe:	40 95       	com	r20
    6c00:	54 2f       	mov	r21, r20
    6c02:	26 ce       	rjmp	.-948    	; 0x6850 <ppm_calibrate+0xba>

00006c04 <ppm_init>:

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c04:	80 e3       	ldi	r24, 0x30	; 48
    6c06:	95 e7       	ldi	r25, 0x75	; 117
    6c08:	90 93 b9 03 	sts	0x03B9, r25
    6c0c:	80 93 b8 03 	sts	0x03B8, r24
		ppm_offset[i] = ticks_500us * 3;
    6c10:	90 93 c9 03 	sts	0x03C9, r25
    6c14:	80 93 c8 03 	sts	0x03C8, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c18:	90 93 bb 03 	sts	0x03BB, r25
    6c1c:	80 93 ba 03 	sts	0x03BA, r24
		ppm_offset[i] = ticks_500us * 3;
    6c20:	90 93 cb 03 	sts	0x03CB, r25
    6c24:	80 93 ca 03 	sts	0x03CA, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c28:	90 93 bd 03 	sts	0x03BD, r25
    6c2c:	80 93 bc 03 	sts	0x03BC, r24
		ppm_offset[i] = ticks_500us * 3;
    6c30:	90 93 cd 03 	sts	0x03CD, r25
    6c34:	80 93 cc 03 	sts	0x03CC, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c38:	90 93 bf 03 	sts	0x03BF, r25
    6c3c:	80 93 be 03 	sts	0x03BE, r24
		ppm_offset[i] = ticks_500us * 3;
    6c40:	90 93 cf 03 	sts	0x03CF, r25
    6c44:	80 93 ce 03 	sts	0x03CE, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c48:	90 93 c1 03 	sts	0x03C1, r25
    6c4c:	80 93 c0 03 	sts	0x03C0, r24
		ppm_offset[i] = ticks_500us * 3;
    6c50:	90 93 d1 03 	sts	0x03D1, r25
    6c54:	80 93 d0 03 	sts	0x03D0, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c58:	90 93 c3 03 	sts	0x03C3, r25
    6c5c:	80 93 c2 03 	sts	0x03C2, r24
		ppm_offset[i] = ticks_500us * 3;
    6c60:	90 93 d3 03 	sts	0x03D3, r25
    6c64:	80 93 d2 03 	sts	0x03D2, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c68:	90 93 c5 03 	sts	0x03C5, r25
    6c6c:	80 93 c4 03 	sts	0x03C4, r24
		ppm_offset[i] = ticks_500us * 3;
    6c70:	90 93 d5 03 	sts	0x03D5, r25
    6c74:	80 93 d4 03 	sts	0x03D4, r24

void ppm_init()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		ppm_width[i] = ticks_500us * 3;
    6c78:	90 93 c7 03 	sts	0x03C7, r25
    6c7c:	80 93 c6 03 	sts	0x03C6, r24
		ppm_offset[i] = ticks_500us * 3;
    6c80:	90 93 d7 03 	sts	0x03D7, r25
    6c84:	80 93 d6 03 	sts	0x03D6, r24
	}

	ppm_tx_good = 0;
    6c88:	10 92 de 03 	sts	0x03DE, r1
	ppm_new_data = 0;
    6c8c:	10 92 dd 03 	sts	0x03DD, r1
	ppm_chan = 0;
    6c90:	10 92 d8 03 	sts	0x03D8, r1
	ppm_ovf_cnt = 0;
    6c94:	10 92 dc 03 	sts	0x03DC, r1
	ppm_last_capt = 0;
    6c98:	10 92 db 03 	sts	0x03DB, r1
    6c9c:	10 92 da 03 	sts	0x03DA, r1
	ppm_highest_chan = ppm_highest_chan_default;
    6ca0:	86 e0       	ldi	r24, 0x06	; 6
    6ca2:	80 93 d9 03 	sts	0x03D9, r24
	ppm_has_cal = 0;
    6ca6:	10 92 e0 03 	sts	0x03E0, r1

	cbi(ppm_port, ppm_pin);
    6caa:	5e 98       	cbi	0x0b, 6	; 11
	cbi(ppm_ddr, ppm_pin);
    6cac:	56 98       	cbi	0x0a, 6	; 10

	timer1_init();
    6cae:	0e 94 ac 22 	call	0x4558	; 0x4558 <timer1_init>

	TCCR1B |= _BV(ICNC1) | _BV(ICES1);
    6cb2:	e1 e8       	ldi	r30, 0x81	; 129
    6cb4:	f0 e0       	ldi	r31, 0x00	; 0
    6cb6:	80 81       	ld	r24, Z
    6cb8:	80 6c       	ori	r24, 0xC0	; 192
    6cba:	80 83       	st	Z, r24
	TIMSK1 |= _BV(ICIE1) | _BV(TOIE1);
    6cbc:	ef e6       	ldi	r30, 0x6F	; 111
    6cbe:	f0 e0       	ldi	r31, 0x00	; 0
    6cc0:	80 81       	ld	r24, Z
    6cc2:	81 62       	ori	r24, 0x21	; 33
    6cc4:	80 83       	st	Z, r24
}
    6cc6:	08 95       	ret

00006cc8 <debug_report_vars>:
#ifndef debug_autogen_functs_h
#define debug_autogen_functs_h
void debug_report_vars(Calibration * x)
{
    6cc8:	af 92       	push	r10
    6cca:	bf 92       	push	r11
    6ccc:	cf 92       	push	r12
    6cce:	df 92       	push	r13
    6cd0:	ef 92       	push	r14
    6cd2:	ff 92       	push	r15
    6cd4:	0f 93       	push	r16
    6cd6:	1f 93       	push	r17
    6cd8:	cf 93       	push	r28
    6cda:	df 93       	push	r29
    6cdc:	8c 01       	movw	r16, r24
	fprintf_P(&serstream, PSTR("0, int32_t (%d), f_mot_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->f_mot_bot);
    6cde:	8d b7       	in	r24, 0x3d	; 61
    6ce0:	9e b7       	in	r25, 0x3e	; 62
    6ce2:	0a 97       	sbiw	r24, 0x0a	; 10
    6ce4:	0f b6       	in	r0, 0x3f	; 63
    6ce6:	f8 94       	cli
    6ce8:	9e bf       	out	0x3e, r25	; 62
    6cea:	0f be       	out	0x3f, r0	; 63
    6cec:	8d bf       	out	0x3d, r24	; 61
    6cee:	ed b7       	in	r30, 0x3d	; 61
    6cf0:	fe b7       	in	r31, 0x3e	; 62
    6cf2:	31 96       	adiw	r30, 0x01	; 1
    6cf4:	28 e3       	ldi	r18, 0x38	; 56
    6cf6:	e2 2e       	mov	r14, r18
    6cf8:	22 e0       	ldi	r18, 0x02	; 2
    6cfa:	f2 2e       	mov	r15, r18
    6cfc:	ad b7       	in	r26, 0x3d	; 61
    6cfe:	be b7       	in	r27, 0x3e	; 62
    6d00:	12 96       	adiw	r26, 0x02	; 2
    6d02:	fc 92       	st	X, r15
    6d04:	ee 92       	st	-X, r14
    6d06:	11 97       	sbiw	r26, 0x01	; 1
    6d08:	8a e1       	ldi	r24, 0x1A	; 26
    6d0a:	9f e0       	ldi	r25, 0x0F	; 15
    6d0c:	93 83       	std	Z+3, r25	; 0x03
    6d0e:	82 83       	std	Z+2, r24	; 0x02
    6d10:	94 e0       	ldi	r25, 0x04	; 4
    6d12:	c9 2e       	mov	r12, r25
    6d14:	d1 2c       	mov	r13, r1
    6d16:	d5 82       	std	Z+5, r13	; 0x05
    6d18:	c4 82       	std	Z+4, r12	; 0x04
    6d1a:	e8 01       	movw	r28, r16
    6d1c:	88 81       	ld	r24, Y
    6d1e:	99 81       	ldd	r25, Y+1	; 0x01
    6d20:	aa 81       	ldd	r26, Y+2	; 0x02
    6d22:	bb 81       	ldd	r27, Y+3	; 0x03
    6d24:	86 83       	std	Z+6, r24	; 0x06
    6d26:	97 83       	std	Z+7, r25	; 0x07
    6d28:	a0 87       	std	Z+8, r26	; 0x08
    6d2a:	b1 87       	std	Z+9, r27	; 0x09
    6d2c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("1, int32_t (%d), b_mot_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->b_mot_bot);
    6d30:	ed b7       	in	r30, 0x3d	; 61
    6d32:	fe b7       	in	r31, 0x3e	; 62
    6d34:	31 96       	adiw	r30, 0x01	; 1
    6d36:	ad b7       	in	r26, 0x3d	; 61
    6d38:	be b7       	in	r27, 0x3e	; 62
    6d3a:	12 96       	adiw	r26, 0x02	; 2
    6d3c:	fc 92       	st	X, r15
    6d3e:	ee 92       	st	-X, r14
    6d40:	11 97       	sbiw	r26, 0x01	; 1
    6d42:	89 ef       	ldi	r24, 0xF9	; 249
    6d44:	9e e0       	ldi	r25, 0x0E	; 14
    6d46:	93 83       	std	Z+3, r25	; 0x03
    6d48:	82 83       	std	Z+2, r24	; 0x02
    6d4a:	d5 82       	std	Z+5, r13	; 0x05
    6d4c:	c4 82       	std	Z+4, r12	; 0x04
    6d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d50:	9d 81       	ldd	r25, Y+5	; 0x05
    6d52:	ae 81       	ldd	r26, Y+6	; 0x06
    6d54:	bf 81       	ldd	r27, Y+7	; 0x07
    6d56:	86 83       	std	Z+6, r24	; 0x06
    6d58:	97 83       	std	Z+7, r25	; 0x07
    6d5a:	a0 87       	std	Z+8, r26	; 0x08
    6d5c:	b1 87       	std	Z+9, r27	; 0x09
    6d5e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("2, int32_t (%d), l_mot_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->l_mot_bot);
    6d62:	ed b7       	in	r30, 0x3d	; 61
    6d64:	fe b7       	in	r31, 0x3e	; 62
    6d66:	31 96       	adiw	r30, 0x01	; 1
    6d68:	cd b7       	in	r28, 0x3d	; 61
    6d6a:	de b7       	in	r29, 0x3e	; 62
    6d6c:	fa 82       	std	Y+2, r15	; 0x02
    6d6e:	e9 82       	std	Y+1, r14	; 0x01
    6d70:	88 ed       	ldi	r24, 0xD8	; 216
    6d72:	9e e0       	ldi	r25, 0x0E	; 14
    6d74:	93 83       	std	Z+3, r25	; 0x03
    6d76:	82 83       	std	Z+2, r24	; 0x02
    6d78:	d5 82       	std	Z+5, r13	; 0x05
    6d7a:	c4 82       	std	Z+4, r12	; 0x04
    6d7c:	e8 01       	movw	r28, r16
    6d7e:	88 85       	ldd	r24, Y+8	; 0x08
    6d80:	99 85       	ldd	r25, Y+9	; 0x09
    6d82:	aa 85       	ldd	r26, Y+10	; 0x0a
    6d84:	bb 85       	ldd	r27, Y+11	; 0x0b
    6d86:	86 83       	std	Z+6, r24	; 0x06
    6d88:	97 83       	std	Z+7, r25	; 0x07
    6d8a:	a0 87       	std	Z+8, r26	; 0x08
    6d8c:	b1 87       	std	Z+9, r27	; 0x09
    6d8e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("3, int32_t (%d), r_mot_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->r_mot_bot);
    6d92:	ed b7       	in	r30, 0x3d	; 61
    6d94:	fe b7       	in	r31, 0x3e	; 62
    6d96:	31 96       	adiw	r30, 0x01	; 1
    6d98:	ad b7       	in	r26, 0x3d	; 61
    6d9a:	be b7       	in	r27, 0x3e	; 62
    6d9c:	12 96       	adiw	r26, 0x02	; 2
    6d9e:	fc 92       	st	X, r15
    6da0:	ee 92       	st	-X, r14
    6da2:	11 97       	sbiw	r26, 0x01	; 1
    6da4:	87 eb       	ldi	r24, 0xB7	; 183
    6da6:	9e e0       	ldi	r25, 0x0E	; 14
    6da8:	93 83       	std	Z+3, r25	; 0x03
    6daa:	82 83       	std	Z+2, r24	; 0x02
    6dac:	d5 82       	std	Z+5, r13	; 0x05
    6dae:	c4 82       	std	Z+4, r12	; 0x04
    6db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    6db2:	9d 85       	ldd	r25, Y+13	; 0x0d
    6db4:	ae 85       	ldd	r26, Y+14	; 0x0e
    6db6:	bf 85       	ldd	r27, Y+15	; 0x0f
    6db8:	86 83       	std	Z+6, r24	; 0x06
    6dba:	97 83       	std	Z+7, r25	; 0x07
    6dbc:	a0 87       	std	Z+8, r26	; 0x08
    6dbe:	b1 87       	std	Z+9, r27	; 0x09
    6dc0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("4, int32_t (%d), f_mot_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->f_mot_scale);
    6dc4:	ed b7       	in	r30, 0x3d	; 61
    6dc6:	fe b7       	in	r31, 0x3e	; 62
    6dc8:	31 96       	adiw	r30, 0x01	; 1
    6dca:	cd b7       	in	r28, 0x3d	; 61
    6dcc:	de b7       	in	r29, 0x3e	; 62
    6dce:	fa 82       	std	Y+2, r15	; 0x02
    6dd0:	e9 82       	std	Y+1, r14	; 0x01
    6dd2:	84 e9       	ldi	r24, 0x94	; 148
    6dd4:	9e e0       	ldi	r25, 0x0E	; 14
    6dd6:	93 83       	std	Z+3, r25	; 0x03
    6dd8:	82 83       	std	Z+2, r24	; 0x02
    6dda:	d5 82       	std	Z+5, r13	; 0x05
    6ddc:	c4 82       	std	Z+4, r12	; 0x04
    6dde:	e8 01       	movw	r28, r16
    6de0:	88 89       	ldd	r24, Y+16	; 0x10
    6de2:	99 89       	ldd	r25, Y+17	; 0x11
    6de4:	aa 89       	ldd	r26, Y+18	; 0x12
    6de6:	bb 89       	ldd	r27, Y+19	; 0x13
    6de8:	86 83       	std	Z+6, r24	; 0x06
    6dea:	97 83       	std	Z+7, r25	; 0x07
    6dec:	a0 87       	std	Z+8, r26	; 0x08
    6dee:	b1 87       	std	Z+9, r27	; 0x09
    6df0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("5, int32_t (%d), b_mot_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->b_mot_scale);
    6df4:	ed b7       	in	r30, 0x3d	; 61
    6df6:	fe b7       	in	r31, 0x3e	; 62
    6df8:	31 96       	adiw	r30, 0x01	; 1
    6dfa:	ad b7       	in	r26, 0x3d	; 61
    6dfc:	be b7       	in	r27, 0x3e	; 62
    6dfe:	12 96       	adiw	r26, 0x02	; 2
    6e00:	fc 92       	st	X, r15
    6e02:	ee 92       	st	-X, r14
    6e04:	11 97       	sbiw	r26, 0x01	; 1
    6e06:	81 e7       	ldi	r24, 0x71	; 113
    6e08:	9e e0       	ldi	r25, 0x0E	; 14
    6e0a:	93 83       	std	Z+3, r25	; 0x03
    6e0c:	82 83       	std	Z+2, r24	; 0x02
    6e0e:	d5 82       	std	Z+5, r13	; 0x05
    6e10:	c4 82       	std	Z+4, r12	; 0x04
    6e12:	8c 89       	ldd	r24, Y+20	; 0x14
    6e14:	9d 89       	ldd	r25, Y+21	; 0x15
    6e16:	ae 89       	ldd	r26, Y+22	; 0x16
    6e18:	bf 89       	ldd	r27, Y+23	; 0x17
    6e1a:	86 83       	std	Z+6, r24	; 0x06
    6e1c:	97 83       	std	Z+7, r25	; 0x07
    6e1e:	a0 87       	std	Z+8, r26	; 0x08
    6e20:	b1 87       	std	Z+9, r27	; 0x09
    6e22:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("6, int32_t (%d), l_mot_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->l_mot_scale);
    6e26:	ed b7       	in	r30, 0x3d	; 61
    6e28:	fe b7       	in	r31, 0x3e	; 62
    6e2a:	31 96       	adiw	r30, 0x01	; 1
    6e2c:	cd b7       	in	r28, 0x3d	; 61
    6e2e:	de b7       	in	r29, 0x3e	; 62
    6e30:	fa 82       	std	Y+2, r15	; 0x02
    6e32:	e9 82       	std	Y+1, r14	; 0x01
    6e34:	8e e4       	ldi	r24, 0x4E	; 78
    6e36:	9e e0       	ldi	r25, 0x0E	; 14
    6e38:	93 83       	std	Z+3, r25	; 0x03
    6e3a:	82 83       	std	Z+2, r24	; 0x02
    6e3c:	d5 82       	std	Z+5, r13	; 0x05
    6e3e:	c4 82       	std	Z+4, r12	; 0x04
    6e40:	e8 01       	movw	r28, r16
    6e42:	88 8d       	ldd	r24, Y+24	; 0x18
    6e44:	99 8d       	ldd	r25, Y+25	; 0x19
    6e46:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6e48:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6e4a:	86 83       	std	Z+6, r24	; 0x06
    6e4c:	97 83       	std	Z+7, r25	; 0x07
    6e4e:	a0 87       	std	Z+8, r26	; 0x08
    6e50:	b1 87       	std	Z+9, r27	; 0x09
    6e52:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("7, int32_t (%d), r_mot_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->r_mot_scale);
    6e56:	ed b7       	in	r30, 0x3d	; 61
    6e58:	fe b7       	in	r31, 0x3e	; 62
    6e5a:	31 96       	adiw	r30, 0x01	; 1
    6e5c:	ad b7       	in	r26, 0x3d	; 61
    6e5e:	be b7       	in	r27, 0x3e	; 62
    6e60:	12 96       	adiw	r26, 0x02	; 2
    6e62:	fc 92       	st	X, r15
    6e64:	ee 92       	st	-X, r14
    6e66:	11 97       	sbiw	r26, 0x01	; 1
    6e68:	8b e2       	ldi	r24, 0x2B	; 43
    6e6a:	9e e0       	ldi	r25, 0x0E	; 14
    6e6c:	93 83       	std	Z+3, r25	; 0x03
    6e6e:	82 83       	std	Z+2, r24	; 0x02
    6e70:	d5 82       	std	Z+5, r13	; 0x05
    6e72:	c4 82       	std	Z+4, r12	; 0x04
    6e74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6e76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6e78:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6e7a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6e7c:	86 83       	std	Z+6, r24	; 0x06
    6e7e:	97 83       	std	Z+7, r25	; 0x07
    6e80:	a0 87       	std	Z+8, r26	; 0x08
    6e82:	b1 87       	std	Z+9, r27	; 0x09
    6e84:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("8, uint8_t (%d), motor_mode: %d\r\n"), (uint8_t)sizeof(uint8_t), x->motor_mode);
    6e88:	0f 90       	pop	r0
    6e8a:	0f 90       	pop	r0
    6e8c:	ed b7       	in	r30, 0x3d	; 61
    6e8e:	fe b7       	in	r31, 0x3e	; 62
    6e90:	31 96       	adiw	r30, 0x01	; 1
    6e92:	cd b7       	in	r28, 0x3d	; 61
    6e94:	de b7       	in	r29, 0x3e	; 62
    6e96:	fa 82       	std	Y+2, r15	; 0x02
    6e98:	e9 82       	std	Y+1, r14	; 0x01
    6e9a:	89 e0       	ldi	r24, 0x09	; 9
    6e9c:	9e e0       	ldi	r25, 0x0E	; 14
    6e9e:	93 83       	std	Z+3, r25	; 0x03
    6ea0:	82 83       	std	Z+2, r24	; 0x02
    6ea2:	81 e0       	ldi	r24, 0x01	; 1
    6ea4:	a8 2e       	mov	r10, r24
    6ea6:	b1 2c       	mov	r11, r1
    6ea8:	b5 82       	std	Z+5, r11	; 0x05
    6eaa:	a4 82       	std	Z+4, r10	; 0x04
    6eac:	d8 01       	movw	r26, r16
    6eae:	90 96       	adiw	r26, 0x20	; 32
    6eb0:	8c 91       	ld	r24, X
    6eb2:	86 83       	std	Z+6, r24	; 0x06
    6eb4:	17 82       	std	Z+7, r1	; 0x07
    6eb6:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("9, int32_t (%d), yaw_gyro_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->yaw_gyro_scale);
    6eba:	00 d0       	rcall	.+0      	; 0x6ebc <debug_report_vars+0x1f4>
    6ebc:	ed b7       	in	r30, 0x3d	; 61
    6ebe:	fe b7       	in	r31, 0x3e	; 62
    6ec0:	31 96       	adiw	r30, 0x01	; 1
    6ec2:	cd b7       	in	r28, 0x3d	; 61
    6ec4:	de b7       	in	r29, 0x3e	; 62
    6ec6:	fa 82       	std	Y+2, r15	; 0x02
    6ec8:	e9 82       	std	Y+1, r14	; 0x01
    6eca:	83 ee       	ldi	r24, 0xE3	; 227
    6ecc:	9d e0       	ldi	r25, 0x0D	; 13
    6ece:	93 83       	std	Z+3, r25	; 0x03
    6ed0:	82 83       	std	Z+2, r24	; 0x02
    6ed2:	d5 82       	std	Z+5, r13	; 0x05
    6ed4:	c4 82       	std	Z+4, r12	; 0x04
    6ed6:	e8 01       	movw	r28, r16
    6ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    6eda:	9a a1       	ldd	r25, Y+34	; 0x22
    6edc:	ab a1       	ldd	r26, Y+35	; 0x23
    6ede:	bc a1       	ldd	r27, Y+36	; 0x24
    6ee0:	86 83       	std	Z+6, r24	; 0x06
    6ee2:	97 83       	std	Z+7, r25	; 0x07
    6ee4:	a0 87       	std	Z+8, r26	; 0x08
    6ee6:	b1 87       	std	Z+9, r27	; 0x09
    6ee8:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("10, int32_t (%d), roll_accel_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_accel_bot);
    6eec:	ed b7       	in	r30, 0x3d	; 61
    6eee:	fe b7       	in	r31, 0x3e	; 62
    6ef0:	31 96       	adiw	r30, 0x01	; 1
    6ef2:	ad b7       	in	r26, 0x3d	; 61
    6ef4:	be b7       	in	r27, 0x3e	; 62
    6ef6:	12 96       	adiw	r26, 0x02	; 2
    6ef8:	fc 92       	st	X, r15
    6efa:	ee 92       	st	-X, r14
    6efc:	11 97       	sbiw	r26, 0x01	; 1
    6efe:	8c eb       	ldi	r24, 0xBC	; 188
    6f00:	9d e0       	ldi	r25, 0x0D	; 13
    6f02:	93 83       	std	Z+3, r25	; 0x03
    6f04:	82 83       	std	Z+2, r24	; 0x02
    6f06:	d5 82       	std	Z+5, r13	; 0x05
    6f08:	c4 82       	std	Z+4, r12	; 0x04
    6f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    6f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    6f0e:	af a1       	ldd	r26, Y+39	; 0x27
    6f10:	b8 a5       	ldd	r27, Y+40	; 0x28
    6f12:	86 83       	std	Z+6, r24	; 0x06
    6f14:	97 83       	std	Z+7, r25	; 0x07
    6f16:	a0 87       	std	Z+8, r26	; 0x08
    6f18:	b1 87       	std	Z+9, r27	; 0x09
    6f1a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("11, int32_t (%d), roll_accel_center: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_accel_center);
    6f1e:	ed b7       	in	r30, 0x3d	; 61
    6f20:	fe b7       	in	r31, 0x3e	; 62
    6f22:	31 96       	adiw	r30, 0x01	; 1
    6f24:	cd b7       	in	r28, 0x3d	; 61
    6f26:	de b7       	in	r29, 0x3e	; 62
    6f28:	fa 82       	std	Y+2, r15	; 0x02
    6f2a:	e9 82       	std	Y+1, r14	; 0x01
    6f2c:	82 e9       	ldi	r24, 0x92	; 146
    6f2e:	9d e0       	ldi	r25, 0x0D	; 13
    6f30:	93 83       	std	Z+3, r25	; 0x03
    6f32:	82 83       	std	Z+2, r24	; 0x02
    6f34:	d5 82       	std	Z+5, r13	; 0x05
    6f36:	c4 82       	std	Z+4, r12	; 0x04
    6f38:	e8 01       	movw	r28, r16
    6f3a:	89 a5       	ldd	r24, Y+41	; 0x29
    6f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    6f3e:	ab a5       	ldd	r26, Y+43	; 0x2b
    6f40:	bc a5       	ldd	r27, Y+44	; 0x2c
    6f42:	86 83       	std	Z+6, r24	; 0x06
    6f44:	97 83       	std	Z+7, r25	; 0x07
    6f46:	a0 87       	std	Z+8, r26	; 0x08
    6f48:	b1 87       	std	Z+9, r27	; 0x09
    6f4a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("12, int32_t (%d), roll_accel_top: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_accel_top);
    6f4e:	ed b7       	in	r30, 0x3d	; 61
    6f50:	fe b7       	in	r31, 0x3e	; 62
    6f52:	31 96       	adiw	r30, 0x01	; 1
    6f54:	ad b7       	in	r26, 0x3d	; 61
    6f56:	be b7       	in	r27, 0x3e	; 62
    6f58:	12 96       	adiw	r26, 0x02	; 2
    6f5a:	fc 92       	st	X, r15
    6f5c:	ee 92       	st	-X, r14
    6f5e:	11 97       	sbiw	r26, 0x01	; 1
    6f60:	8b e6       	ldi	r24, 0x6B	; 107
    6f62:	9d e0       	ldi	r25, 0x0D	; 13
    6f64:	93 83       	std	Z+3, r25	; 0x03
    6f66:	82 83       	std	Z+2, r24	; 0x02
    6f68:	d5 82       	std	Z+5, r13	; 0x05
    6f6a:	c4 82       	std	Z+4, r12	; 0x04
    6f6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    6f6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6f70:	af a5       	ldd	r26, Y+47	; 0x2f
    6f72:	b8 a9       	ldd	r27, Y+48	; 0x30
    6f74:	86 83       	std	Z+6, r24	; 0x06
    6f76:	97 83       	std	Z+7, r25	; 0x07
    6f78:	a0 87       	std	Z+8, r26	; 0x08
    6f7a:	b1 87       	std	Z+9, r27	; 0x09
    6f7c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("13, int32_t (%d), pitch_accel_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_accel_bot);
    6f80:	ed b7       	in	r30, 0x3d	; 61
    6f82:	fe b7       	in	r31, 0x3e	; 62
    6f84:	31 96       	adiw	r30, 0x01	; 1
    6f86:	cd b7       	in	r28, 0x3d	; 61
    6f88:	de b7       	in	r29, 0x3e	; 62
    6f8a:	fa 82       	std	Y+2, r15	; 0x02
    6f8c:	e9 82       	std	Y+1, r14	; 0x01
    6f8e:	83 e4       	ldi	r24, 0x43	; 67
    6f90:	9d e0       	ldi	r25, 0x0D	; 13
    6f92:	93 83       	std	Z+3, r25	; 0x03
    6f94:	82 83       	std	Z+2, r24	; 0x02
    6f96:	d5 82       	std	Z+5, r13	; 0x05
    6f98:	c4 82       	std	Z+4, r12	; 0x04
    6f9a:	e8 01       	movw	r28, r16
    6f9c:	89 a9       	ldd	r24, Y+49	; 0x31
    6f9e:	9a a9       	ldd	r25, Y+50	; 0x32
    6fa0:	ab a9       	ldd	r26, Y+51	; 0x33
    6fa2:	bc a9       	ldd	r27, Y+52	; 0x34
    6fa4:	86 83       	std	Z+6, r24	; 0x06
    6fa6:	97 83       	std	Z+7, r25	; 0x07
    6fa8:	a0 87       	std	Z+8, r26	; 0x08
    6faa:	b1 87       	std	Z+9, r27	; 0x09
    6fac:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("14, int32_t (%d), pitch_accel_center: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_accel_center);
    6fb0:	ed b7       	in	r30, 0x3d	; 61
    6fb2:	fe b7       	in	r31, 0x3e	; 62
    6fb4:	31 96       	adiw	r30, 0x01	; 1
    6fb6:	ad b7       	in	r26, 0x3d	; 61
    6fb8:	be b7       	in	r27, 0x3e	; 62
    6fba:	12 96       	adiw	r26, 0x02	; 2
    6fbc:	fc 92       	st	X, r15
    6fbe:	ee 92       	st	-X, r14
    6fc0:	11 97       	sbiw	r26, 0x01	; 1
    6fc2:	88 e1       	ldi	r24, 0x18	; 24
    6fc4:	9d e0       	ldi	r25, 0x0D	; 13
    6fc6:	93 83       	std	Z+3, r25	; 0x03
    6fc8:	82 83       	std	Z+2, r24	; 0x02
    6fca:	d5 82       	std	Z+5, r13	; 0x05
    6fcc:	c4 82       	std	Z+4, r12	; 0x04
    6fce:	8d a9       	ldd	r24, Y+53	; 0x35
    6fd0:	9e a9       	ldd	r25, Y+54	; 0x36
    6fd2:	af a9       	ldd	r26, Y+55	; 0x37
    6fd4:	b8 ad       	ldd	r27, Y+56	; 0x38
    6fd6:	86 83       	std	Z+6, r24	; 0x06
    6fd8:	97 83       	std	Z+7, r25	; 0x07
    6fda:	a0 87       	std	Z+8, r26	; 0x08
    6fdc:	b1 87       	std	Z+9, r27	; 0x09
    6fde:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("15, int32_t (%d), pitch_accel_top: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_accel_top);
    6fe2:	ed b7       	in	r30, 0x3d	; 61
    6fe4:	fe b7       	in	r31, 0x3e	; 62
    6fe6:	31 96       	adiw	r30, 0x01	; 1
    6fe8:	cd b7       	in	r28, 0x3d	; 61
    6fea:	de b7       	in	r29, 0x3e	; 62
    6fec:	fa 82       	std	Y+2, r15	; 0x02
    6fee:	e9 82       	std	Y+1, r14	; 0x01
    6ff0:	80 ef       	ldi	r24, 0xF0	; 240
    6ff2:	9c e0       	ldi	r25, 0x0C	; 12
    6ff4:	93 83       	std	Z+3, r25	; 0x03
    6ff6:	82 83       	std	Z+2, r24	; 0x02
    6ff8:	d5 82       	std	Z+5, r13	; 0x05
    6ffa:	c4 82       	std	Z+4, r12	; 0x04
    6ffc:	e8 01       	movw	r28, r16
    6ffe:	89 ad       	ldd	r24, Y+57	; 0x39
    7000:	9a ad       	ldd	r25, Y+58	; 0x3a
    7002:	ab ad       	ldd	r26, Y+59	; 0x3b
    7004:	bc ad       	ldd	r27, Y+60	; 0x3c
    7006:	86 83       	std	Z+6, r24	; 0x06
    7008:	97 83       	std	Z+7, r25	; 0x07
    700a:	a0 87       	std	Z+8, r26	; 0x08
    700c:	b1 87       	std	Z+9, r27	; 0x09
    700e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("16, int32_t (%d), vert_accel_bot: %d\r\n"), (uint8_t)sizeof(int32_t), x->vert_accel_bot);
    7012:	ed b7       	in	r30, 0x3d	; 61
    7014:	fe b7       	in	r31, 0x3e	; 62
    7016:	31 96       	adiw	r30, 0x01	; 1
    7018:	ad b7       	in	r26, 0x3d	; 61
    701a:	be b7       	in	r27, 0x3e	; 62
    701c:	12 96       	adiw	r26, 0x02	; 2
    701e:	fc 92       	st	X, r15
    7020:	ee 92       	st	-X, r14
    7022:	11 97       	sbiw	r26, 0x01	; 1
    7024:	89 ec       	ldi	r24, 0xC9	; 201
    7026:	9c e0       	ldi	r25, 0x0C	; 12
    7028:	93 83       	std	Z+3, r25	; 0x03
    702a:	82 83       	std	Z+2, r24	; 0x02
    702c:	d5 82       	std	Z+5, r13	; 0x05
    702e:	c4 82       	std	Z+4, r12	; 0x04
    7030:	03 5c       	subi	r16, 0xC3	; 195
    7032:	1f 4f       	sbci	r17, 0xFF	; 255
    7034:	e8 01       	movw	r28, r16
    7036:	89 91       	ld	r24, Y+
    7038:	99 91       	ld	r25, Y+
    703a:	a9 91       	ld	r26, Y+
    703c:	b9 91       	ld	r27, Y+
    703e:	86 83       	std	Z+6, r24	; 0x06
    7040:	97 83       	std	Z+7, r25	; 0x07
    7042:	a0 87       	std	Z+8, r26	; 0x08
    7044:	b1 87       	std	Z+9, r27	; 0x09
    7046:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("17, int32_t (%d), vert_accel_top: %d\r\n"), (uint8_t)sizeof(int32_t), x->vert_accel_top);
    704a:	ed b7       	in	r30, 0x3d	; 61
    704c:	fe b7       	in	r31, 0x3e	; 62
    704e:	31 96       	adiw	r30, 0x01	; 1
    7050:	ad b7       	in	r26, 0x3d	; 61
    7052:	be b7       	in	r27, 0x3e	; 62
    7054:	12 96       	adiw	r26, 0x02	; 2
    7056:	fc 92       	st	X, r15
    7058:	ee 92       	st	-X, r14
    705a:	11 97       	sbiw	r26, 0x01	; 1
    705c:	82 ea       	ldi	r24, 0xA2	; 162
    705e:	9c e0       	ldi	r25, 0x0C	; 12
    7060:	93 83       	std	Z+3, r25	; 0x03
    7062:	82 83       	std	Z+2, r24	; 0x02
    7064:	d5 82       	std	Z+5, r13	; 0x05
    7066:	c4 82       	std	Z+4, r12	; 0x04
    7068:	89 91       	ld	r24, Y+
    706a:	99 91       	ld	r25, Y+
    706c:	a9 91       	ld	r26, Y+
    706e:	b9 91       	ld	r27, Y+
    7070:	86 83       	std	Z+6, r24	; 0x06
    7072:	97 83       	std	Z+7, r25	; 0x07
    7074:	a0 87       	std	Z+8, r26	; 0x08
    7076:	b1 87       	std	Z+9, r27	; 0x09
    7078:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("18, int32_t (%d), pitch_angle_offset: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_angle_offset);
    707c:	ed b7       	in	r30, 0x3d	; 61
    707e:	fe b7       	in	r31, 0x3e	; 62
    7080:	31 96       	adiw	r30, 0x01	; 1
    7082:	ad b7       	in	r26, 0x3d	; 61
    7084:	be b7       	in	r27, 0x3e	; 62
    7086:	12 96       	adiw	r26, 0x02	; 2
    7088:	fc 92       	st	X, r15
    708a:	ee 92       	st	-X, r14
    708c:	11 97       	sbiw	r26, 0x01	; 1
    708e:	87 e7       	ldi	r24, 0x77	; 119
    7090:	9c e0       	ldi	r25, 0x0C	; 12
    7092:	93 83       	std	Z+3, r25	; 0x03
    7094:	82 83       	std	Z+2, r24	; 0x02
    7096:	d5 82       	std	Z+5, r13	; 0x05
    7098:	c4 82       	std	Z+4, r12	; 0x04
    709a:	89 91       	ld	r24, Y+
    709c:	99 91       	ld	r25, Y+
    709e:	a9 91       	ld	r26, Y+
    70a0:	b9 91       	ld	r27, Y+
    70a2:	86 83       	std	Z+6, r24	; 0x06
    70a4:	97 83       	std	Z+7, r25	; 0x07
    70a6:	a0 87       	std	Z+8, r26	; 0x08
    70a8:	b1 87       	std	Z+9, r27	; 0x09
    70aa:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("19, int32_t (%d), roll_angle_offset: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_angle_offset);
    70ae:	ed b7       	in	r30, 0x3d	; 61
    70b0:	fe b7       	in	r31, 0x3e	; 62
    70b2:	31 96       	adiw	r30, 0x01	; 1
    70b4:	ad b7       	in	r26, 0x3d	; 61
    70b6:	be b7       	in	r27, 0x3e	; 62
    70b8:	12 96       	adiw	r26, 0x02	; 2
    70ba:	fc 92       	st	X, r15
    70bc:	ee 92       	st	-X, r14
    70be:	11 97       	sbiw	r26, 0x01	; 1
    70c0:	8d e4       	ldi	r24, 0x4D	; 77
    70c2:	9c e0       	ldi	r25, 0x0C	; 12
    70c4:	93 83       	std	Z+3, r25	; 0x03
    70c6:	82 83       	std	Z+2, r24	; 0x02
    70c8:	d5 82       	std	Z+5, r13	; 0x05
    70ca:	c4 82       	std	Z+4, r12	; 0x04
    70cc:	89 91       	ld	r24, Y+
    70ce:	99 91       	ld	r25, Y+
    70d0:	a9 91       	ld	r26, Y+
    70d2:	b9 91       	ld	r27, Y+
    70d4:	86 83       	std	Z+6, r24	; 0x06
    70d6:	97 83       	std	Z+7, r25	; 0x07
    70d8:	a0 87       	std	Z+8, r26	; 0x08
    70da:	b1 87       	std	Z+9, r27	; 0x09
    70dc:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("20, int32_t (%d), pitch_gyro_to_rate: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_gyro_to_rate);
    70e0:	ed b7       	in	r30, 0x3d	; 61
    70e2:	fe b7       	in	r31, 0x3e	; 62
    70e4:	31 96       	adiw	r30, 0x01	; 1
    70e6:	ad b7       	in	r26, 0x3d	; 61
    70e8:	be b7       	in	r27, 0x3e	; 62
    70ea:	12 96       	adiw	r26, 0x02	; 2
    70ec:	fc 92       	st	X, r15
    70ee:	ee 92       	st	-X, r14
    70f0:	11 97       	sbiw	r26, 0x01	; 1
    70f2:	82 e2       	ldi	r24, 0x22	; 34
    70f4:	9c e0       	ldi	r25, 0x0C	; 12
    70f6:	93 83       	std	Z+3, r25	; 0x03
    70f8:	82 83       	std	Z+2, r24	; 0x02
    70fa:	d5 82       	std	Z+5, r13	; 0x05
    70fc:	c4 82       	std	Z+4, r12	; 0x04
    70fe:	89 91       	ld	r24, Y+
    7100:	99 91       	ld	r25, Y+
    7102:	a9 91       	ld	r26, Y+
    7104:	b9 91       	ld	r27, Y+
    7106:	86 83       	std	Z+6, r24	; 0x06
    7108:	97 83       	std	Z+7, r25	; 0x07
    710a:	a0 87       	std	Z+8, r26	; 0x08
    710c:	b1 87       	std	Z+9, r27	; 0x09
    710e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("21, int32_t (%d), roll_gyro_to_rate: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_gyro_to_rate);
    7112:	ed b7       	in	r30, 0x3d	; 61
    7114:	fe b7       	in	r31, 0x3e	; 62
    7116:	31 96       	adiw	r30, 0x01	; 1
    7118:	ad b7       	in	r26, 0x3d	; 61
    711a:	be b7       	in	r27, 0x3e	; 62
    711c:	12 96       	adiw	r26, 0x02	; 2
    711e:	fc 92       	st	X, r15
    7120:	ee 92       	st	-X, r14
    7122:	11 97       	sbiw	r26, 0x01	; 1
    7124:	88 ef       	ldi	r24, 0xF8	; 248
    7126:	9b e0       	ldi	r25, 0x0B	; 11
    7128:	93 83       	std	Z+3, r25	; 0x03
    712a:	82 83       	std	Z+2, r24	; 0x02
    712c:	d5 82       	std	Z+5, r13	; 0x05
    712e:	c4 82       	std	Z+4, r12	; 0x04
    7130:	89 91       	ld	r24, Y+
    7132:	99 91       	ld	r25, Y+
    7134:	a9 91       	ld	r26, Y+
    7136:	b9 91       	ld	r27, Y+
    7138:	86 83       	std	Z+6, r24	; 0x06
    713a:	97 83       	std	Z+7, r25	; 0x07
    713c:	a0 87       	std	Z+8, r26	; 0x08
    713e:	b1 87       	std	Z+9, r27	; 0x09
    7140:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("22, int32_t (%d), roll_ppm_center: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_ppm_center);
    7144:	ed b7       	in	r30, 0x3d	; 61
    7146:	fe b7       	in	r31, 0x3e	; 62
    7148:	31 96       	adiw	r30, 0x01	; 1
    714a:	ad b7       	in	r26, 0x3d	; 61
    714c:	be b7       	in	r27, 0x3e	; 62
    714e:	12 96       	adiw	r26, 0x02	; 2
    7150:	fc 92       	st	X, r15
    7152:	ee 92       	st	-X, r14
    7154:	11 97       	sbiw	r26, 0x01	; 1
    7156:	80 ed       	ldi	r24, 0xD0	; 208
    7158:	9b e0       	ldi	r25, 0x0B	; 11
    715a:	93 83       	std	Z+3, r25	; 0x03
    715c:	82 83       	std	Z+2, r24	; 0x02
    715e:	d5 82       	std	Z+5, r13	; 0x05
    7160:	c4 82       	std	Z+4, r12	; 0x04
    7162:	89 91       	ld	r24, Y+
    7164:	99 91       	ld	r25, Y+
    7166:	a9 91       	ld	r26, Y+
    7168:	b9 91       	ld	r27, Y+
    716a:	86 83       	std	Z+6, r24	; 0x06
    716c:	97 83       	std	Z+7, r25	; 0x07
    716e:	a0 87       	std	Z+8, r26	; 0x08
    7170:	b1 87       	std	Z+9, r27	; 0x09
    7172:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("23, int32_t (%d), pitch_ppm_center: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_ppm_center);
    7176:	ed b7       	in	r30, 0x3d	; 61
    7178:	fe b7       	in	r31, 0x3e	; 62
    717a:	31 96       	adiw	r30, 0x01	; 1
    717c:	ad b7       	in	r26, 0x3d	; 61
    717e:	be b7       	in	r27, 0x3e	; 62
    7180:	12 96       	adiw	r26, 0x02	; 2
    7182:	fc 92       	st	X, r15
    7184:	ee 92       	st	-X, r14
    7186:	11 97       	sbiw	r26, 0x01	; 1
    7188:	87 ea       	ldi	r24, 0xA7	; 167
    718a:	9b e0       	ldi	r25, 0x0B	; 11
    718c:	93 83       	std	Z+3, r25	; 0x03
    718e:	82 83       	std	Z+2, r24	; 0x02
    7190:	d5 82       	std	Z+5, r13	; 0x05
    7192:	c4 82       	std	Z+4, r12	; 0x04
    7194:	89 91       	ld	r24, Y+
    7196:	99 91       	ld	r25, Y+
    7198:	a9 91       	ld	r26, Y+
    719a:	b9 91       	ld	r27, Y+
    719c:	86 83       	std	Z+6, r24	; 0x06
    719e:	97 83       	std	Z+7, r25	; 0x07
    71a0:	a0 87       	std	Z+8, r26	; 0x08
    71a2:	b1 87       	std	Z+9, r27	; 0x09
    71a4:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("24, int32_t (%d), yaw_ppm_center: %d\r\n"), (uint8_t)sizeof(int32_t), x->yaw_ppm_center);
    71a8:	ed b7       	in	r30, 0x3d	; 61
    71aa:	fe b7       	in	r31, 0x3e	; 62
    71ac:	31 96       	adiw	r30, 0x01	; 1
    71ae:	ad b7       	in	r26, 0x3d	; 61
    71b0:	be b7       	in	r27, 0x3e	; 62
    71b2:	12 96       	adiw	r26, 0x02	; 2
    71b4:	fc 92       	st	X, r15
    71b6:	ee 92       	st	-X, r14
    71b8:	11 97       	sbiw	r26, 0x01	; 1
    71ba:	80 e8       	ldi	r24, 0x80	; 128
    71bc:	9b e0       	ldi	r25, 0x0B	; 11
    71be:	93 83       	std	Z+3, r25	; 0x03
    71c0:	82 83       	std	Z+2, r24	; 0x02
    71c2:	d5 82       	std	Z+5, r13	; 0x05
    71c4:	c4 82       	std	Z+4, r12	; 0x04
    71c6:	89 91       	ld	r24, Y+
    71c8:	99 91       	ld	r25, Y+
    71ca:	a9 91       	ld	r26, Y+
    71cc:	b9 91       	ld	r27, Y+
    71ce:	86 83       	std	Z+6, r24	; 0x06
    71d0:	97 83       	std	Z+7, r25	; 0x07
    71d2:	a0 87       	std	Z+8, r26	; 0x08
    71d4:	b1 87       	std	Z+9, r27	; 0x09
    71d6:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("25, int32_t (%d), throttle_ppm_center: %d\r\n"), (uint8_t)sizeof(int32_t), x->throttle_ppm_center);
    71da:	ed b7       	in	r30, 0x3d	; 61
    71dc:	fe b7       	in	r31, 0x3e	; 62
    71de:	31 96       	adiw	r30, 0x01	; 1
    71e0:	ad b7       	in	r26, 0x3d	; 61
    71e2:	be b7       	in	r27, 0x3e	; 62
    71e4:	12 96       	adiw	r26, 0x02	; 2
    71e6:	fc 92       	st	X, r15
    71e8:	ee 92       	st	-X, r14
    71ea:	11 97       	sbiw	r26, 0x01	; 1
    71ec:	84 e5       	ldi	r24, 0x54	; 84
    71ee:	9b e0       	ldi	r25, 0x0B	; 11
    71f0:	93 83       	std	Z+3, r25	; 0x03
    71f2:	82 83       	std	Z+2, r24	; 0x02
    71f4:	d5 82       	std	Z+5, r13	; 0x05
    71f6:	c4 82       	std	Z+4, r12	; 0x04
    71f8:	89 91       	ld	r24, Y+
    71fa:	99 91       	ld	r25, Y+
    71fc:	a9 91       	ld	r26, Y+
    71fe:	b9 91       	ld	r27, Y+
    7200:	86 83       	std	Z+6, r24	; 0x06
    7202:	97 83       	std	Z+7, r25	; 0x07
    7204:	a0 87       	std	Z+8, r26	; 0x08
    7206:	b1 87       	std	Z+9, r27	; 0x09
    7208:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("26, int32_t (%d), roll_ppm_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_ppm_scale);
    720c:	ed b7       	in	r30, 0x3d	; 61
    720e:	fe b7       	in	r31, 0x3e	; 62
    7210:	31 96       	adiw	r30, 0x01	; 1
    7212:	ad b7       	in	r26, 0x3d	; 61
    7214:	be b7       	in	r27, 0x3e	; 62
    7216:	12 96       	adiw	r26, 0x02	; 2
    7218:	fc 92       	st	X, r15
    721a:	ee 92       	st	-X, r14
    721c:	11 97       	sbiw	r26, 0x01	; 1
    721e:	8d e2       	ldi	r24, 0x2D	; 45
    7220:	9b e0       	ldi	r25, 0x0B	; 11
    7222:	93 83       	std	Z+3, r25	; 0x03
    7224:	82 83       	std	Z+2, r24	; 0x02
    7226:	d5 82       	std	Z+5, r13	; 0x05
    7228:	c4 82       	std	Z+4, r12	; 0x04
    722a:	89 91       	ld	r24, Y+
    722c:	99 91       	ld	r25, Y+
    722e:	a9 91       	ld	r26, Y+
    7230:	b9 91       	ld	r27, Y+
    7232:	86 83       	std	Z+6, r24	; 0x06
    7234:	97 83       	std	Z+7, r25	; 0x07
    7236:	a0 87       	std	Z+8, r26	; 0x08
    7238:	b1 87       	std	Z+9, r27	; 0x09
    723a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("27, int32_t (%d), pitch_ppm_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_ppm_scale);
    723e:	ed b7       	in	r30, 0x3d	; 61
    7240:	fe b7       	in	r31, 0x3e	; 62
    7242:	31 96       	adiw	r30, 0x01	; 1
    7244:	ad b7       	in	r26, 0x3d	; 61
    7246:	be b7       	in	r27, 0x3e	; 62
    7248:	12 96       	adiw	r26, 0x02	; 2
    724a:	fc 92       	st	X, r15
    724c:	ee 92       	st	-X, r14
    724e:	11 97       	sbiw	r26, 0x01	; 1
    7250:	85 e0       	ldi	r24, 0x05	; 5
    7252:	9b e0       	ldi	r25, 0x0B	; 11
    7254:	93 83       	std	Z+3, r25	; 0x03
    7256:	82 83       	std	Z+2, r24	; 0x02
    7258:	d5 82       	std	Z+5, r13	; 0x05
    725a:	c4 82       	std	Z+4, r12	; 0x04
    725c:	89 91       	ld	r24, Y+
    725e:	99 91       	ld	r25, Y+
    7260:	a9 91       	ld	r26, Y+
    7262:	b9 91       	ld	r27, Y+
    7264:	86 83       	std	Z+6, r24	; 0x06
    7266:	97 83       	std	Z+7, r25	; 0x07
    7268:	a0 87       	std	Z+8, r26	; 0x08
    726a:	b1 87       	std	Z+9, r27	; 0x09
    726c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("28, int32_t (%d), yaw_ppm_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->yaw_ppm_scale);
    7270:	ed b7       	in	r30, 0x3d	; 61
    7272:	fe b7       	in	r31, 0x3e	; 62
    7274:	31 96       	adiw	r30, 0x01	; 1
    7276:	ad b7       	in	r26, 0x3d	; 61
    7278:	be b7       	in	r27, 0x3e	; 62
    727a:	12 96       	adiw	r26, 0x02	; 2
    727c:	fc 92       	st	X, r15
    727e:	ee 92       	st	-X, r14
    7280:	11 97       	sbiw	r26, 0x01	; 1
    7282:	8f ed       	ldi	r24, 0xDF	; 223
    7284:	9a e0       	ldi	r25, 0x0A	; 10
    7286:	93 83       	std	Z+3, r25	; 0x03
    7288:	82 83       	std	Z+2, r24	; 0x02
    728a:	d5 82       	std	Z+5, r13	; 0x05
    728c:	c4 82       	std	Z+4, r12	; 0x04
    728e:	89 91       	ld	r24, Y+
    7290:	99 91       	ld	r25, Y+
    7292:	a9 91       	ld	r26, Y+
    7294:	b9 91       	ld	r27, Y+
    7296:	86 83       	std	Z+6, r24	; 0x06
    7298:	97 83       	std	Z+7, r25	; 0x07
    729a:	a0 87       	std	Z+8, r26	; 0x08
    729c:	b1 87       	std	Z+9, r27	; 0x09
    729e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("29, int32_t (%d), throttle_ppm_scale: %d\r\n"), (uint8_t)sizeof(int32_t), x->throttle_ppm_scale);
    72a2:	ed b7       	in	r30, 0x3d	; 61
    72a4:	fe b7       	in	r31, 0x3e	; 62
    72a6:	31 96       	adiw	r30, 0x01	; 1
    72a8:	ad b7       	in	r26, 0x3d	; 61
    72aa:	be b7       	in	r27, 0x3e	; 62
    72ac:	12 96       	adiw	r26, 0x02	; 2
    72ae:	fc 92       	st	X, r15
    72b0:	ee 92       	st	-X, r14
    72b2:	11 97       	sbiw	r26, 0x01	; 1
    72b4:	84 eb       	ldi	r24, 0xB4	; 180
    72b6:	9a e0       	ldi	r25, 0x0A	; 10
    72b8:	93 83       	std	Z+3, r25	; 0x03
    72ba:	82 83       	std	Z+2, r24	; 0x02
    72bc:	d5 82       	std	Z+5, r13	; 0x05
    72be:	c4 82       	std	Z+4, r12	; 0x04
    72c0:	89 91       	ld	r24, Y+
    72c2:	99 91       	ld	r25, Y+
    72c4:	a9 91       	ld	r26, Y+
    72c6:	b9 91       	ld	r27, Y+
    72c8:	86 83       	std	Z+6, r24	; 0x06
    72ca:	97 83       	std	Z+7, r25	; 0x07
    72cc:	a0 87       	std	Z+8, r26	; 0x08
    72ce:	b1 87       	std	Z+9, r27	; 0x09
    72d0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("30, int32_t (%d), throttle_hover: %d\r\n"), (uint8_t)sizeof(int32_t), x->throttle_hover);
    72d4:	ed b7       	in	r30, 0x3d	; 61
    72d6:	fe b7       	in	r31, 0x3e	; 62
    72d8:	31 96       	adiw	r30, 0x01	; 1
    72da:	ad b7       	in	r26, 0x3d	; 61
    72dc:	be b7       	in	r27, 0x3e	; 62
    72de:	12 96       	adiw	r26, 0x02	; 2
    72e0:	fc 92       	st	X, r15
    72e2:	ee 92       	st	-X, r14
    72e4:	11 97       	sbiw	r26, 0x01	; 1
    72e6:	8d e8       	ldi	r24, 0x8D	; 141
    72e8:	9a e0       	ldi	r25, 0x0A	; 10
    72ea:	93 83       	std	Z+3, r25	; 0x03
    72ec:	82 83       	std	Z+2, r24	; 0x02
    72ee:	d5 82       	std	Z+5, r13	; 0x05
    72f0:	c4 82       	std	Z+4, r12	; 0x04
    72f2:	89 91       	ld	r24, Y+
    72f4:	99 91       	ld	r25, Y+
    72f6:	a9 91       	ld	r26, Y+
    72f8:	b9 91       	ld	r27, Y+
    72fa:	86 83       	std	Z+6, r24	; 0x06
    72fc:	97 83       	std	Z+7, r25	; 0x07
    72fe:	a0 87       	std	Z+8, r26	; 0x08
    7300:	b1 87       	std	Z+9, r27	; 0x09
    7302:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("31, int32_t (%d), roll_level_kp: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_level_kp);
    7306:	ed b7       	in	r30, 0x3d	; 61
    7308:	fe b7       	in	r31, 0x3e	; 62
    730a:	31 96       	adiw	r30, 0x01	; 1
    730c:	ad b7       	in	r26, 0x3d	; 61
    730e:	be b7       	in	r27, 0x3e	; 62
    7310:	12 96       	adiw	r26, 0x02	; 2
    7312:	fc 92       	st	X, r15
    7314:	ee 92       	st	-X, r14
    7316:	11 97       	sbiw	r26, 0x01	; 1
    7318:	87 e6       	ldi	r24, 0x67	; 103
    731a:	9a e0       	ldi	r25, 0x0A	; 10
    731c:	93 83       	std	Z+3, r25	; 0x03
    731e:	82 83       	std	Z+2, r24	; 0x02
    7320:	d5 82       	std	Z+5, r13	; 0x05
    7322:	c4 82       	std	Z+4, r12	; 0x04
    7324:	89 91       	ld	r24, Y+
    7326:	99 91       	ld	r25, Y+
    7328:	a9 91       	ld	r26, Y+
    732a:	b9 91       	ld	r27, Y+
    732c:	86 83       	std	Z+6, r24	; 0x06
    732e:	97 83       	std	Z+7, r25	; 0x07
    7330:	a0 87       	std	Z+8, r26	; 0x08
    7332:	b1 87       	std	Z+9, r27	; 0x09
    7334:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("32, int32_t (%d), roll_level_ki: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_level_ki);
    7338:	ed b7       	in	r30, 0x3d	; 61
    733a:	fe b7       	in	r31, 0x3e	; 62
    733c:	31 96       	adiw	r30, 0x01	; 1
    733e:	ad b7       	in	r26, 0x3d	; 61
    7340:	be b7       	in	r27, 0x3e	; 62
    7342:	12 96       	adiw	r26, 0x02	; 2
    7344:	fc 92       	st	X, r15
    7346:	ee 92       	st	-X, r14
    7348:	11 97       	sbiw	r26, 0x01	; 1
    734a:	81 e4       	ldi	r24, 0x41	; 65
    734c:	9a e0       	ldi	r25, 0x0A	; 10
    734e:	93 83       	std	Z+3, r25	; 0x03
    7350:	82 83       	std	Z+2, r24	; 0x02
    7352:	d5 82       	std	Z+5, r13	; 0x05
    7354:	c4 82       	std	Z+4, r12	; 0x04
    7356:	89 91       	ld	r24, Y+
    7358:	99 91       	ld	r25, Y+
    735a:	a9 91       	ld	r26, Y+
    735c:	b9 91       	ld	r27, Y+
    735e:	86 83       	std	Z+6, r24	; 0x06
    7360:	97 83       	std	Z+7, r25	; 0x07
    7362:	a0 87       	std	Z+8, r26	; 0x08
    7364:	b1 87       	std	Z+9, r27	; 0x09
    7366:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("33, int32_t (%d), roll_level_kd: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_level_kd);
    736a:	ed b7       	in	r30, 0x3d	; 61
    736c:	fe b7       	in	r31, 0x3e	; 62
    736e:	31 96       	adiw	r30, 0x01	; 1
    7370:	ad b7       	in	r26, 0x3d	; 61
    7372:	be b7       	in	r27, 0x3e	; 62
    7374:	12 96       	adiw	r26, 0x02	; 2
    7376:	fc 92       	st	X, r15
    7378:	ee 92       	st	-X, r14
    737a:	11 97       	sbiw	r26, 0x01	; 1
    737c:	8b e1       	ldi	r24, 0x1B	; 27
    737e:	9a e0       	ldi	r25, 0x0A	; 10
    7380:	93 83       	std	Z+3, r25	; 0x03
    7382:	82 83       	std	Z+2, r24	; 0x02
    7384:	d5 82       	std	Z+5, r13	; 0x05
    7386:	c4 82       	std	Z+4, r12	; 0x04
    7388:	89 91       	ld	r24, Y+
    738a:	99 91       	ld	r25, Y+
    738c:	a9 91       	ld	r26, Y+
    738e:	b9 91       	ld	r27, Y+
    7390:	86 83       	std	Z+6, r24	; 0x06
    7392:	97 83       	std	Z+7, r25	; 0x07
    7394:	a0 87       	std	Z+8, r26	; 0x08
    7396:	b1 87       	std	Z+9, r27	; 0x09
    7398:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("34, int32_t (%d), pitch_level_kp: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_level_kp);
    739c:	ed b7       	in	r30, 0x3d	; 61
    739e:	fe b7       	in	r31, 0x3e	; 62
    73a0:	31 96       	adiw	r30, 0x01	; 1
    73a2:	ad b7       	in	r26, 0x3d	; 61
    73a4:	be b7       	in	r27, 0x3e	; 62
    73a6:	12 96       	adiw	r26, 0x02	; 2
    73a8:	fc 92       	st	X, r15
    73aa:	ee 92       	st	-X, r14
    73ac:	11 97       	sbiw	r26, 0x01	; 1
    73ae:	84 ef       	ldi	r24, 0xF4	; 244
    73b0:	99 e0       	ldi	r25, 0x09	; 9
    73b2:	93 83       	std	Z+3, r25	; 0x03
    73b4:	82 83       	std	Z+2, r24	; 0x02
    73b6:	d5 82       	std	Z+5, r13	; 0x05
    73b8:	c4 82       	std	Z+4, r12	; 0x04
    73ba:	89 91       	ld	r24, Y+
    73bc:	99 91       	ld	r25, Y+
    73be:	a9 91       	ld	r26, Y+
    73c0:	b9 91       	ld	r27, Y+
    73c2:	86 83       	std	Z+6, r24	; 0x06
    73c4:	97 83       	std	Z+7, r25	; 0x07
    73c6:	a0 87       	std	Z+8, r26	; 0x08
    73c8:	b1 87       	std	Z+9, r27	; 0x09
    73ca:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("35, int32_t (%d), pitch_level_ki: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_level_ki);
    73ce:	ed b7       	in	r30, 0x3d	; 61
    73d0:	fe b7       	in	r31, 0x3e	; 62
    73d2:	31 96       	adiw	r30, 0x01	; 1
    73d4:	ad b7       	in	r26, 0x3d	; 61
    73d6:	be b7       	in	r27, 0x3e	; 62
    73d8:	12 96       	adiw	r26, 0x02	; 2
    73da:	fc 92       	st	X, r15
    73dc:	ee 92       	st	-X, r14
    73de:	11 97       	sbiw	r26, 0x01	; 1
    73e0:	8d ec       	ldi	r24, 0xCD	; 205
    73e2:	99 e0       	ldi	r25, 0x09	; 9
    73e4:	93 83       	std	Z+3, r25	; 0x03
    73e6:	82 83       	std	Z+2, r24	; 0x02
    73e8:	d5 82       	std	Z+5, r13	; 0x05
    73ea:	c4 82       	std	Z+4, r12	; 0x04
    73ec:	89 91       	ld	r24, Y+
    73ee:	99 91       	ld	r25, Y+
    73f0:	a9 91       	ld	r26, Y+
    73f2:	b9 91       	ld	r27, Y+
    73f4:	86 83       	std	Z+6, r24	; 0x06
    73f6:	97 83       	std	Z+7, r25	; 0x07
    73f8:	a0 87       	std	Z+8, r26	; 0x08
    73fa:	b1 87       	std	Z+9, r27	; 0x09
    73fc:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("36, int32_t (%d), pitch_level_kd: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_level_kd);
    7400:	ed b7       	in	r30, 0x3d	; 61
    7402:	fe b7       	in	r31, 0x3e	; 62
    7404:	31 96       	adiw	r30, 0x01	; 1
    7406:	ad b7       	in	r26, 0x3d	; 61
    7408:	be b7       	in	r27, 0x3e	; 62
    740a:	12 96       	adiw	r26, 0x02	; 2
    740c:	fc 92       	st	X, r15
    740e:	ee 92       	st	-X, r14
    7410:	11 97       	sbiw	r26, 0x01	; 1
    7412:	86 ea       	ldi	r24, 0xA6	; 166
    7414:	99 e0       	ldi	r25, 0x09	; 9
    7416:	93 83       	std	Z+3, r25	; 0x03
    7418:	82 83       	std	Z+2, r24	; 0x02
    741a:	d5 82       	std	Z+5, r13	; 0x05
    741c:	c4 82       	std	Z+4, r12	; 0x04
    741e:	89 91       	ld	r24, Y+
    7420:	99 91       	ld	r25, Y+
    7422:	a9 91       	ld	r26, Y+
    7424:	b9 91       	ld	r27, Y+
    7426:	86 83       	std	Z+6, r24	; 0x06
    7428:	97 83       	std	Z+7, r25	; 0x07
    742a:	a0 87       	std	Z+8, r26	; 0x08
    742c:	b1 87       	std	Z+9, r27	; 0x09
    742e:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("37, int32_t (%d), roll_rate_kp: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_rate_kp);
    7432:	ed b7       	in	r30, 0x3d	; 61
    7434:	fe b7       	in	r31, 0x3e	; 62
    7436:	31 96       	adiw	r30, 0x01	; 1
    7438:	ad b7       	in	r26, 0x3d	; 61
    743a:	be b7       	in	r27, 0x3e	; 62
    743c:	12 96       	adiw	r26, 0x02	; 2
    743e:	fc 92       	st	X, r15
    7440:	ee 92       	st	-X, r14
    7442:	11 97       	sbiw	r26, 0x01	; 1
    7444:	81 e8       	ldi	r24, 0x81	; 129
    7446:	99 e0       	ldi	r25, 0x09	; 9
    7448:	93 83       	std	Z+3, r25	; 0x03
    744a:	82 83       	std	Z+2, r24	; 0x02
    744c:	d5 82       	std	Z+5, r13	; 0x05
    744e:	c4 82       	std	Z+4, r12	; 0x04
    7450:	89 91       	ld	r24, Y+
    7452:	99 91       	ld	r25, Y+
    7454:	a9 91       	ld	r26, Y+
    7456:	b9 91       	ld	r27, Y+
    7458:	86 83       	std	Z+6, r24	; 0x06
    745a:	97 83       	std	Z+7, r25	; 0x07
    745c:	a0 87       	std	Z+8, r26	; 0x08
    745e:	b1 87       	std	Z+9, r27	; 0x09
    7460:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("38, int32_t (%d), roll_rate_ki: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_rate_ki);
    7464:	ed b7       	in	r30, 0x3d	; 61
    7466:	fe b7       	in	r31, 0x3e	; 62
    7468:	31 96       	adiw	r30, 0x01	; 1
    746a:	ad b7       	in	r26, 0x3d	; 61
    746c:	be b7       	in	r27, 0x3e	; 62
    746e:	12 96       	adiw	r26, 0x02	; 2
    7470:	fc 92       	st	X, r15
    7472:	ee 92       	st	-X, r14
    7474:	11 97       	sbiw	r26, 0x01	; 1
    7476:	8c e5       	ldi	r24, 0x5C	; 92
    7478:	99 e0       	ldi	r25, 0x09	; 9
    747a:	93 83       	std	Z+3, r25	; 0x03
    747c:	82 83       	std	Z+2, r24	; 0x02
    747e:	d5 82       	std	Z+5, r13	; 0x05
    7480:	c4 82       	std	Z+4, r12	; 0x04
    7482:	89 91       	ld	r24, Y+
    7484:	99 91       	ld	r25, Y+
    7486:	a9 91       	ld	r26, Y+
    7488:	b9 91       	ld	r27, Y+
    748a:	86 83       	std	Z+6, r24	; 0x06
    748c:	97 83       	std	Z+7, r25	; 0x07
    748e:	a0 87       	std	Z+8, r26	; 0x08
    7490:	b1 87       	std	Z+9, r27	; 0x09
    7492:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("39, int32_t (%d), roll_rate_kd: %d\r\n"), (uint8_t)sizeof(int32_t), x->roll_rate_kd);
    7496:	ed b7       	in	r30, 0x3d	; 61
    7498:	fe b7       	in	r31, 0x3e	; 62
    749a:	31 96       	adiw	r30, 0x01	; 1
    749c:	ad b7       	in	r26, 0x3d	; 61
    749e:	be b7       	in	r27, 0x3e	; 62
    74a0:	12 96       	adiw	r26, 0x02	; 2
    74a2:	fc 92       	st	X, r15
    74a4:	ee 92       	st	-X, r14
    74a6:	11 97       	sbiw	r26, 0x01	; 1
    74a8:	87 e3       	ldi	r24, 0x37	; 55
    74aa:	99 e0       	ldi	r25, 0x09	; 9
    74ac:	93 83       	std	Z+3, r25	; 0x03
    74ae:	82 83       	std	Z+2, r24	; 0x02
    74b0:	d5 82       	std	Z+5, r13	; 0x05
    74b2:	c4 82       	std	Z+4, r12	; 0x04
    74b4:	89 91       	ld	r24, Y+
    74b6:	99 91       	ld	r25, Y+
    74b8:	a9 91       	ld	r26, Y+
    74ba:	b9 91       	ld	r27, Y+
    74bc:	86 83       	std	Z+6, r24	; 0x06
    74be:	97 83       	std	Z+7, r25	; 0x07
    74c0:	a0 87       	std	Z+8, r26	; 0x08
    74c2:	b1 87       	std	Z+9, r27	; 0x09
    74c4:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("40, int32_t (%d), pitch_rate_kp: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_rate_kp);
    74c8:	ed b7       	in	r30, 0x3d	; 61
    74ca:	fe b7       	in	r31, 0x3e	; 62
    74cc:	31 96       	adiw	r30, 0x01	; 1
    74ce:	ad b7       	in	r26, 0x3d	; 61
    74d0:	be b7       	in	r27, 0x3e	; 62
    74d2:	12 96       	adiw	r26, 0x02	; 2
    74d4:	fc 92       	st	X, r15
    74d6:	ee 92       	st	-X, r14
    74d8:	11 97       	sbiw	r26, 0x01	; 1
    74da:	81 e1       	ldi	r24, 0x11	; 17
    74dc:	99 e0       	ldi	r25, 0x09	; 9
    74de:	93 83       	std	Z+3, r25	; 0x03
    74e0:	82 83       	std	Z+2, r24	; 0x02
    74e2:	d5 82       	std	Z+5, r13	; 0x05
    74e4:	c4 82       	std	Z+4, r12	; 0x04
    74e6:	89 91       	ld	r24, Y+
    74e8:	99 91       	ld	r25, Y+
    74ea:	a9 91       	ld	r26, Y+
    74ec:	b9 91       	ld	r27, Y+
    74ee:	86 83       	std	Z+6, r24	; 0x06
    74f0:	97 83       	std	Z+7, r25	; 0x07
    74f2:	a0 87       	std	Z+8, r26	; 0x08
    74f4:	b1 87       	std	Z+9, r27	; 0x09
    74f6:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("41, int32_t (%d), pitch_rate_ki: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_rate_ki);
    74fa:	ed b7       	in	r30, 0x3d	; 61
    74fc:	fe b7       	in	r31, 0x3e	; 62
    74fe:	31 96       	adiw	r30, 0x01	; 1
    7500:	ad b7       	in	r26, 0x3d	; 61
    7502:	be b7       	in	r27, 0x3e	; 62
    7504:	12 96       	adiw	r26, 0x02	; 2
    7506:	fc 92       	st	X, r15
    7508:	ee 92       	st	-X, r14
    750a:	11 97       	sbiw	r26, 0x01	; 1
    750c:	8b ee       	ldi	r24, 0xEB	; 235
    750e:	98 e0       	ldi	r25, 0x08	; 8
    7510:	93 83       	std	Z+3, r25	; 0x03
    7512:	82 83       	std	Z+2, r24	; 0x02
    7514:	d5 82       	std	Z+5, r13	; 0x05
    7516:	c4 82       	std	Z+4, r12	; 0x04
    7518:	89 91       	ld	r24, Y+
    751a:	99 91       	ld	r25, Y+
    751c:	a9 91       	ld	r26, Y+
    751e:	b9 91       	ld	r27, Y+
    7520:	86 83       	std	Z+6, r24	; 0x06
    7522:	97 83       	std	Z+7, r25	; 0x07
    7524:	a0 87       	std	Z+8, r26	; 0x08
    7526:	b1 87       	std	Z+9, r27	; 0x09
    7528:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("42, int32_t (%d), pitch_rate_kd: %d\r\n"), (uint8_t)sizeof(int32_t), x->pitch_rate_kd);
    752c:	ed b7       	in	r30, 0x3d	; 61
    752e:	fe b7       	in	r31, 0x3e	; 62
    7530:	31 96       	adiw	r30, 0x01	; 1
    7532:	ad b7       	in	r26, 0x3d	; 61
    7534:	be b7       	in	r27, 0x3e	; 62
    7536:	12 96       	adiw	r26, 0x02	; 2
    7538:	fc 92       	st	X, r15
    753a:	ee 92       	st	-X, r14
    753c:	11 97       	sbiw	r26, 0x01	; 1
    753e:	85 ec       	ldi	r24, 0xC5	; 197
    7540:	98 e0       	ldi	r25, 0x08	; 8
    7542:	93 83       	std	Z+3, r25	; 0x03
    7544:	82 83       	std	Z+2, r24	; 0x02
    7546:	d5 82       	std	Z+5, r13	; 0x05
    7548:	c4 82       	std	Z+4, r12	; 0x04
    754a:	89 91       	ld	r24, Y+
    754c:	99 91       	ld	r25, Y+
    754e:	a9 91       	ld	r26, Y+
    7550:	b9 91       	ld	r27, Y+
    7552:	86 83       	std	Z+6, r24	; 0x06
    7554:	97 83       	std	Z+7, r25	; 0x07
    7556:	a0 87       	std	Z+8, r26	; 0x08
    7558:	b1 87       	std	Z+9, r27	; 0x09
    755a:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("43, int32_t (%d), yaw_kp: %d\r\n"), (uint8_t)sizeof(int32_t), x->yaw_kp);
    755e:	ed b7       	in	r30, 0x3d	; 61
    7560:	fe b7       	in	r31, 0x3e	; 62
    7562:	31 96       	adiw	r30, 0x01	; 1
    7564:	ad b7       	in	r26, 0x3d	; 61
    7566:	be b7       	in	r27, 0x3e	; 62
    7568:	12 96       	adiw	r26, 0x02	; 2
    756a:	fc 92       	st	X, r15
    756c:	ee 92       	st	-X, r14
    756e:	11 97       	sbiw	r26, 0x01	; 1
    7570:	86 ea       	ldi	r24, 0xA6	; 166
    7572:	98 e0       	ldi	r25, 0x08	; 8
    7574:	93 83       	std	Z+3, r25	; 0x03
    7576:	82 83       	std	Z+2, r24	; 0x02
    7578:	d5 82       	std	Z+5, r13	; 0x05
    757a:	c4 82       	std	Z+4, r12	; 0x04
    757c:	89 91       	ld	r24, Y+
    757e:	99 91       	ld	r25, Y+
    7580:	a9 91       	ld	r26, Y+
    7582:	b9 91       	ld	r27, Y+
    7584:	86 83       	std	Z+6, r24	; 0x06
    7586:	97 83       	std	Z+7, r25	; 0x07
    7588:	a0 87       	std	Z+8, r26	; 0x08
    758a:	b1 87       	std	Z+9, r27	; 0x09
    758c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("44, int32_t (%d), yaw_ki: %d\r\n"), (uint8_t)sizeof(int32_t), x->yaw_ki);
    7590:	ed b7       	in	r30, 0x3d	; 61
    7592:	fe b7       	in	r31, 0x3e	; 62
    7594:	31 96       	adiw	r30, 0x01	; 1
    7596:	ad b7       	in	r26, 0x3d	; 61
    7598:	be b7       	in	r27, 0x3e	; 62
    759a:	12 96       	adiw	r26, 0x02	; 2
    759c:	fc 92       	st	X, r15
    759e:	ee 92       	st	-X, r14
    75a0:	11 97       	sbiw	r26, 0x01	; 1
    75a2:	87 e8       	ldi	r24, 0x87	; 135
    75a4:	98 e0       	ldi	r25, 0x08	; 8
    75a6:	93 83       	std	Z+3, r25	; 0x03
    75a8:	82 83       	std	Z+2, r24	; 0x02
    75aa:	d5 82       	std	Z+5, r13	; 0x05
    75ac:	c4 82       	std	Z+4, r12	; 0x04
    75ae:	89 91       	ld	r24, Y+
    75b0:	99 91       	ld	r25, Y+
    75b2:	a9 91       	ld	r26, Y+
    75b4:	b9 91       	ld	r27, Y+
    75b6:	86 83       	std	Z+6, r24	; 0x06
    75b8:	97 83       	std	Z+7, r25	; 0x07
    75ba:	a0 87       	std	Z+8, r26	; 0x08
    75bc:	b1 87       	std	Z+9, r27	; 0x09
    75be:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("45, int32_t (%d), yaw_kd: %d\r\n"), (uint8_t)sizeof(int32_t), x->yaw_kd);
    75c2:	ed b7       	in	r30, 0x3d	; 61
    75c4:	fe b7       	in	r31, 0x3e	; 62
    75c6:	31 96       	adiw	r30, 0x01	; 1
    75c8:	ad b7       	in	r26, 0x3d	; 61
    75ca:	be b7       	in	r27, 0x3e	; 62
    75cc:	12 96       	adiw	r26, 0x02	; 2
    75ce:	fc 92       	st	X, r15
    75d0:	ee 92       	st	-X, r14
    75d2:	11 97       	sbiw	r26, 0x01	; 1
    75d4:	88 e6       	ldi	r24, 0x68	; 104
    75d6:	98 e0       	ldi	r25, 0x08	; 8
    75d8:	93 83       	std	Z+3, r25	; 0x03
    75da:	82 83       	std	Z+2, r24	; 0x02
    75dc:	d5 82       	std	Z+5, r13	; 0x05
    75de:	c4 82       	std	Z+4, r12	; 0x04
    75e0:	89 91       	ld	r24, Y+
    75e2:	99 91       	ld	r25, Y+
    75e4:	a9 91       	ld	r26, Y+
    75e6:	b9 91       	ld	r27, Y+
    75e8:	86 83       	std	Z+6, r24	; 0x06
    75ea:	97 83       	std	Z+7, r25	; 0x07
    75ec:	a0 87       	std	Z+8, r26	; 0x08
    75ee:	b1 87       	std	Z+9, r27	; 0x09
    75f0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("46, uint8_t (%d), yaw_ppm_chan: %d\r\n"), (uint8_t)sizeof(uint8_t), x->yaw_ppm_chan);
    75f4:	0f 90       	pop	r0
    75f6:	0f 90       	pop	r0
    75f8:	ed b7       	in	r30, 0x3d	; 61
    75fa:	fe b7       	in	r31, 0x3e	; 62
    75fc:	31 96       	adiw	r30, 0x01	; 1
    75fe:	ad b7       	in	r26, 0x3d	; 61
    7600:	be b7       	in	r27, 0x3e	; 62
    7602:	12 96       	adiw	r26, 0x02	; 2
    7604:	fc 92       	st	X, r15
    7606:	ee 92       	st	-X, r14
    7608:	11 97       	sbiw	r26, 0x01	; 1
    760a:	83 e4       	ldi	r24, 0x43	; 67
    760c:	98 e0       	ldi	r25, 0x08	; 8
    760e:	93 83       	std	Z+3, r25	; 0x03
    7610:	82 83       	std	Z+2, r24	; 0x02
    7612:	b5 82       	std	Z+5, r11	; 0x05
    7614:	a4 82       	std	Z+4, r10	; 0x04
    7616:	89 91       	ld	r24, Y+
    7618:	86 83       	std	Z+6, r24	; 0x06
    761a:	17 82       	std	Z+7, r1	; 0x07
    761c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("47, uint8_t (%d), throttle_ppm_chan: %d\r\n"), (uint8_t)sizeof(uint8_t), x->throttle_ppm_chan);
    7620:	ed b7       	in	r30, 0x3d	; 61
    7622:	fe b7       	in	r31, 0x3e	; 62
    7624:	31 96       	adiw	r30, 0x01	; 1
    7626:	ad b7       	in	r26, 0x3d	; 61
    7628:	be b7       	in	r27, 0x3e	; 62
    762a:	12 96       	adiw	r26, 0x02	; 2
    762c:	fc 92       	st	X, r15
    762e:	ee 92       	st	-X, r14
    7630:	11 97       	sbiw	r26, 0x01	; 1
    7632:	89 e1       	ldi	r24, 0x19	; 25
    7634:	98 e0       	ldi	r25, 0x08	; 8
    7636:	93 83       	std	Z+3, r25	; 0x03
    7638:	82 83       	std	Z+2, r24	; 0x02
    763a:	b5 82       	std	Z+5, r11	; 0x05
    763c:	a4 82       	std	Z+4, r10	; 0x04
    763e:	89 91       	ld	r24, Y+
    7640:	86 83       	std	Z+6, r24	; 0x06
    7642:	17 82       	std	Z+7, r1	; 0x07
    7644:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("48, uint8_t (%d), pitch_ppm_chan: %d\r\n"), (uint8_t)sizeof(uint8_t), x->pitch_ppm_chan);
    7648:	ed b7       	in	r30, 0x3d	; 61
    764a:	fe b7       	in	r31, 0x3e	; 62
    764c:	31 96       	adiw	r30, 0x01	; 1
    764e:	ad b7       	in	r26, 0x3d	; 61
    7650:	be b7       	in	r27, 0x3e	; 62
    7652:	12 96       	adiw	r26, 0x02	; 2
    7654:	fc 92       	st	X, r15
    7656:	ee 92       	st	-X, r14
    7658:	11 97       	sbiw	r26, 0x01	; 1
    765a:	82 ef       	ldi	r24, 0xF2	; 242
    765c:	97 e0       	ldi	r25, 0x07	; 7
    765e:	93 83       	std	Z+3, r25	; 0x03
    7660:	82 83       	std	Z+2, r24	; 0x02
    7662:	b5 82       	std	Z+5, r11	; 0x05
    7664:	a4 82       	std	Z+4, r10	; 0x04
    7666:	89 91       	ld	r24, Y+
    7668:	86 83       	std	Z+6, r24	; 0x06
    766a:	17 82       	std	Z+7, r1	; 0x07
    766c:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("49, uint8_t (%d), roll_ppm_chan: %d\r\n"), (uint8_t)sizeof(uint8_t), x->roll_ppm_chan);
    7670:	ed b7       	in	r30, 0x3d	; 61
    7672:	fe b7       	in	r31, 0x3e	; 62
    7674:	31 96       	adiw	r30, 0x01	; 1
    7676:	ad b7       	in	r26, 0x3d	; 61
    7678:	be b7       	in	r27, 0x3e	; 62
    767a:	12 96       	adiw	r26, 0x02	; 2
    767c:	fc 92       	st	X, r15
    767e:	ee 92       	st	-X, r14
    7680:	11 97       	sbiw	r26, 0x01	; 1
    7682:	8c ec       	ldi	r24, 0xCC	; 204
    7684:	97 e0       	ldi	r25, 0x07	; 7
    7686:	93 83       	std	Z+3, r25	; 0x03
    7688:	82 83       	std	Z+2, r24	; 0x02
    768a:	b5 82       	std	Z+5, r11	; 0x05
    768c:	a4 82       	std	Z+4, r10	; 0x04
    768e:	89 91       	ld	r24, Y+
    7690:	86 83       	std	Z+6, r24	; 0x06
    7692:	17 82       	std	Z+7, r1	; 0x07
    7694:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("50, uint8_t (%d), unlock_ppm_chan: %d\r\n"), (uint8_t)sizeof(uint8_t), x->unlock_ppm_chan);
    7698:	ed b7       	in	r30, 0x3d	; 61
    769a:	fe b7       	in	r31, 0x3e	; 62
    769c:	31 96       	adiw	r30, 0x01	; 1
    769e:	ad b7       	in	r26, 0x3d	; 61
    76a0:	be b7       	in	r27, 0x3e	; 62
    76a2:	12 96       	adiw	r26, 0x02	; 2
    76a4:	fc 92       	st	X, r15
    76a6:	ee 92       	st	-X, r14
    76a8:	11 97       	sbiw	r26, 0x01	; 1
    76aa:	84 ea       	ldi	r24, 0xA4	; 164
    76ac:	97 e0       	ldi	r25, 0x07	; 7
    76ae:	93 83       	std	Z+3, r25	; 0x03
    76b0:	82 83       	std	Z+2, r24	; 0x02
    76b2:	b5 82       	std	Z+5, r11	; 0x05
    76b4:	a4 82       	std	Z+4, r10	; 0x04
    76b6:	89 91       	ld	r24, Y+
    76b8:	86 83       	std	Z+6, r24	; 0x06
    76ba:	17 82       	std	Z+7, r1	; 0x07
    76bc:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("51, int32_t (%d), delta_time_const: %d\r\n"), (uint8_t)sizeof(int32_t), x->delta_time_const);
    76c0:	00 d0       	rcall	.+0      	; 0x76c2 <debug_report_vars+0x9fa>
    76c2:	ed b7       	in	r30, 0x3d	; 61
    76c4:	fe b7       	in	r31, 0x3e	; 62
    76c6:	31 96       	adiw	r30, 0x01	; 1
    76c8:	ad b7       	in	r26, 0x3d	; 61
    76ca:	be b7       	in	r27, 0x3e	; 62
    76cc:	12 96       	adiw	r26, 0x02	; 2
    76ce:	fc 92       	st	X, r15
    76d0:	ee 92       	st	-X, r14
    76d2:	11 97       	sbiw	r26, 0x01	; 1
    76d4:	8b e7       	ldi	r24, 0x7B	; 123
    76d6:	97 e0       	ldi	r25, 0x07	; 7
    76d8:	93 83       	std	Z+3, r25	; 0x03
    76da:	82 83       	std	Z+2, r24	; 0x02
    76dc:	d5 82       	std	Z+5, r13	; 0x05
    76de:	c4 82       	std	Z+4, r12	; 0x04
    76e0:	89 91       	ld	r24, Y+
    76e2:	99 91       	ld	r25, Y+
    76e4:	a9 91       	ld	r26, Y+
    76e6:	b9 91       	ld	r27, Y+
    76e8:	86 83       	std	Z+6, r24	; 0x06
    76ea:	97 83       	std	Z+7, r25	; 0x07
    76ec:	a0 87       	std	Z+8, r26	; 0x08
    76ee:	b1 87       	std	Z+9, r27	; 0x09
    76f0:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("52, int32_t (%d), comp_filter_w: %d\r\n"), (uint8_t)sizeof(int32_t), x->comp_filter_w);
    76f4:	ed b7       	in	r30, 0x3d	; 61
    76f6:	fe b7       	in	r31, 0x3e	; 62
    76f8:	31 96       	adiw	r30, 0x01	; 1
    76fa:	ad b7       	in	r26, 0x3d	; 61
    76fc:	be b7       	in	r27, 0x3e	; 62
    76fe:	12 96       	adiw	r26, 0x02	; 2
    7700:	fc 92       	st	X, r15
    7702:	ee 92       	st	-X, r14
    7704:	11 97       	sbiw	r26, 0x01	; 1
    7706:	85 e5       	ldi	r24, 0x55	; 85
    7708:	97 e0       	ldi	r25, 0x07	; 7
    770a:	93 83       	std	Z+3, r25	; 0x03
    770c:	82 83       	std	Z+2, r24	; 0x02
    770e:	d5 82       	std	Z+5, r13	; 0x05
    7710:	c4 82       	std	Z+4, r12	; 0x04
    7712:	89 91       	ld	r24, Y+
    7714:	99 91       	ld	r25, Y+
    7716:	a9 91       	ld	r26, Y+
    7718:	b9 91       	ld	r27, Y+
    771a:	86 83       	std	Z+6, r24	; 0x06
    771c:	97 83       	std	Z+7, r25	; 0x07
    771e:	a0 87       	std	Z+8, r26	; 0x08
    7720:	b1 87       	std	Z+9, r27	; 0x09
    7722:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
	fprintf_P(&serstream, PSTR("53, uint32_t (%d), button_hold_down: %d\r\n"), (uint8_t)sizeof(uint32_t), x->button_hold_down);
    7726:	ed b7       	in	r30, 0x3d	; 61
    7728:	fe b7       	in	r31, 0x3e	; 62
    772a:	31 96       	adiw	r30, 0x01	; 1
    772c:	ad b7       	in	r26, 0x3d	; 61
    772e:	be b7       	in	r27, 0x3e	; 62
    7730:	12 96       	adiw	r26, 0x02	; 2
    7732:	fc 92       	st	X, r15
    7734:	ee 92       	st	-X, r14
    7736:	11 97       	sbiw	r26, 0x01	; 1
    7738:	8b e2       	ldi	r24, 0x2B	; 43
    773a:	97 e0       	ldi	r25, 0x07	; 7
    773c:	93 83       	std	Z+3, r25	; 0x03
    773e:	82 83       	std	Z+2, r24	; 0x02
    7740:	d5 82       	std	Z+5, r13	; 0x05
    7742:	c4 82       	std	Z+4, r12	; 0x04
    7744:	88 81       	ld	r24, Y
    7746:	99 81       	ldd	r25, Y+1	; 0x01
    7748:	aa 81       	ldd	r26, Y+2	; 0x02
    774a:	bb 81       	ldd	r27, Y+3	; 0x03
    774c:	86 83       	std	Z+6, r24	; 0x06
    774e:	97 83       	std	Z+7, r25	; 0x07
    7750:	a0 87       	std	Z+8, r26	; 0x08
    7752:	b1 87       	std	Z+9, r27	; 0x09
    7754:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fprintf_P>
    7758:	8d b7       	in	r24, 0x3d	; 61
    775a:	9e b7       	in	r25, 0x3e	; 62
    775c:	0a 96       	adiw	r24, 0x0a	; 10
    775e:	0f b6       	in	r0, 0x3f	; 63
    7760:	f8 94       	cli
    7762:	9e bf       	out	0x3e, r25	; 62
    7764:	0f be       	out	0x3f, r0	; 63
    7766:	8d bf       	out	0x3d, r24	; 61
}
    7768:	df 91       	pop	r29
    776a:	cf 91       	pop	r28
    776c:	1f 91       	pop	r17
    776e:	0f 91       	pop	r16
    7770:	ff 90       	pop	r15
    7772:	ef 90       	pop	r14
    7774:	df 90       	pop	r13
    7776:	cf 90       	pop	r12
    7778:	bf 90       	pop	r11
    777a:	af 90       	pop	r10
    777c:	08 95       	ret

0000777e <debug_check_msg>:
{
	ser1_init(129, 128, 128); // 9600 baud
}

volatile uint8_t debug_check_msg(Calibration * x)
{
    777e:	4f 92       	push	r4
    7780:	5f 92       	push	r5
    7782:	6f 92       	push	r6
    7784:	7f 92       	push	r7
    7786:	8f 92       	push	r8
    7788:	9f 92       	push	r9
    778a:	af 92       	push	r10
    778c:	bf 92       	push	r11
    778e:	df 92       	push	r13
    7790:	ef 92       	push	r14
    7792:	ff 92       	push	r15
    7794:	0f 93       	push	r16
    7796:	1f 93       	push	r17
    7798:	df 93       	push	r29
    779a:	cf 93       	push	r28
    779c:	00 d0       	rcall	.+0      	; 0x779e <debug_check_msg+0x20>
    779e:	cd b7       	in	r28, 0x3d	; 61
    77a0:	de b7       	in	r29, 0x3e	; 62
    77a2:	2c 01       	movw	r4, r24
	volatile uint8_t rc = 0;
    77a4:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t d = ser_rx(1, &rc);
    77a6:	81 e0       	ldi	r24, 0x01	; 1
    77a8:	4e 01       	movw	r8, r28
    77aa:	08 94       	sec
    77ac:	81 1c       	adc	r8, r1
    77ae:	91 1c       	adc	r9, r1
    77b0:	b4 01       	movw	r22, r8
    77b2:	0e 94 c8 30 	call	0x6190	; 0x6190 <ser_rx>
    77b6:	8a 83       	std	Y+2, r24	; 0x02
	
	if (d == 0 || (d != '@' && d != 's' && d != 'd' && d != 'l' && d != 'c' && d != 'r' && d != 'R')) // nothing received or not sync-ed
    77b8:	8a 81       	ldd	r24, Y+2	; 0x02
    77ba:	88 23       	and	r24, r24
    77bc:	a9 f0       	breq	.+42     	; 0x77e8 <debug_check_msg+0x6a>
    77be:	8a 81       	ldd	r24, Y+2	; 0x02
    77c0:	80 34       	cpi	r24, 0x40	; 64
    77c2:	29 f1       	breq	.+74     	; 0x780e <debug_check_msg+0x90>
    77c4:	8a 81       	ldd	r24, Y+2	; 0x02
    77c6:	83 37       	cpi	r24, 0x73	; 115
    77c8:	11 f1       	breq	.+68     	; 0x780e <debug_check_msg+0x90>
    77ca:	8a 81       	ldd	r24, Y+2	; 0x02
    77cc:	84 36       	cpi	r24, 0x64	; 100
    77ce:	f9 f0       	breq	.+62     	; 0x780e <debug_check_msg+0x90>
    77d0:	8a 81       	ldd	r24, Y+2	; 0x02
    77d2:	8c 36       	cpi	r24, 0x6C	; 108
    77d4:	e1 f0       	breq	.+56     	; 0x780e <debug_check_msg+0x90>
    77d6:	8a 81       	ldd	r24, Y+2	; 0x02
    77d8:	83 36       	cpi	r24, 0x63	; 99
    77da:	c9 f0       	breq	.+50     	; 0x780e <debug_check_msg+0x90>
    77dc:	8a 81       	ldd	r24, Y+2	; 0x02
    77de:	82 37       	cpi	r24, 0x72	; 114
    77e0:	b1 f0       	breq	.+44     	; 0x780e <debug_check_msg+0x90>
    77e2:	8a 81       	ldd	r24, Y+2	; 0x02
    77e4:	82 35       	cpi	r24, 0x52	; 82
    77e6:	99 f0       	breq	.+38     	; 0x780e <debug_check_msg+0x90>
				i = 0;
				stage = 2;
				break;
			}
		}
	}
    77e8:	80 e0       	ldi	r24, 0x00	; 0
	
	free(str);
	
	return 0;
}
    77ea:	0f 90       	pop	r0
    77ec:	0f 90       	pop	r0
    77ee:	cf 91       	pop	r28
    77f0:	df 91       	pop	r29
    77f2:	1f 91       	pop	r17
    77f4:	0f 91       	pop	r16
    77f6:	ff 90       	pop	r15
    77f8:	ef 90       	pop	r14
    77fa:	df 90       	pop	r13
    77fc:	bf 90       	pop	r11
    77fe:	af 90       	pop	r10
    7800:	9f 90       	pop	r9
    7802:	8f 90       	pop	r8
    7804:	7f 90       	pop	r7
    7806:	6f 90       	pop	r6
    7808:	5f 90       	pop	r5
    780a:	4f 90       	pop	r4
    780c:	08 95       	ret
	if (d == 0 || (d != '@' && d != 's' && d != 'd' && d != 'l' && d != 'c' && d != 'r' && d != 'R')) // nothing received or not sync-ed
	{
		return 0;
	}
	
	if (d == 's')
    780e:	8a 81       	ldd	r24, Y+2	; 0x02
    7810:	83 37       	cpi	r24, 0x73	; 115
    7812:	09 f4       	brne	.+2      	; 0x7816 <debug_check_msg+0x98>
    7814:	4c c0       	rjmp	.+152    	; 0x78ae <debug_check_msg+0x130>
	{
		calibration_save(x);
		return 0;
	}
	else if (d == 'd')
    7816:	8a 81       	ldd	r24, Y+2	; 0x02
    7818:	84 36       	cpi	r24, 0x64	; 100
    781a:	09 f4       	brne	.+2      	; 0x781e <debug_check_msg+0xa0>
    781c:	5f c0       	rjmp	.+190    	; 0x78dc <debug_check_msg+0x15e>
	{
		calibration_default(x);
		return 0;
	}
	else if (d == 'l')
    781e:	8a 81       	ldd	r24, Y+2	; 0x02
    7820:	8c 36       	cpi	r24, 0x6C	; 108
    7822:	09 f4       	brne	.+2      	; 0x7826 <debug_check_msg+0xa8>
    7824:	62 c0       	rjmp	.+196    	; 0x78ea <debug_check_msg+0x16c>
	{
		calibration_load(x);
		return 0;
	}
	else if (d == 'c')
    7826:	8a 81       	ldd	r24, Y+2	; 0x02
    7828:	83 36       	cpi	r24, 0x63	; 99
    782a:	09 f4       	brne	.+2      	; 0x782e <debug_check_msg+0xb0>
    782c:	63 c0       	rjmp	.+198    	; 0x78f4 <debug_check_msg+0x176>
	{
		debug_report_vars(x);
		return 0 ;
	}
	else if (d == 'r')
    782e:	8a 81       	ldd	r24, Y+2	; 0x02
    7830:	82 37       	cpi	r24, 0x72	; 114
    7832:	09 f4       	brne	.+2      	; 0x7836 <debug_check_msg+0xb8>
    7834:	58 c0       	rjmp	.+176    	; 0x78e6 <debug_check_msg+0x168>
	{
		return 1;
	}
	else if (d == 'R')
    7836:	8a 81       	ldd	r24, Y+2	; 0x02
    7838:	82 35       	cpi	r24, 0x52	; 82
    783a:	b9 f1       	breq	.+110    	; 0x78aa <debug_check_msg+0x12c>
	{
		return 3;
	}
	
	uint8_t * str = calloc(sizeof(uint8_t), 32);
    783c:	81 e0       	ldi	r24, 0x01	; 1
    783e:	90 e0       	ldi	r25, 0x00	; 0
    7840:	60 e2       	ldi	r22, 0x20	; 32
    7842:	70 e0       	ldi	r23, 0x00	; 0
    7844:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <calloc>
    7848:	5c 01       	movw	r10, r24
    784a:	66 24       	eor	r6, r6
    784c:	77 24       	eor	r7, r7
    784e:	ee 24       	eor	r14, r14
    7850:	ff 24       	eor	r15, r15
    7852:	87 01       	movw	r16, r14
    7854:	dd 24       	eor	r13, r13
	int stage = 0;
	int32_t addr = 0;
	
	for (uint8_t i = 0; ; i++)
	{
		rc = 0;
    7856:	19 82       	std	Y+1, r1	; 0x01
		do
		{
			d = ser_rx(1, &rc);
    7858:	81 e0       	ldi	r24, 0x01	; 1
    785a:	b4 01       	movw	r22, r8
    785c:	0e 94 c8 30 	call	0x6190	; 0x6190 <ser_rx>
    7860:	8a 83       	std	Y+2, r24	; 0x02
		}
		while (rc == 0);
    7862:	89 81       	ldd	r24, Y+1	; 0x01
    7864:	88 23       	and	r24, r24
    7866:	c1 f3       	breq	.-16     	; 0x7858 <debug_check_msg+0xda>
		
		if (d >= '0' || d <= '9')
    7868:	8a 81       	ldd	r24, Y+2	; 0x02
    786a:	80 33       	cpi	r24, 0x30	; 48
    786c:	28 f5       	brcc	.+74     	; 0x78b8 <debug_check_msg+0x13a>
    786e:	8a 81       	ldd	r24, Y+2	; 0x02
    7870:	8a 33       	cpi	r24, 0x3A	; 58
    7872:	10 f1       	brcs	.+68     	; 0x78b8 <debug_check_msg+0x13a>
		{
			str[i] = d;
		}
		else
		{
			str[i] = 0;
    7874:	f5 01       	movw	r30, r10
    7876:	ed 0d       	add	r30, r13
    7878:	f1 1d       	adc	r31, r1
    787a:	10 82       	st	Z, r1
			uint32_t res = strtol(str, 0, 10);
    787c:	c5 01       	movw	r24, r10
    787e:	60 e0       	ldi	r22, 0x00	; 0
    7880:	70 e0       	ldi	r23, 0x00	; 0
    7882:	4a e0       	ldi	r20, 0x0A	; 10
    7884:	50 e0       	ldi	r21, 0x00	; 0
    7886:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <strtol>
    788a:	fb 01       	movw	r30, r22
    788c:	dc 01       	movw	r26, r24
			if (stage == 0)
    788e:	67 28       	or	r6, r7
    7890:	f9 f0       	breq	.+62     	; 0x78d0 <debug_check_msg+0x152>
				addr = res;
				i = 0;
			}
			else if (stage == 1)
			{
				calibration_write(x, addr, res);
    7892:	c2 01       	movw	r24, r4
    7894:	b8 01       	movw	r22, r16
    7896:	a7 01       	movw	r20, r14
    7898:	8f 01       	movw	r16, r30
    789a:	9d 01       	movw	r18, r26
    789c:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <calibration_write>
				break;
			}
		}
	}
	
	free(str);
    78a0:	c5 01       	movw	r24, r10
    78a2:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <free>
    78a6:	80 e0       	ldi	r24, 0x00	; 0
    78a8:	a0 cf       	rjmp	.-192    	; 0x77ea <debug_check_msg+0x6c>
	}
	else if (d == 'r')
	{
		return 1;
	}
	else if (d == 'R')
    78aa:	83 e0       	ldi	r24, 0x03	; 3
    78ac:	9e cf       	rjmp	.-196    	; 0x77ea <debug_check_msg+0x6c>
		return 0;
	}
	
	if (d == 's')
	{
		calibration_save(x);
    78ae:	c2 01       	movw	r24, r4
    78b0:	0e 94 99 30 	call	0x6132	; 0x6132 <calibration_save>
    78b4:	80 e0       	ldi	r24, 0x00	; 0
    78b6:	99 cf       	rjmp	.-206    	; 0x77ea <debug_check_msg+0x6c>
		}
		while (rc == 0);
		
		if (d >= '0' || d <= '9')
		{
			str[i] = d;
    78b8:	8a 81       	ldd	r24, Y+2	; 0x02
    78ba:	f5 01       	movw	r30, r10
    78bc:	ed 0d       	add	r30, r13
    78be:	f1 1d       	adc	r31, r1
    78c0:	80 83       	st	Z, r24
    78c2:	d3 94       	inc	r13
    78c4:	f7 01       	movw	r30, r14
    78c6:	d8 01       	movw	r26, r16
		}
	}
	
	free(str);
	
	return 0;
    78c8:	cf 01       	movw	r24, r30
    78ca:	7c 01       	movw	r14, r24
    78cc:	8d 01       	movw	r16, r26
    78ce:	c3 cf       	rjmp	.-122    	; 0x7856 <debug_check_msg+0xd8>
    78d0:	31 e0       	ldi	r19, 0x01	; 1
    78d2:	63 2e       	mov	r6, r19
    78d4:	71 2c       	mov	r7, r1
    78d6:	dd 24       	eor	r13, r13
    78d8:	d3 94       	inc	r13
    78da:	f6 cf       	rjmp	.-20     	; 0x78c8 <debug_check_msg+0x14a>
		calibration_save(x);
		return 0;
	}
	else if (d == 'd')
	{
		calibration_default(x);
    78dc:	c2 01       	movw	r24, r4
    78de:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <calibration_default>
    78e2:	80 e0       	ldi	r24, 0x00	; 0
    78e4:	82 cf       	rjmp	.-252    	; 0x77ea <debug_check_msg+0x6c>
	else if (d == 'c')
	{
		debug_report_vars(x);
		return 0 ;
	}
	else if (d == 'r')
    78e6:	81 e0       	ldi	r24, 0x01	; 1
    78e8:	80 cf       	rjmp	.-256    	; 0x77ea <debug_check_msg+0x6c>
		calibration_default(x);
		return 0;
	}
	else if (d == 'l')
	{
		calibration_load(x);
    78ea:	c2 01       	movw	r24, r4
    78ec:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <calibration_load>
    78f0:	80 e0       	ldi	r24, 0x00	; 0
    78f2:	7b cf       	rjmp	.-266    	; 0x77ea <debug_check_msg+0x6c>
		return 0;
	}
	else if (d == 'c')
	{
		debug_report_vars(x);
    78f4:	c2 01       	movw	r24, r4
    78f6:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <debug_report_vars>
    78fa:	80 e0       	ldi	r24, 0x00	; 0
    78fc:	76 cf       	rjmp	.-276    	; 0x77ea <debug_check_msg+0x6c>

000078fe <debug_initialize>:

static FILE serstream = FDEV_SETUP_STREAM(ser_tx_1, NULL, _FDEV_SETUP_WRITE);

void debug_initialize()
{
	ser1_init(129, 128, 128); // 9600 baud
    78fe:	81 e8       	ldi	r24, 0x81	; 129
    7900:	90 e0       	ldi	r25, 0x00	; 0
    7902:	60 e8       	ldi	r22, 0x80	; 128
    7904:	40 e8       	ldi	r20, 0x80	; 128
    7906:	0e 94 68 32 	call	0x64d0	; 0x64d0 <ser1_init>
}
    790a:	08 95       	ret

0000790c <__mulsi3>:
    790c:	62 9f       	mul	r22, r18
    790e:	d0 01       	movw	r26, r0
    7910:	73 9f       	mul	r23, r19
    7912:	f0 01       	movw	r30, r0
    7914:	82 9f       	mul	r24, r18
    7916:	e0 0d       	add	r30, r0
    7918:	f1 1d       	adc	r31, r1
    791a:	64 9f       	mul	r22, r20
    791c:	e0 0d       	add	r30, r0
    791e:	f1 1d       	adc	r31, r1
    7920:	92 9f       	mul	r25, r18
    7922:	f0 0d       	add	r31, r0
    7924:	83 9f       	mul	r24, r19
    7926:	f0 0d       	add	r31, r0
    7928:	74 9f       	mul	r23, r20
    792a:	f0 0d       	add	r31, r0
    792c:	65 9f       	mul	r22, r21
    792e:	f0 0d       	add	r31, r0
    7930:	99 27       	eor	r25, r25
    7932:	72 9f       	mul	r23, r18
    7934:	b0 0d       	add	r27, r0
    7936:	e1 1d       	adc	r30, r1
    7938:	f9 1f       	adc	r31, r25
    793a:	63 9f       	mul	r22, r19
    793c:	b0 0d       	add	r27, r0
    793e:	e1 1d       	adc	r30, r1
    7940:	f9 1f       	adc	r31, r25
    7942:	bd 01       	movw	r22, r26
    7944:	cf 01       	movw	r24, r30
    7946:	11 24       	eor	r1, r1
    7948:	08 95       	ret

0000794a <__udivmodqi4>:
    794a:	99 1b       	sub	r25, r25
    794c:	79 e0       	ldi	r23, 0x09	; 9
    794e:	04 c0       	rjmp	.+8      	; 0x7958 <__udivmodqi4_ep>

00007950 <__udivmodqi4_loop>:
    7950:	99 1f       	adc	r25, r25
    7952:	96 17       	cp	r25, r22
    7954:	08 f0       	brcs	.+2      	; 0x7958 <__udivmodqi4_ep>
    7956:	96 1b       	sub	r25, r22

00007958 <__udivmodqi4_ep>:
    7958:	88 1f       	adc	r24, r24
    795a:	7a 95       	dec	r23
    795c:	c9 f7       	brne	.-14     	; 0x7950 <__udivmodqi4_loop>
    795e:	80 95       	com	r24
    7960:	08 95       	ret

00007962 <__udivmodhi4>:
    7962:	aa 1b       	sub	r26, r26
    7964:	bb 1b       	sub	r27, r27
    7966:	51 e1       	ldi	r21, 0x11	; 17
    7968:	07 c0       	rjmp	.+14     	; 0x7978 <__udivmodhi4_ep>

0000796a <__udivmodhi4_loop>:
    796a:	aa 1f       	adc	r26, r26
    796c:	bb 1f       	adc	r27, r27
    796e:	a6 17       	cp	r26, r22
    7970:	b7 07       	cpc	r27, r23
    7972:	10 f0       	brcs	.+4      	; 0x7978 <__udivmodhi4_ep>
    7974:	a6 1b       	sub	r26, r22
    7976:	b7 0b       	sbc	r27, r23

00007978 <__udivmodhi4_ep>:
    7978:	88 1f       	adc	r24, r24
    797a:	99 1f       	adc	r25, r25
    797c:	5a 95       	dec	r21
    797e:	a9 f7       	brne	.-22     	; 0x796a <__udivmodhi4_loop>
    7980:	80 95       	com	r24
    7982:	90 95       	com	r25
    7984:	bc 01       	movw	r22, r24
    7986:	cd 01       	movw	r24, r26
    7988:	08 95       	ret

0000798a <__divmodhi4>:
    798a:	97 fb       	bst	r25, 7
    798c:	09 2e       	mov	r0, r25
    798e:	07 26       	eor	r0, r23
    7990:	0a d0       	rcall	.+20     	; 0x79a6 <__divmodhi4_neg1>
    7992:	77 fd       	sbrc	r23, 7
    7994:	04 d0       	rcall	.+8      	; 0x799e <__divmodhi4_neg2>
    7996:	e5 df       	rcall	.-54     	; 0x7962 <__udivmodhi4>
    7998:	06 d0       	rcall	.+12     	; 0x79a6 <__divmodhi4_neg1>
    799a:	00 20       	and	r0, r0
    799c:	1a f4       	brpl	.+6      	; 0x79a4 <__divmodhi4_exit>

0000799e <__divmodhi4_neg2>:
    799e:	70 95       	com	r23
    79a0:	61 95       	neg	r22
    79a2:	7f 4f       	sbci	r23, 0xFF	; 255

000079a4 <__divmodhi4_exit>:
    79a4:	08 95       	ret

000079a6 <__divmodhi4_neg1>:
    79a6:	f6 f7       	brtc	.-4      	; 0x79a4 <__divmodhi4_exit>
    79a8:	90 95       	com	r25
    79aa:	81 95       	neg	r24
    79ac:	9f 4f       	sbci	r25, 0xFF	; 255
    79ae:	08 95       	ret

000079b0 <__udivmodsi4>:
    79b0:	a1 e2       	ldi	r26, 0x21	; 33
    79b2:	1a 2e       	mov	r1, r26
    79b4:	aa 1b       	sub	r26, r26
    79b6:	bb 1b       	sub	r27, r27
    79b8:	fd 01       	movw	r30, r26
    79ba:	0d c0       	rjmp	.+26     	; 0x79d6 <__udivmodsi4_ep>

000079bc <__udivmodsi4_loop>:
    79bc:	aa 1f       	adc	r26, r26
    79be:	bb 1f       	adc	r27, r27
    79c0:	ee 1f       	adc	r30, r30
    79c2:	ff 1f       	adc	r31, r31
    79c4:	a2 17       	cp	r26, r18
    79c6:	b3 07       	cpc	r27, r19
    79c8:	e4 07       	cpc	r30, r20
    79ca:	f5 07       	cpc	r31, r21
    79cc:	20 f0       	brcs	.+8      	; 0x79d6 <__udivmodsi4_ep>
    79ce:	a2 1b       	sub	r26, r18
    79d0:	b3 0b       	sbc	r27, r19
    79d2:	e4 0b       	sbc	r30, r20
    79d4:	f5 0b       	sbc	r31, r21

000079d6 <__udivmodsi4_ep>:
    79d6:	66 1f       	adc	r22, r22
    79d8:	77 1f       	adc	r23, r23
    79da:	88 1f       	adc	r24, r24
    79dc:	99 1f       	adc	r25, r25
    79de:	1a 94       	dec	r1
    79e0:	69 f7       	brne	.-38     	; 0x79bc <__udivmodsi4_loop>
    79e2:	60 95       	com	r22
    79e4:	70 95       	com	r23
    79e6:	80 95       	com	r24
    79e8:	90 95       	com	r25
    79ea:	9b 01       	movw	r18, r22
    79ec:	ac 01       	movw	r20, r24
    79ee:	bd 01       	movw	r22, r26
    79f0:	cf 01       	movw	r24, r30
    79f2:	08 95       	ret

000079f4 <__divmodsi4>:
    79f4:	97 fb       	bst	r25, 7
    79f6:	09 2e       	mov	r0, r25
    79f8:	05 26       	eor	r0, r21
    79fa:	0e d0       	rcall	.+28     	; 0x7a18 <__divmodsi4_neg1>
    79fc:	57 fd       	sbrc	r21, 7
    79fe:	04 d0       	rcall	.+8      	; 0x7a08 <__divmodsi4_neg2>
    7a00:	d7 df       	rcall	.-82     	; 0x79b0 <__udivmodsi4>
    7a02:	0a d0       	rcall	.+20     	; 0x7a18 <__divmodsi4_neg1>
    7a04:	00 1c       	adc	r0, r0
    7a06:	38 f4       	brcc	.+14     	; 0x7a16 <__divmodsi4_exit>

00007a08 <__divmodsi4_neg2>:
    7a08:	50 95       	com	r21
    7a0a:	40 95       	com	r20
    7a0c:	30 95       	com	r19
    7a0e:	21 95       	neg	r18
    7a10:	3f 4f       	sbci	r19, 0xFF	; 255
    7a12:	4f 4f       	sbci	r20, 0xFF	; 255
    7a14:	5f 4f       	sbci	r21, 0xFF	; 255

00007a16 <__divmodsi4_exit>:
    7a16:	08 95       	ret

00007a18 <__divmodsi4_neg1>:
    7a18:	f6 f7       	brtc	.-4      	; 0x7a16 <__divmodsi4_exit>
    7a1a:	90 95       	com	r25
    7a1c:	80 95       	com	r24
    7a1e:	70 95       	com	r23
    7a20:	61 95       	neg	r22
    7a22:	7f 4f       	sbci	r23, 0xFF	; 255
    7a24:	8f 4f       	sbci	r24, 0xFF	; 255
    7a26:	9f 4f       	sbci	r25, 0xFF	; 255
    7a28:	08 95       	ret

00007a2a <__prologue_saves__>:
    7a2a:	2f 92       	push	r2
    7a2c:	3f 92       	push	r3
    7a2e:	4f 92       	push	r4
    7a30:	5f 92       	push	r5
    7a32:	6f 92       	push	r6
    7a34:	7f 92       	push	r7
    7a36:	8f 92       	push	r8
    7a38:	9f 92       	push	r9
    7a3a:	af 92       	push	r10
    7a3c:	bf 92       	push	r11
    7a3e:	cf 92       	push	r12
    7a40:	df 92       	push	r13
    7a42:	ef 92       	push	r14
    7a44:	ff 92       	push	r15
    7a46:	0f 93       	push	r16
    7a48:	1f 93       	push	r17
    7a4a:	cf 93       	push	r28
    7a4c:	df 93       	push	r29
    7a4e:	cd b7       	in	r28, 0x3d	; 61
    7a50:	de b7       	in	r29, 0x3e	; 62
    7a52:	ca 1b       	sub	r28, r26
    7a54:	db 0b       	sbc	r29, r27
    7a56:	0f b6       	in	r0, 0x3f	; 63
    7a58:	f8 94       	cli
    7a5a:	de bf       	out	0x3e, r29	; 62
    7a5c:	0f be       	out	0x3f, r0	; 63
    7a5e:	cd bf       	out	0x3d, r28	; 61
    7a60:	09 94       	ijmp

00007a62 <__epilogue_restores__>:
    7a62:	2a 88       	ldd	r2, Y+18	; 0x12
    7a64:	39 88       	ldd	r3, Y+17	; 0x11
    7a66:	48 88       	ldd	r4, Y+16	; 0x10
    7a68:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a70:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a72:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a74:	b9 84       	ldd	r11, Y+9	; 0x09
    7a76:	c8 84       	ldd	r12, Y+8	; 0x08
    7a78:	df 80       	ldd	r13, Y+7	; 0x07
    7a7a:	ee 80       	ldd	r14, Y+6	; 0x06
    7a7c:	fd 80       	ldd	r15, Y+5	; 0x05
    7a7e:	0c 81       	ldd	r16, Y+4	; 0x04
    7a80:	1b 81       	ldd	r17, Y+3	; 0x03
    7a82:	aa 81       	ldd	r26, Y+2	; 0x02
    7a84:	b9 81       	ldd	r27, Y+1	; 0x01
    7a86:	ce 0f       	add	r28, r30
    7a88:	d1 1d       	adc	r29, r1
    7a8a:	0f b6       	in	r0, 0x3f	; 63
    7a8c:	f8 94       	cli
    7a8e:	de bf       	out	0x3e, r29	; 62
    7a90:	0f be       	out	0x3f, r0	; 63
    7a92:	cd bf       	out	0x3d, r28	; 61
    7a94:	ed 01       	movw	r28, r26
    7a96:	08 95       	ret

00007a98 <calloc>:
    7a98:	0f 93       	push	r16
    7a9a:	1f 93       	push	r17
    7a9c:	cf 93       	push	r28
    7a9e:	df 93       	push	r29
    7aa0:	68 9f       	mul	r22, r24
    7aa2:	80 01       	movw	r16, r0
    7aa4:	69 9f       	mul	r22, r25
    7aa6:	10 0d       	add	r17, r0
    7aa8:	78 9f       	mul	r23, r24
    7aaa:	10 0d       	add	r17, r0
    7aac:	11 24       	eor	r1, r1
    7aae:	c8 01       	movw	r24, r16
    7ab0:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <malloc>
    7ab4:	ec 01       	movw	r28, r24
    7ab6:	00 97       	sbiw	r24, 0x00	; 0
    7ab8:	29 f0       	breq	.+10     	; 0x7ac4 <calloc+0x2c>
    7aba:	60 e0       	ldi	r22, 0x00	; 0
    7abc:	70 e0       	ldi	r23, 0x00	; 0
    7abe:	a8 01       	movw	r20, r16
    7ac0:	0e 94 b1 3f 	call	0x7f62	; 0x7f62 <memset>
    7ac4:	ce 01       	movw	r24, r28
    7ac6:	df 91       	pop	r29
    7ac8:	cf 91       	pop	r28
    7aca:	1f 91       	pop	r17
    7acc:	0f 91       	pop	r16
    7ace:	08 95       	ret

00007ad0 <malloc>:
    7ad0:	cf 93       	push	r28
    7ad2:	df 93       	push	r29
    7ad4:	bc 01       	movw	r22, r24
    7ad6:	82 30       	cpi	r24, 0x02	; 2
    7ad8:	91 05       	cpc	r25, r1
    7ada:	10 f4       	brcc	.+4      	; 0x7ae0 <malloc+0x10>
    7adc:	62 e0       	ldi	r22, 0x02	; 2
    7ade:	70 e0       	ldi	r23, 0x00	; 0
    7ae0:	a0 91 e3 03 	lds	r26, 0x03E3
    7ae4:	b0 91 e4 03 	lds	r27, 0x03E4
    7ae8:	ed 01       	movw	r28, r26
    7aea:	e0 e0       	ldi	r30, 0x00	; 0
    7aec:	f0 e0       	ldi	r31, 0x00	; 0
    7aee:	40 e0       	ldi	r20, 0x00	; 0
    7af0:	50 e0       	ldi	r21, 0x00	; 0
    7af2:	21 c0       	rjmp	.+66     	; 0x7b36 <malloc+0x66>
    7af4:	88 81       	ld	r24, Y
    7af6:	99 81       	ldd	r25, Y+1	; 0x01
    7af8:	86 17       	cp	r24, r22
    7afa:	97 07       	cpc	r25, r23
    7afc:	69 f4       	brne	.+26     	; 0x7b18 <malloc+0x48>
    7afe:	8a 81       	ldd	r24, Y+2	; 0x02
    7b00:	9b 81       	ldd	r25, Y+3	; 0x03
    7b02:	30 97       	sbiw	r30, 0x00	; 0
    7b04:	19 f0       	breq	.+6      	; 0x7b0c <malloc+0x3c>
    7b06:	93 83       	std	Z+3, r25	; 0x03
    7b08:	82 83       	std	Z+2, r24	; 0x02
    7b0a:	04 c0       	rjmp	.+8      	; 0x7b14 <malloc+0x44>
    7b0c:	90 93 e4 03 	sts	0x03E4, r25
    7b10:	80 93 e3 03 	sts	0x03E3, r24
    7b14:	fe 01       	movw	r30, r28
    7b16:	34 c0       	rjmp	.+104    	; 0x7b80 <malloc+0xb0>
    7b18:	68 17       	cp	r22, r24
    7b1a:	79 07       	cpc	r23, r25
    7b1c:	38 f4       	brcc	.+14     	; 0x7b2c <malloc+0x5c>
    7b1e:	41 15       	cp	r20, r1
    7b20:	51 05       	cpc	r21, r1
    7b22:	19 f0       	breq	.+6      	; 0x7b2a <malloc+0x5a>
    7b24:	84 17       	cp	r24, r20
    7b26:	95 07       	cpc	r25, r21
    7b28:	08 f4       	brcc	.+2      	; 0x7b2c <malloc+0x5c>
    7b2a:	ac 01       	movw	r20, r24
    7b2c:	fe 01       	movw	r30, r28
    7b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b30:	9b 81       	ldd	r25, Y+3	; 0x03
    7b32:	9c 01       	movw	r18, r24
    7b34:	e9 01       	movw	r28, r18
    7b36:	20 97       	sbiw	r28, 0x00	; 0
    7b38:	e9 f6       	brne	.-70     	; 0x7af4 <malloc+0x24>
    7b3a:	41 15       	cp	r20, r1
    7b3c:	51 05       	cpc	r21, r1
    7b3e:	a9 f1       	breq	.+106    	; 0x7baa <malloc+0xda>
    7b40:	ca 01       	movw	r24, r20
    7b42:	86 1b       	sub	r24, r22
    7b44:	97 0b       	sbc	r25, r23
    7b46:	04 97       	sbiw	r24, 0x04	; 4
    7b48:	08 f4       	brcc	.+2      	; 0x7b4c <malloc+0x7c>
    7b4a:	ba 01       	movw	r22, r20
    7b4c:	e0 e0       	ldi	r30, 0x00	; 0
    7b4e:	f0 e0       	ldi	r31, 0x00	; 0
    7b50:	2a c0       	rjmp	.+84     	; 0x7ba6 <malloc+0xd6>
    7b52:	8d 91       	ld	r24, X+
    7b54:	9c 91       	ld	r25, X
    7b56:	11 97       	sbiw	r26, 0x01	; 1
    7b58:	84 17       	cp	r24, r20
    7b5a:	95 07       	cpc	r25, r21
    7b5c:	f9 f4       	brne	.+62     	; 0x7b9c <malloc+0xcc>
    7b5e:	64 17       	cp	r22, r20
    7b60:	75 07       	cpc	r23, r21
    7b62:	81 f4       	brne	.+32     	; 0x7b84 <malloc+0xb4>
    7b64:	12 96       	adiw	r26, 0x02	; 2
    7b66:	8d 91       	ld	r24, X+
    7b68:	9c 91       	ld	r25, X
    7b6a:	13 97       	sbiw	r26, 0x03	; 3
    7b6c:	30 97       	sbiw	r30, 0x00	; 0
    7b6e:	19 f0       	breq	.+6      	; 0x7b76 <malloc+0xa6>
    7b70:	93 83       	std	Z+3, r25	; 0x03
    7b72:	82 83       	std	Z+2, r24	; 0x02
    7b74:	04 c0       	rjmp	.+8      	; 0x7b7e <malloc+0xae>
    7b76:	90 93 e4 03 	sts	0x03E4, r25
    7b7a:	80 93 e3 03 	sts	0x03E3, r24
    7b7e:	fd 01       	movw	r30, r26
    7b80:	32 96       	adiw	r30, 0x02	; 2
    7b82:	4f c0       	rjmp	.+158    	; 0x7c22 <malloc+0x152>
    7b84:	ca 01       	movw	r24, r20
    7b86:	86 1b       	sub	r24, r22
    7b88:	97 0b       	sbc	r25, r23
    7b8a:	fd 01       	movw	r30, r26
    7b8c:	e8 0f       	add	r30, r24
    7b8e:	f9 1f       	adc	r31, r25
    7b90:	61 93       	st	Z+, r22
    7b92:	71 93       	st	Z+, r23
    7b94:	02 97       	sbiw	r24, 0x02	; 2
    7b96:	8d 93       	st	X+, r24
    7b98:	9c 93       	st	X, r25
    7b9a:	43 c0       	rjmp	.+134    	; 0x7c22 <malloc+0x152>
    7b9c:	fd 01       	movw	r30, r26
    7b9e:	82 81       	ldd	r24, Z+2	; 0x02
    7ba0:	93 81       	ldd	r25, Z+3	; 0x03
    7ba2:	9c 01       	movw	r18, r24
    7ba4:	d9 01       	movw	r26, r18
    7ba6:	10 97       	sbiw	r26, 0x00	; 0
    7ba8:	a1 f6       	brne	.-88     	; 0x7b52 <malloc+0x82>
    7baa:	80 91 e1 03 	lds	r24, 0x03E1
    7bae:	90 91 e2 03 	lds	r25, 0x03E2
    7bb2:	89 2b       	or	r24, r25
    7bb4:	41 f4       	brne	.+16     	; 0x7bc6 <malloc+0xf6>
    7bb6:	80 91 0a 02 	lds	r24, 0x020A
    7bba:	90 91 0b 02 	lds	r25, 0x020B
    7bbe:	90 93 e2 03 	sts	0x03E2, r25
    7bc2:	80 93 e1 03 	sts	0x03E1, r24
    7bc6:	40 91 0c 02 	lds	r20, 0x020C
    7bca:	50 91 0d 02 	lds	r21, 0x020D
    7bce:	41 15       	cp	r20, r1
    7bd0:	51 05       	cpc	r21, r1
    7bd2:	41 f4       	brne	.+16     	; 0x7be4 <malloc+0x114>
    7bd4:	4d b7       	in	r20, 0x3d	; 61
    7bd6:	5e b7       	in	r21, 0x3e	; 62
    7bd8:	80 91 08 02 	lds	r24, 0x0208
    7bdc:	90 91 09 02 	lds	r25, 0x0209
    7be0:	48 1b       	sub	r20, r24
    7be2:	59 0b       	sbc	r21, r25
    7be4:	20 91 e1 03 	lds	r18, 0x03E1
    7be8:	30 91 e2 03 	lds	r19, 0x03E2
    7bec:	24 17       	cp	r18, r20
    7bee:	35 07       	cpc	r19, r21
    7bf0:	b0 f4       	brcc	.+44     	; 0x7c1e <malloc+0x14e>
    7bf2:	ca 01       	movw	r24, r20
    7bf4:	82 1b       	sub	r24, r18
    7bf6:	93 0b       	sbc	r25, r19
    7bf8:	86 17       	cp	r24, r22
    7bfa:	97 07       	cpc	r25, r23
    7bfc:	80 f0       	brcs	.+32     	; 0x7c1e <malloc+0x14e>
    7bfe:	ab 01       	movw	r20, r22
    7c00:	4e 5f       	subi	r20, 0xFE	; 254
    7c02:	5f 4f       	sbci	r21, 0xFF	; 255
    7c04:	84 17       	cp	r24, r20
    7c06:	95 07       	cpc	r25, r21
    7c08:	50 f0       	brcs	.+20     	; 0x7c1e <malloc+0x14e>
    7c0a:	42 0f       	add	r20, r18
    7c0c:	53 1f       	adc	r21, r19
    7c0e:	50 93 e2 03 	sts	0x03E2, r21
    7c12:	40 93 e1 03 	sts	0x03E1, r20
    7c16:	f9 01       	movw	r30, r18
    7c18:	61 93       	st	Z+, r22
    7c1a:	71 93       	st	Z+, r23
    7c1c:	02 c0       	rjmp	.+4      	; 0x7c22 <malloc+0x152>
    7c1e:	e0 e0       	ldi	r30, 0x00	; 0
    7c20:	f0 e0       	ldi	r31, 0x00	; 0
    7c22:	cf 01       	movw	r24, r30
    7c24:	df 91       	pop	r29
    7c26:	cf 91       	pop	r28
    7c28:	08 95       	ret

00007c2a <free>:
    7c2a:	cf 93       	push	r28
    7c2c:	df 93       	push	r29
    7c2e:	00 97       	sbiw	r24, 0x00	; 0
    7c30:	09 f4       	brne	.+2      	; 0x7c34 <free+0xa>
    7c32:	50 c0       	rjmp	.+160    	; 0x7cd4 <free+0xaa>
    7c34:	ec 01       	movw	r28, r24
    7c36:	22 97       	sbiw	r28, 0x02	; 2
    7c38:	1b 82       	std	Y+3, r1	; 0x03
    7c3a:	1a 82       	std	Y+2, r1	; 0x02
    7c3c:	a0 91 e3 03 	lds	r26, 0x03E3
    7c40:	b0 91 e4 03 	lds	r27, 0x03E4
    7c44:	10 97       	sbiw	r26, 0x00	; 0
    7c46:	09 f1       	breq	.+66     	; 0x7c8a <free+0x60>
    7c48:	40 e0       	ldi	r20, 0x00	; 0
    7c4a:	50 e0       	ldi	r21, 0x00	; 0
    7c4c:	ac 17       	cp	r26, r28
    7c4e:	bd 07       	cpc	r27, r29
    7c50:	08 f1       	brcs	.+66     	; 0x7c94 <free+0x6a>
    7c52:	bb 83       	std	Y+3, r27	; 0x03
    7c54:	aa 83       	std	Y+2, r26	; 0x02
    7c56:	fe 01       	movw	r30, r28
    7c58:	21 91       	ld	r18, Z+
    7c5a:	31 91       	ld	r19, Z+
    7c5c:	e2 0f       	add	r30, r18
    7c5e:	f3 1f       	adc	r31, r19
    7c60:	ae 17       	cp	r26, r30
    7c62:	bf 07       	cpc	r27, r31
    7c64:	79 f4       	brne	.+30     	; 0x7c84 <free+0x5a>
    7c66:	8d 91       	ld	r24, X+
    7c68:	9c 91       	ld	r25, X
    7c6a:	11 97       	sbiw	r26, 0x01	; 1
    7c6c:	28 0f       	add	r18, r24
    7c6e:	39 1f       	adc	r19, r25
    7c70:	2e 5f       	subi	r18, 0xFE	; 254
    7c72:	3f 4f       	sbci	r19, 0xFF	; 255
    7c74:	39 83       	std	Y+1, r19	; 0x01
    7c76:	28 83       	st	Y, r18
    7c78:	12 96       	adiw	r26, 0x02	; 2
    7c7a:	8d 91       	ld	r24, X+
    7c7c:	9c 91       	ld	r25, X
    7c7e:	13 97       	sbiw	r26, 0x03	; 3
    7c80:	9b 83       	std	Y+3, r25	; 0x03
    7c82:	8a 83       	std	Y+2, r24	; 0x02
    7c84:	41 15       	cp	r20, r1
    7c86:	51 05       	cpc	r21, r1
    7c88:	71 f4       	brne	.+28     	; 0x7ca6 <free+0x7c>
    7c8a:	d0 93 e4 03 	sts	0x03E4, r29
    7c8e:	c0 93 e3 03 	sts	0x03E3, r28
    7c92:	20 c0       	rjmp	.+64     	; 0x7cd4 <free+0xaa>
    7c94:	12 96       	adiw	r26, 0x02	; 2
    7c96:	8d 91       	ld	r24, X+
    7c98:	9c 91       	ld	r25, X
    7c9a:	13 97       	sbiw	r26, 0x03	; 3
    7c9c:	ad 01       	movw	r20, r26
    7c9e:	00 97       	sbiw	r24, 0x00	; 0
    7ca0:	11 f0       	breq	.+4      	; 0x7ca6 <free+0x7c>
    7ca2:	dc 01       	movw	r26, r24
    7ca4:	d3 cf       	rjmp	.-90     	; 0x7c4c <free+0x22>
    7ca6:	fa 01       	movw	r30, r20
    7ca8:	d3 83       	std	Z+3, r29	; 0x03
    7caa:	c2 83       	std	Z+2, r28	; 0x02
    7cac:	21 91       	ld	r18, Z+
    7cae:	31 91       	ld	r19, Z+
    7cb0:	e2 0f       	add	r30, r18
    7cb2:	f3 1f       	adc	r31, r19
    7cb4:	ce 17       	cp	r28, r30
    7cb6:	df 07       	cpc	r29, r31
    7cb8:	69 f4       	brne	.+26     	; 0x7cd4 <free+0xaa>
    7cba:	88 81       	ld	r24, Y
    7cbc:	99 81       	ldd	r25, Y+1	; 0x01
    7cbe:	28 0f       	add	r18, r24
    7cc0:	39 1f       	adc	r19, r25
    7cc2:	2e 5f       	subi	r18, 0xFE	; 254
    7cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    7cc6:	fa 01       	movw	r30, r20
    7cc8:	31 83       	std	Z+1, r19	; 0x01
    7cca:	20 83       	st	Z, r18
    7ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    7cce:	9b 81       	ldd	r25, Y+3	; 0x03
    7cd0:	93 83       	std	Z+3, r25	; 0x03
    7cd2:	82 83       	std	Z+2, r24	; 0x02
    7cd4:	df 91       	pop	r29
    7cd6:	cf 91       	pop	r28
    7cd8:	08 95       	ret

00007cda <strtol>:
    7cda:	2f 92       	push	r2
    7cdc:	3f 92       	push	r3
    7cde:	5f 92       	push	r5
    7ce0:	6f 92       	push	r6
    7ce2:	7f 92       	push	r7
    7ce4:	8f 92       	push	r8
    7ce6:	9f 92       	push	r9
    7ce8:	af 92       	push	r10
    7cea:	bf 92       	push	r11
    7cec:	cf 92       	push	r12
    7cee:	df 92       	push	r13
    7cf0:	ef 92       	push	r14
    7cf2:	ff 92       	push	r15
    7cf4:	0f 93       	push	r16
    7cf6:	1f 93       	push	r17
    7cf8:	cf 93       	push	r28
    7cfa:	df 93       	push	r29
    7cfc:	8c 01       	movw	r16, r24
    7cfe:	1b 01       	movw	r2, r22
    7d00:	ea 01       	movw	r28, r20
    7d02:	61 15       	cp	r22, r1
    7d04:	71 05       	cpc	r23, r1
    7d06:	19 f0       	breq	.+6      	; 0x7d0e <strtol+0x34>
    7d08:	fb 01       	movw	r30, r22
    7d0a:	91 83       	std	Z+1, r25	; 0x01
    7d0c:	80 83       	st	Z, r24
    7d0e:	20 97       	sbiw	r28, 0x00	; 0
    7d10:	49 f0       	breq	.+18     	; 0x7d24 <strtol+0x4a>
    7d12:	ce 01       	movw	r24, r28
    7d14:	02 97       	sbiw	r24, 0x02	; 2
    7d16:	83 97       	sbiw	r24, 0x23	; 35
    7d18:	28 f0       	brcs	.+10     	; 0x7d24 <strtol+0x4a>
    7d1a:	20 e0       	ldi	r18, 0x00	; 0
    7d1c:	30 e0       	ldi	r19, 0x00	; 0
    7d1e:	40 e0       	ldi	r20, 0x00	; 0
    7d20:	50 e0       	ldi	r21, 0x00	; 0
    7d22:	f6 c0       	rjmp	.+492    	; 0x7f10 <strtol+0x236>
    7d24:	f8 01       	movw	r30, r16
    7d26:	a1 90       	ld	r10, Z+
    7d28:	8f 01       	movw	r16, r30
    7d2a:	8a 2d       	mov	r24, r10
    7d2c:	90 e0       	ldi	r25, 0x00	; 0
    7d2e:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <isspace>
    7d32:	89 2b       	or	r24, r25
    7d34:	b9 f7       	brne	.-18     	; 0x7d24 <strtol+0x4a>
    7d36:	fd e2       	ldi	r31, 0x2D	; 45
    7d38:	af 16       	cp	r10, r31
    7d3a:	31 f4       	brne	.+12     	; 0x7d48 <strtol+0x6e>
    7d3c:	f8 01       	movw	r30, r16
    7d3e:	a1 90       	ld	r10, Z+
    7d40:	8f 01       	movw	r16, r30
    7d42:	55 24       	eor	r5, r5
    7d44:	53 94       	inc	r5
    7d46:	07 c0       	rjmp	.+14     	; 0x7d56 <strtol+0x7c>
    7d48:	fb e2       	ldi	r31, 0x2B	; 43
    7d4a:	af 16       	cp	r10, r31
    7d4c:	19 f4       	brne	.+6      	; 0x7d54 <strtol+0x7a>
    7d4e:	f8 01       	movw	r30, r16
    7d50:	a1 90       	ld	r10, Z+
    7d52:	8f 01       	movw	r16, r30
    7d54:	55 24       	eor	r5, r5
    7d56:	20 97       	sbiw	r28, 0x00	; 0
    7d58:	19 f0       	breq	.+6      	; 0x7d60 <strtol+0x86>
    7d5a:	c0 31       	cpi	r28, 0x10	; 16
    7d5c:	d1 05       	cpc	r29, r1
    7d5e:	c1 f4       	brne	.+48     	; 0x7d90 <strtol+0xb6>
    7d60:	f0 e3       	ldi	r31, 0x30	; 48
    7d62:	af 16       	cp	r10, r31
    7d64:	79 f4       	brne	.+30     	; 0x7d84 <strtol+0xaa>
    7d66:	f8 01       	movw	r30, r16
    7d68:	80 81       	ld	r24, Z
    7d6a:	88 37       	cpi	r24, 0x78	; 120
    7d6c:	11 f0       	breq	.+4      	; 0x7d72 <strtol+0x98>
    7d6e:	88 35       	cpi	r24, 0x58	; 88
    7d70:	49 f4       	brne	.+18     	; 0x7d84 <strtol+0xaa>
    7d72:	f8 01       	movw	r30, r16
    7d74:	a1 80       	ldd	r10, Z+1	; 0x01
    7d76:	0e 5f       	subi	r16, 0xFE	; 254
    7d78:	1f 4f       	sbci	r17, 0xFF	; 255
    7d7a:	f2 e0       	ldi	r31, 0x02	; 2
    7d7c:	5f 2a       	or	r5, r31
    7d7e:	c0 e1       	ldi	r28, 0x10	; 16
    7d80:	d0 e0       	ldi	r29, 0x00	; 0
    7d82:	06 c0       	rjmp	.+12     	; 0x7d90 <strtol+0xb6>
    7d84:	20 97       	sbiw	r28, 0x00	; 0
    7d86:	21 f4       	brne	.+8      	; 0x7d90 <strtol+0xb6>
    7d88:	80 e3       	ldi	r24, 0x30	; 48
    7d8a:	a8 16       	cp	r10, r24
    7d8c:	e9 f4       	brne	.+58     	; 0x7dc8 <strtol+0xee>
    7d8e:	27 c0       	rjmp	.+78     	; 0x7dde <strtol+0x104>
    7d90:	c8 30       	cpi	r28, 0x08	; 8
    7d92:	d1 05       	cpc	r29, r1
    7d94:	31 f1       	breq	.+76     	; 0x7de2 <strtol+0x108>
    7d96:	c9 30       	cpi	r28, 0x09	; 9
    7d98:	d1 05       	cpc	r29, r1
    7d9a:	24 f4       	brge	.+8      	; 0x7da4 <strtol+0xca>
    7d9c:	c2 30       	cpi	r28, 0x02	; 2
    7d9e:	d1 05       	cpc	r29, r1
    7da0:	31 f5       	brne	.+76     	; 0x7dee <strtol+0x114>
    7da2:	0c c0       	rjmp	.+24     	; 0x7dbc <strtol+0xe2>
    7da4:	ca 30       	cpi	r28, 0x0A	; 10
    7da6:	d1 05       	cpc	r29, r1
    7da8:	89 f0       	breq	.+34     	; 0x7dcc <strtol+0xf2>
    7daa:	c0 31       	cpi	r28, 0x10	; 16
    7dac:	d1 05       	cpc	r29, r1
    7dae:	f9 f4       	brne	.+62     	; 0x7dee <strtol+0x114>
    7db0:	c1 2c       	mov	r12, r1
    7db2:	d1 2c       	mov	r13, r1
    7db4:	e1 2c       	mov	r14, r1
    7db6:	b8 e0       	ldi	r27, 0x08	; 8
    7db8:	fb 2e       	mov	r15, r27
    7dba:	28 c0       	rjmp	.+80     	; 0x7e0c <strtol+0x132>
    7dbc:	c1 2c       	mov	r12, r1
    7dbe:	d1 2c       	mov	r13, r1
    7dc0:	e1 2c       	mov	r14, r1
    7dc2:	a0 e4       	ldi	r26, 0x40	; 64
    7dc4:	fa 2e       	mov	r15, r26
    7dc6:	22 c0       	rjmp	.+68     	; 0x7e0c <strtol+0x132>
    7dc8:	ca e0       	ldi	r28, 0x0A	; 10
    7dca:	d0 e0       	ldi	r29, 0x00	; 0
    7dcc:	fc ec       	ldi	r31, 0xCC	; 204
    7dce:	cf 2e       	mov	r12, r31
    7dd0:	fc ec       	ldi	r31, 0xCC	; 204
    7dd2:	df 2e       	mov	r13, r31
    7dd4:	fc ec       	ldi	r31, 0xCC	; 204
    7dd6:	ef 2e       	mov	r14, r31
    7dd8:	fc e0       	ldi	r31, 0x0C	; 12
    7dda:	ff 2e       	mov	r15, r31
    7ddc:	17 c0       	rjmp	.+46     	; 0x7e0c <strtol+0x132>
    7dde:	c8 e0       	ldi	r28, 0x08	; 8
    7de0:	d0 e0       	ldi	r29, 0x00	; 0
    7de2:	c1 2c       	mov	r12, r1
    7de4:	d1 2c       	mov	r13, r1
    7de6:	e1 2c       	mov	r14, r1
    7de8:	e0 e1       	ldi	r30, 0x10	; 16
    7dea:	fe 2e       	mov	r15, r30
    7dec:	0f c0       	rjmp	.+30     	; 0x7e0c <strtol+0x132>
    7dee:	9e 01       	movw	r18, r28
    7df0:	44 27       	eor	r20, r20
    7df2:	37 fd       	sbrc	r19, 7
    7df4:	40 95       	com	r20
    7df6:	54 2f       	mov	r21, r20
    7df8:	60 e0       	ldi	r22, 0x00	; 0
    7dfa:	70 e0       	ldi	r23, 0x00	; 0
    7dfc:	80 e0       	ldi	r24, 0x00	; 0
    7dfe:	90 e8       	ldi	r25, 0x80	; 128
    7e00:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__udivmodsi4>
    7e04:	c9 01       	movw	r24, r18
    7e06:	da 01       	movw	r26, r20
    7e08:	6c 01       	movw	r12, r24
    7e0a:	7d 01       	movw	r14, r26
    7e0c:	20 e0       	ldi	r18, 0x00	; 0
    7e0e:	30 e0       	ldi	r19, 0x00	; 0
    7e10:	40 e0       	ldi	r20, 0x00	; 0
    7e12:	50 e0       	ldi	r21, 0x00	; 0
    7e14:	60 e0       	ldi	r22, 0x00	; 0
    7e16:	3e 01       	movw	r6, r28
    7e18:	88 24       	eor	r8, r8
    7e1a:	77 fc       	sbrc	r7, 7
    7e1c:	80 94       	com	r8
    7e1e:	98 2c       	mov	r9, r8
    7e20:	70 ed       	ldi	r23, 0xD0	; 208
    7e22:	b7 2e       	mov	r11, r23
    7e24:	ba 0c       	add	r11, r10
    7e26:	e9 e0       	ldi	r30, 0x09	; 9
    7e28:	eb 15       	cp	r30, r11
    7e2a:	70 f4       	brcc	.+28     	; 0x7e48 <strtol+0x16e>
    7e2c:	8a 2d       	mov	r24, r10
    7e2e:	81 54       	subi	r24, 0x41	; 65
    7e30:	8a 31       	cpi	r24, 0x1A	; 26
    7e32:	18 f4       	brcc	.+6      	; 0x7e3a <strtol+0x160>
    7e34:	99 ec       	ldi	r25, 0xC9	; 201
    7e36:	b9 2e       	mov	r11, r25
    7e38:	06 c0       	rjmp	.+12     	; 0x7e46 <strtol+0x16c>
    7e3a:	8a 2d       	mov	r24, r10
    7e3c:	81 56       	subi	r24, 0x61	; 97
    7e3e:	8a 31       	cpi	r24, 0x1A	; 26
    7e40:	50 f5       	brcc	.+84     	; 0x7e96 <strtol+0x1bc>
    7e42:	89 ea       	ldi	r24, 0xA9	; 169
    7e44:	b8 2e       	mov	r11, r24
    7e46:	ba 0c       	add	r11, r10
    7e48:	8b 2d       	mov	r24, r11
    7e4a:	90 e0       	ldi	r25, 0x00	; 0
    7e4c:	8c 17       	cp	r24, r28
    7e4e:	9d 07       	cpc	r25, r29
    7e50:	14 f5       	brge	.+68     	; 0x7e96 <strtol+0x1bc>
    7e52:	6f 3f       	cpi	r22, 0xFF	; 255
    7e54:	e1 f0       	breq	.+56     	; 0x7e8e <strtol+0x1b4>
    7e56:	c2 16       	cp	r12, r18
    7e58:	d3 06       	cpc	r13, r19
    7e5a:	e4 06       	cpc	r14, r20
    7e5c:	f5 06       	cpc	r15, r21
    7e5e:	b0 f0       	brcs	.+44     	; 0x7e8c <strtol+0x1b2>
    7e60:	ca 01       	movw	r24, r20
    7e62:	b9 01       	movw	r22, r18
    7e64:	a4 01       	movw	r20, r8
    7e66:	93 01       	movw	r18, r6
    7e68:	0e 94 86 3c 	call	0x790c	; 0x790c <__mulsi3>
    7e6c:	9b 01       	movw	r18, r22
    7e6e:	ac 01       	movw	r20, r24
    7e70:	2b 0d       	add	r18, r11
    7e72:	31 1d       	adc	r19, r1
    7e74:	41 1d       	adc	r20, r1
    7e76:	51 1d       	adc	r21, r1
    7e78:	21 30       	cpi	r18, 0x01	; 1
    7e7a:	f0 e0       	ldi	r31, 0x00	; 0
    7e7c:	3f 07       	cpc	r19, r31
    7e7e:	f0 e0       	ldi	r31, 0x00	; 0
    7e80:	4f 07       	cpc	r20, r31
    7e82:	f0 e8       	ldi	r31, 0x80	; 128
    7e84:	5f 07       	cpc	r21, r31
    7e86:	10 f4       	brcc	.+4      	; 0x7e8c <strtol+0x1b2>
    7e88:	61 e0       	ldi	r22, 0x01	; 1
    7e8a:	01 c0       	rjmp	.+2      	; 0x7e8e <strtol+0x1b4>
    7e8c:	6f ef       	ldi	r22, 0xFF	; 255
    7e8e:	f8 01       	movw	r30, r16
    7e90:	a1 90       	ld	r10, Z+
    7e92:	8f 01       	movw	r16, r30
    7e94:	c5 cf       	rjmp	.-118    	; 0x7e20 <strtol+0x146>
    7e96:	21 14       	cp	r2, r1
    7e98:	31 04       	cpc	r3, r1
    7e9a:	81 f0       	breq	.+32     	; 0x7ebc <strtol+0x1e2>
    7e9c:	66 23       	and	r22, r22
    7e9e:	31 f0       	breq	.+12     	; 0x7eac <strtol+0x1d2>
    7ea0:	01 50       	subi	r16, 0x01	; 1
    7ea2:	10 40       	sbci	r17, 0x00	; 0
    7ea4:	f1 01       	movw	r30, r2
    7ea6:	11 83       	std	Z+1, r17	; 0x01
    7ea8:	00 83       	st	Z, r16
    7eaa:	08 c0       	rjmp	.+16     	; 0x7ebc <strtol+0x1e2>
    7eac:	51 fe       	sbrs	r5, 1
    7eae:	1a c0       	rjmp	.+52     	; 0x7ee4 <strtol+0x20a>
    7eb0:	02 50       	subi	r16, 0x02	; 2
    7eb2:	10 40       	sbci	r17, 0x00	; 0
    7eb4:	f1 01       	movw	r30, r2
    7eb6:	11 83       	std	Z+1, r17	; 0x01
    7eb8:	00 83       	st	Z, r16
    7eba:	14 c0       	rjmp	.+40     	; 0x7ee4 <strtol+0x20a>
    7ebc:	67 ff       	sbrs	r22, 7
    7ebe:	12 c0       	rjmp	.+36     	; 0x7ee4 <strtol+0x20a>
    7ec0:	50 fc       	sbrc	r5, 0
    7ec2:	05 c0       	rjmp	.+10     	; 0x7ece <strtol+0x1f4>
    7ec4:	2f ef       	ldi	r18, 0xFF	; 255
    7ec6:	3f ef       	ldi	r19, 0xFF	; 255
    7ec8:	4f ef       	ldi	r20, 0xFF	; 255
    7eca:	5f e7       	ldi	r21, 0x7F	; 127
    7ecc:	04 c0       	rjmp	.+8      	; 0x7ed6 <strtol+0x1fc>
    7ece:	20 e0       	ldi	r18, 0x00	; 0
    7ed0:	30 e0       	ldi	r19, 0x00	; 0
    7ed2:	40 e0       	ldi	r20, 0x00	; 0
    7ed4:	50 e8       	ldi	r21, 0x80	; 128
    7ed6:	82 e2       	ldi	r24, 0x22	; 34
    7ed8:	90 e0       	ldi	r25, 0x00	; 0
    7eda:	90 93 e6 03 	sts	0x03E6, r25
    7ede:	80 93 e5 03 	sts	0x03E5, r24
    7ee2:	16 c0       	rjmp	.+44     	; 0x7f10 <strtol+0x236>
    7ee4:	50 fe       	sbrs	r5, 0
    7ee6:	08 c0       	rjmp	.+16     	; 0x7ef8 <strtol+0x21e>
    7ee8:	50 95       	com	r21
    7eea:	40 95       	com	r20
    7eec:	30 95       	com	r19
    7eee:	21 95       	neg	r18
    7ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ef2:	4f 4f       	sbci	r20, 0xFF	; 255
    7ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ef6:	0c c0       	rjmp	.+24     	; 0x7f10 <strtol+0x236>
    7ef8:	57 ff       	sbrs	r21, 7
    7efa:	0a c0       	rjmp	.+20     	; 0x7f10 <strtol+0x236>
    7efc:	82 e2       	ldi	r24, 0x22	; 34
    7efe:	90 e0       	ldi	r25, 0x00	; 0
    7f00:	90 93 e6 03 	sts	0x03E6, r25
    7f04:	80 93 e5 03 	sts	0x03E5, r24
    7f08:	2f ef       	ldi	r18, 0xFF	; 255
    7f0a:	3f ef       	ldi	r19, 0xFF	; 255
    7f0c:	4f ef       	ldi	r20, 0xFF	; 255
    7f0e:	5f e7       	ldi	r21, 0x7F	; 127
    7f10:	b9 01       	movw	r22, r18
    7f12:	ca 01       	movw	r24, r20
    7f14:	df 91       	pop	r29
    7f16:	cf 91       	pop	r28
    7f18:	1f 91       	pop	r17
    7f1a:	0f 91       	pop	r16
    7f1c:	ff 90       	pop	r15
    7f1e:	ef 90       	pop	r14
    7f20:	df 90       	pop	r13
    7f22:	cf 90       	pop	r12
    7f24:	bf 90       	pop	r11
    7f26:	af 90       	pop	r10
    7f28:	9f 90       	pop	r9
    7f2a:	8f 90       	pop	r8
    7f2c:	7f 90       	pop	r7
    7f2e:	6f 90       	pop	r6
    7f30:	5f 90       	pop	r5
    7f32:	3f 90       	pop	r3
    7f34:	2f 90       	pop	r2
    7f36:	08 95       	ret

00007f38 <isspace>:
    7f38:	91 11       	cpse	r25, r1
    7f3a:	5a c2       	rjmp	.+1204   	; 0x83f0 <__ctype_isfalse>
    7f3c:	80 32       	cpi	r24, 0x20	; 32
    7f3e:	19 f0       	breq	.+6      	; 0x7f46 <isspace+0xe>
    7f40:	89 50       	subi	r24, 0x09	; 9
    7f42:	85 50       	subi	r24, 0x05	; 5
    7f44:	d0 f7       	brcc	.-12     	; 0x7f3a <isspace+0x2>
    7f46:	08 95       	ret

00007f48 <memcmp>:
    7f48:	fb 01       	movw	r30, r22
    7f4a:	dc 01       	movw	r26, r24
    7f4c:	04 c0       	rjmp	.+8      	; 0x7f56 <memcmp+0xe>
    7f4e:	8d 91       	ld	r24, X+
    7f50:	01 90       	ld	r0, Z+
    7f52:	80 19       	sub	r24, r0
    7f54:	21 f4       	brne	.+8      	; 0x7f5e <memcmp+0x16>
    7f56:	41 50       	subi	r20, 0x01	; 1
    7f58:	50 40       	sbci	r21, 0x00	; 0
    7f5a:	c8 f7       	brcc	.-14     	; 0x7f4e <memcmp+0x6>
    7f5c:	88 1b       	sub	r24, r24
    7f5e:	99 0b       	sbc	r25, r25
    7f60:	08 95       	ret

00007f62 <memset>:
    7f62:	dc 01       	movw	r26, r24
    7f64:	01 c0       	rjmp	.+2      	; 0x7f68 <memset+0x6>
    7f66:	6d 93       	st	X+, r22
    7f68:	41 50       	subi	r20, 0x01	; 1
    7f6a:	50 40       	sbci	r21, 0x00	; 0
    7f6c:	e0 f7       	brcc	.-8      	; 0x7f66 <memset+0x4>
    7f6e:	08 95       	ret

00007f70 <fprintf_P>:
    7f70:	a0 e0       	ldi	r26, 0x00	; 0
    7f72:	b0 e0       	ldi	r27, 0x00	; 0
    7f74:	ee eb       	ldi	r30, 0xBE	; 190
    7f76:	ff e3       	ldi	r31, 0x3F	; 63
    7f78:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x1c>
    7f7c:	0f 81       	ldd	r16, Y+7	; 0x07
    7f7e:	18 85       	ldd	r17, Y+8	; 0x08
    7f80:	9e 01       	movw	r18, r28
    7f82:	25 5f       	subi	r18, 0xF5	; 245
    7f84:	3f 4f       	sbci	r19, 0xFF	; 255
    7f86:	f8 01       	movw	r30, r16
    7f88:	83 81       	ldd	r24, Z+3	; 0x03
    7f8a:	88 60       	ori	r24, 0x08	; 8
    7f8c:	83 83       	std	Z+3, r24	; 0x03
    7f8e:	c8 01       	movw	r24, r16
    7f90:	69 85       	ldd	r22, Y+9	; 0x09
    7f92:	7a 85       	ldd	r23, Y+10	; 0x0a
    7f94:	a9 01       	movw	r20, r18
    7f96:	0e 94 05 40 	call	0x800a	; 0x800a <vfprintf>
    7f9a:	f8 01       	movw	r30, r16
    7f9c:	23 81       	ldd	r18, Z+3	; 0x03
    7f9e:	27 7f       	andi	r18, 0xF7	; 247
    7fa0:	23 83       	std	Z+3, r18	; 0x03
    7fa2:	20 96       	adiw	r28, 0x00	; 0
    7fa4:	e4 e0       	ldi	r30, 0x04	; 4
    7fa6:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x1c>

00007faa <lround>:
    7faa:	cd d2       	rcall	.+1434   	; 0x8546 <__fp_splitA>
    7fac:	58 f1       	brcs	.+86     	; 0x8004 <lround+0x5a>
    7fae:	9e 57       	subi	r25, 0x7E	; 126
    7fb0:	58 f1       	brcs	.+86     	; 0x8008 <lround+0x5e>
    7fb2:	98 51       	subi	r25, 0x18	; 24
    7fb4:	a0 f0       	brcs	.+40     	; 0x7fde <lround+0x34>
    7fb6:	e9 f0       	breq	.+58     	; 0x7ff2 <lround+0x48>
    7fb8:	98 30       	cpi	r25, 0x08	; 8
    7fba:	20 f5       	brcc	.+72     	; 0x8004 <lround+0x5a>
    7fbc:	09 2e       	mov	r0, r25
    7fbe:	99 27       	eor	r25, r25
    7fc0:	66 0f       	add	r22, r22
    7fc2:	77 1f       	adc	r23, r23
    7fc4:	88 1f       	adc	r24, r24
    7fc6:	99 1f       	adc	r25, r25
    7fc8:	0a 94       	dec	r0
    7fca:	d1 f7       	brne	.-12     	; 0x7fc0 <lround+0x16>
    7fcc:	12 c0       	rjmp	.+36     	; 0x7ff2 <lround+0x48>
    7fce:	06 2e       	mov	r0, r22
    7fd0:	67 2f       	mov	r22, r23
    7fd2:	78 2f       	mov	r23, r24
    7fd4:	88 27       	eor	r24, r24
    7fd6:	98 5f       	subi	r25, 0xF8	; 248
    7fd8:	11 f4       	brne	.+4      	; 0x7fde <lround+0x34>
    7fda:	00 0c       	add	r0, r0
    7fdc:	07 c0       	rjmp	.+14     	; 0x7fec <lround+0x42>
    7fde:	99 3f       	cpi	r25, 0xF9	; 249
    7fe0:	b4 f3       	brlt	.-20     	; 0x7fce <lround+0x24>
    7fe2:	86 95       	lsr	r24
    7fe4:	77 95       	ror	r23
    7fe6:	67 95       	ror	r22
    7fe8:	93 95       	inc	r25
    7fea:	d9 f7       	brne	.-10     	; 0x7fe2 <lround+0x38>
    7fec:	61 1d       	adc	r22, r1
    7fee:	71 1d       	adc	r23, r1
    7ff0:	81 1d       	adc	r24, r1
    7ff2:	3e f4       	brtc	.+14     	; 0x8002 <lround+0x58>
    7ff4:	90 95       	com	r25
    7ff6:	80 95       	com	r24
    7ff8:	70 95       	com	r23
    7ffa:	61 95       	neg	r22
    7ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    8000:	9f 4f       	sbci	r25, 0xFF	; 255
    8002:	08 95       	ret
    8004:	68 94       	set
    8006:	ba c2       	rjmp	.+1396   	; 0x857c <__fp_szero>
    8008:	b8 c2       	rjmp	.+1392   	; 0x857a <__fp_zero>

0000800a <vfprintf>:
    800a:	ab e0       	ldi	r26, 0x0B	; 11
    800c:	b0 e0       	ldi	r27, 0x00	; 0
    800e:	eb e0       	ldi	r30, 0x0B	; 11
    8010:	f0 e4       	ldi	r31, 0x40	; 64
    8012:	0c 94 15 3d 	jmp	0x7a2a	; 0x7a2a <__prologue_saves__>
    8016:	3c 01       	movw	r6, r24
    8018:	2b 01       	movw	r4, r22
    801a:	5a 01       	movw	r10, r20
    801c:	fc 01       	movw	r30, r24
    801e:	17 82       	std	Z+7, r1	; 0x07
    8020:	16 82       	std	Z+6, r1	; 0x06
    8022:	83 81       	ldd	r24, Z+3	; 0x03
    8024:	81 fd       	sbrc	r24, 1
    8026:	03 c0       	rjmp	.+6      	; 0x802e <vfprintf+0x24>
    8028:	6f ef       	ldi	r22, 0xFF	; 255
    802a:	7f ef       	ldi	r23, 0xFF	; 255
    802c:	c6 c1       	rjmp	.+908    	; 0x83ba <vfprintf+0x3b0>
    802e:	9a e0       	ldi	r25, 0x0A	; 10
    8030:	89 2e       	mov	r8, r25
    8032:	1e 01       	movw	r2, r28
    8034:	08 94       	sec
    8036:	21 1c       	adc	r2, r1
    8038:	31 1c       	adc	r3, r1
    803a:	f3 01       	movw	r30, r6
    803c:	23 81       	ldd	r18, Z+3	; 0x03
    803e:	f2 01       	movw	r30, r4
    8040:	23 fd       	sbrc	r18, 3
    8042:	85 91       	lpm	r24, Z+
    8044:	23 ff       	sbrs	r18, 3
    8046:	81 91       	ld	r24, Z+
    8048:	2f 01       	movw	r4, r30
    804a:	88 23       	and	r24, r24
    804c:	09 f4       	brne	.+2      	; 0x8050 <vfprintf+0x46>
    804e:	b2 c1       	rjmp	.+868    	; 0x83b4 <vfprintf+0x3aa>
    8050:	85 32       	cpi	r24, 0x25	; 37
    8052:	39 f4       	brne	.+14     	; 0x8062 <vfprintf+0x58>
    8054:	23 fd       	sbrc	r18, 3
    8056:	85 91       	lpm	r24, Z+
    8058:	23 ff       	sbrs	r18, 3
    805a:	81 91       	ld	r24, Z+
    805c:	2f 01       	movw	r4, r30
    805e:	85 32       	cpi	r24, 0x25	; 37
    8060:	29 f4       	brne	.+10     	; 0x806c <vfprintf+0x62>
    8062:	90 e0       	ldi	r25, 0x00	; 0
    8064:	b3 01       	movw	r22, r6
    8066:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    806a:	e7 cf       	rjmp	.-50     	; 0x803a <vfprintf+0x30>
    806c:	98 2f       	mov	r25, r24
    806e:	ff 24       	eor	r15, r15
    8070:	ee 24       	eor	r14, r14
    8072:	99 24       	eor	r9, r9
    8074:	ff e1       	ldi	r31, 0x1F	; 31
    8076:	ff 15       	cp	r31, r15
    8078:	d0 f0       	brcs	.+52     	; 0x80ae <vfprintf+0xa4>
    807a:	9b 32       	cpi	r25, 0x2B	; 43
    807c:	69 f0       	breq	.+26     	; 0x8098 <vfprintf+0x8e>
    807e:	9c 32       	cpi	r25, 0x2C	; 44
    8080:	28 f4       	brcc	.+10     	; 0x808c <vfprintf+0x82>
    8082:	90 32       	cpi	r25, 0x20	; 32
    8084:	59 f0       	breq	.+22     	; 0x809c <vfprintf+0x92>
    8086:	93 32       	cpi	r25, 0x23	; 35
    8088:	91 f4       	brne	.+36     	; 0x80ae <vfprintf+0xa4>
    808a:	0e c0       	rjmp	.+28     	; 0x80a8 <vfprintf+0x9e>
    808c:	9d 32       	cpi	r25, 0x2D	; 45
    808e:	49 f0       	breq	.+18     	; 0x80a2 <vfprintf+0x98>
    8090:	90 33       	cpi	r25, 0x30	; 48
    8092:	69 f4       	brne	.+26     	; 0x80ae <vfprintf+0xa4>
    8094:	41 e0       	ldi	r20, 0x01	; 1
    8096:	24 c0       	rjmp	.+72     	; 0x80e0 <vfprintf+0xd6>
    8098:	52 e0       	ldi	r21, 0x02	; 2
    809a:	f5 2a       	or	r15, r21
    809c:	84 e0       	ldi	r24, 0x04	; 4
    809e:	f8 2a       	or	r15, r24
    80a0:	28 c0       	rjmp	.+80     	; 0x80f2 <vfprintf+0xe8>
    80a2:	98 e0       	ldi	r25, 0x08	; 8
    80a4:	f9 2a       	or	r15, r25
    80a6:	25 c0       	rjmp	.+74     	; 0x80f2 <vfprintf+0xe8>
    80a8:	e0 e1       	ldi	r30, 0x10	; 16
    80aa:	fe 2a       	or	r15, r30
    80ac:	22 c0       	rjmp	.+68     	; 0x80f2 <vfprintf+0xe8>
    80ae:	f7 fc       	sbrc	r15, 7
    80b0:	29 c0       	rjmp	.+82     	; 0x8104 <vfprintf+0xfa>
    80b2:	89 2f       	mov	r24, r25
    80b4:	80 53       	subi	r24, 0x30	; 48
    80b6:	8a 30       	cpi	r24, 0x0A	; 10
    80b8:	70 f4       	brcc	.+28     	; 0x80d6 <vfprintf+0xcc>
    80ba:	f6 fe       	sbrs	r15, 6
    80bc:	05 c0       	rjmp	.+10     	; 0x80c8 <vfprintf+0xbe>
    80be:	98 9c       	mul	r9, r8
    80c0:	90 2c       	mov	r9, r0
    80c2:	11 24       	eor	r1, r1
    80c4:	98 0e       	add	r9, r24
    80c6:	15 c0       	rjmp	.+42     	; 0x80f2 <vfprintf+0xe8>
    80c8:	e8 9c       	mul	r14, r8
    80ca:	e0 2c       	mov	r14, r0
    80cc:	11 24       	eor	r1, r1
    80ce:	e8 0e       	add	r14, r24
    80d0:	f0 e2       	ldi	r31, 0x20	; 32
    80d2:	ff 2a       	or	r15, r31
    80d4:	0e c0       	rjmp	.+28     	; 0x80f2 <vfprintf+0xe8>
    80d6:	9e 32       	cpi	r25, 0x2E	; 46
    80d8:	29 f4       	brne	.+10     	; 0x80e4 <vfprintf+0xda>
    80da:	f6 fc       	sbrc	r15, 6
    80dc:	6b c1       	rjmp	.+726    	; 0x83b4 <vfprintf+0x3aa>
    80de:	40 e4       	ldi	r20, 0x40	; 64
    80e0:	f4 2a       	or	r15, r20
    80e2:	07 c0       	rjmp	.+14     	; 0x80f2 <vfprintf+0xe8>
    80e4:	9c 36       	cpi	r25, 0x6C	; 108
    80e6:	19 f4       	brne	.+6      	; 0x80ee <vfprintf+0xe4>
    80e8:	50 e8       	ldi	r21, 0x80	; 128
    80ea:	f5 2a       	or	r15, r21
    80ec:	02 c0       	rjmp	.+4      	; 0x80f2 <vfprintf+0xe8>
    80ee:	98 36       	cpi	r25, 0x68	; 104
    80f0:	49 f4       	brne	.+18     	; 0x8104 <vfprintf+0xfa>
    80f2:	f2 01       	movw	r30, r4
    80f4:	23 fd       	sbrc	r18, 3
    80f6:	95 91       	lpm	r25, Z+
    80f8:	23 ff       	sbrs	r18, 3
    80fa:	91 91       	ld	r25, Z+
    80fc:	2f 01       	movw	r4, r30
    80fe:	99 23       	and	r25, r25
    8100:	09 f0       	breq	.+2      	; 0x8104 <vfprintf+0xfa>
    8102:	b8 cf       	rjmp	.-144    	; 0x8074 <vfprintf+0x6a>
    8104:	89 2f       	mov	r24, r25
    8106:	85 54       	subi	r24, 0x45	; 69
    8108:	83 30       	cpi	r24, 0x03	; 3
    810a:	18 f0       	brcs	.+6      	; 0x8112 <vfprintf+0x108>
    810c:	80 52       	subi	r24, 0x20	; 32
    810e:	83 30       	cpi	r24, 0x03	; 3
    8110:	38 f4       	brcc	.+14     	; 0x8120 <vfprintf+0x116>
    8112:	44 e0       	ldi	r20, 0x04	; 4
    8114:	50 e0       	ldi	r21, 0x00	; 0
    8116:	a4 0e       	add	r10, r20
    8118:	b5 1e       	adc	r11, r21
    811a:	5f e3       	ldi	r21, 0x3F	; 63
    811c:	59 83       	std	Y+1, r21	; 0x01
    811e:	0f c0       	rjmp	.+30     	; 0x813e <vfprintf+0x134>
    8120:	93 36       	cpi	r25, 0x63	; 99
    8122:	31 f0       	breq	.+12     	; 0x8130 <vfprintf+0x126>
    8124:	93 37       	cpi	r25, 0x73	; 115
    8126:	79 f0       	breq	.+30     	; 0x8146 <vfprintf+0x13c>
    8128:	93 35       	cpi	r25, 0x53	; 83
    812a:	09 f0       	breq	.+2      	; 0x812e <vfprintf+0x124>
    812c:	56 c0       	rjmp	.+172    	; 0x81da <vfprintf+0x1d0>
    812e:	20 c0       	rjmp	.+64     	; 0x8170 <vfprintf+0x166>
    8130:	f5 01       	movw	r30, r10
    8132:	80 81       	ld	r24, Z
    8134:	89 83       	std	Y+1, r24	; 0x01
    8136:	42 e0       	ldi	r20, 0x02	; 2
    8138:	50 e0       	ldi	r21, 0x00	; 0
    813a:	a4 0e       	add	r10, r20
    813c:	b5 1e       	adc	r11, r21
    813e:	61 01       	movw	r12, r2
    8140:	01 e0       	ldi	r16, 0x01	; 1
    8142:	10 e0       	ldi	r17, 0x00	; 0
    8144:	12 c0       	rjmp	.+36     	; 0x816a <vfprintf+0x160>
    8146:	f5 01       	movw	r30, r10
    8148:	c0 80       	ld	r12, Z
    814a:	d1 80       	ldd	r13, Z+1	; 0x01
    814c:	f6 fc       	sbrc	r15, 6
    814e:	03 c0       	rjmp	.+6      	; 0x8156 <vfprintf+0x14c>
    8150:	6f ef       	ldi	r22, 0xFF	; 255
    8152:	7f ef       	ldi	r23, 0xFF	; 255
    8154:	02 c0       	rjmp	.+4      	; 0x815a <vfprintf+0x150>
    8156:	69 2d       	mov	r22, r9
    8158:	70 e0       	ldi	r23, 0x00	; 0
    815a:	42 e0       	ldi	r20, 0x02	; 2
    815c:	50 e0       	ldi	r21, 0x00	; 0
    815e:	a4 0e       	add	r10, r20
    8160:	b5 1e       	adc	r11, r21
    8162:	c6 01       	movw	r24, r12
    8164:	0e 94 06 42 	call	0x840c	; 0x840c <strnlen>
    8168:	8c 01       	movw	r16, r24
    816a:	5f e7       	ldi	r21, 0x7F	; 127
    816c:	f5 22       	and	r15, r21
    816e:	14 c0       	rjmp	.+40     	; 0x8198 <vfprintf+0x18e>
    8170:	f5 01       	movw	r30, r10
    8172:	c0 80       	ld	r12, Z
    8174:	d1 80       	ldd	r13, Z+1	; 0x01
    8176:	f6 fc       	sbrc	r15, 6
    8178:	03 c0       	rjmp	.+6      	; 0x8180 <vfprintf+0x176>
    817a:	6f ef       	ldi	r22, 0xFF	; 255
    817c:	7f ef       	ldi	r23, 0xFF	; 255
    817e:	02 c0       	rjmp	.+4      	; 0x8184 <vfprintf+0x17a>
    8180:	69 2d       	mov	r22, r9
    8182:	70 e0       	ldi	r23, 0x00	; 0
    8184:	42 e0       	ldi	r20, 0x02	; 2
    8186:	50 e0       	ldi	r21, 0x00	; 0
    8188:	a4 0e       	add	r10, r20
    818a:	b5 1e       	adc	r11, r21
    818c:	c6 01       	movw	r24, r12
    818e:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <strnlen_P>
    8192:	8c 01       	movw	r16, r24
    8194:	50 e8       	ldi	r21, 0x80	; 128
    8196:	f5 2a       	or	r15, r21
    8198:	f3 fe       	sbrs	r15, 3
    819a:	07 c0       	rjmp	.+14     	; 0x81aa <vfprintf+0x1a0>
    819c:	1a c0       	rjmp	.+52     	; 0x81d2 <vfprintf+0x1c8>
    819e:	80 e2       	ldi	r24, 0x20	; 32
    81a0:	90 e0       	ldi	r25, 0x00	; 0
    81a2:	b3 01       	movw	r22, r6
    81a4:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    81a8:	ea 94       	dec	r14
    81aa:	8e 2d       	mov	r24, r14
    81ac:	90 e0       	ldi	r25, 0x00	; 0
    81ae:	08 17       	cp	r16, r24
    81b0:	19 07       	cpc	r17, r25
    81b2:	a8 f3       	brcs	.-22     	; 0x819e <vfprintf+0x194>
    81b4:	0e c0       	rjmp	.+28     	; 0x81d2 <vfprintf+0x1c8>
    81b6:	f6 01       	movw	r30, r12
    81b8:	f7 fc       	sbrc	r15, 7
    81ba:	85 91       	lpm	r24, Z+
    81bc:	f7 fe       	sbrs	r15, 7
    81be:	81 91       	ld	r24, Z+
    81c0:	6f 01       	movw	r12, r30
    81c2:	90 e0       	ldi	r25, 0x00	; 0
    81c4:	b3 01       	movw	r22, r6
    81c6:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    81ca:	e1 10       	cpse	r14, r1
    81cc:	ea 94       	dec	r14
    81ce:	01 50       	subi	r16, 0x01	; 1
    81d0:	10 40       	sbci	r17, 0x00	; 0
    81d2:	01 15       	cp	r16, r1
    81d4:	11 05       	cpc	r17, r1
    81d6:	79 f7       	brne	.-34     	; 0x81b6 <vfprintf+0x1ac>
    81d8:	ea c0       	rjmp	.+468    	; 0x83ae <vfprintf+0x3a4>
    81da:	94 36       	cpi	r25, 0x64	; 100
    81dc:	11 f0       	breq	.+4      	; 0x81e2 <vfprintf+0x1d8>
    81de:	99 36       	cpi	r25, 0x69	; 105
    81e0:	69 f5       	brne	.+90     	; 0x823c <vfprintf+0x232>
    81e2:	f7 fe       	sbrs	r15, 7
    81e4:	08 c0       	rjmp	.+16     	; 0x81f6 <vfprintf+0x1ec>
    81e6:	f5 01       	movw	r30, r10
    81e8:	20 81       	ld	r18, Z
    81ea:	31 81       	ldd	r19, Z+1	; 0x01
    81ec:	42 81       	ldd	r20, Z+2	; 0x02
    81ee:	53 81       	ldd	r21, Z+3	; 0x03
    81f0:	84 e0       	ldi	r24, 0x04	; 4
    81f2:	90 e0       	ldi	r25, 0x00	; 0
    81f4:	0a c0       	rjmp	.+20     	; 0x820a <vfprintf+0x200>
    81f6:	f5 01       	movw	r30, r10
    81f8:	80 81       	ld	r24, Z
    81fa:	91 81       	ldd	r25, Z+1	; 0x01
    81fc:	9c 01       	movw	r18, r24
    81fe:	44 27       	eor	r20, r20
    8200:	37 fd       	sbrc	r19, 7
    8202:	40 95       	com	r20
    8204:	54 2f       	mov	r21, r20
    8206:	82 e0       	ldi	r24, 0x02	; 2
    8208:	90 e0       	ldi	r25, 0x00	; 0
    820a:	a8 0e       	add	r10, r24
    820c:	b9 1e       	adc	r11, r25
    820e:	9f e6       	ldi	r25, 0x6F	; 111
    8210:	f9 22       	and	r15, r25
    8212:	57 ff       	sbrs	r21, 7
    8214:	09 c0       	rjmp	.+18     	; 0x8228 <vfprintf+0x21e>
    8216:	50 95       	com	r21
    8218:	40 95       	com	r20
    821a:	30 95       	com	r19
    821c:	21 95       	neg	r18
    821e:	3f 4f       	sbci	r19, 0xFF	; 255
    8220:	4f 4f       	sbci	r20, 0xFF	; 255
    8222:	5f 4f       	sbci	r21, 0xFF	; 255
    8224:	e0 e8       	ldi	r30, 0x80	; 128
    8226:	fe 2a       	or	r15, r30
    8228:	ca 01       	movw	r24, r20
    822a:	b9 01       	movw	r22, r18
    822c:	a1 01       	movw	r20, r2
    822e:	2a e0       	ldi	r18, 0x0A	; 10
    8230:	30 e0       	ldi	r19, 0x00	; 0
    8232:	0e 94 3d 42 	call	0x847a	; 0x847a <__ultoa_invert>
    8236:	d8 2e       	mov	r13, r24
    8238:	d2 18       	sub	r13, r2
    823a:	40 c0       	rjmp	.+128    	; 0x82bc <vfprintf+0x2b2>
    823c:	95 37       	cpi	r25, 0x75	; 117
    823e:	29 f4       	brne	.+10     	; 0x824a <vfprintf+0x240>
    8240:	1f 2d       	mov	r17, r15
    8242:	1f 7e       	andi	r17, 0xEF	; 239
    8244:	2a e0       	ldi	r18, 0x0A	; 10
    8246:	30 e0       	ldi	r19, 0x00	; 0
    8248:	1d c0       	rjmp	.+58     	; 0x8284 <vfprintf+0x27a>
    824a:	1f 2d       	mov	r17, r15
    824c:	19 7f       	andi	r17, 0xF9	; 249
    824e:	9f 36       	cpi	r25, 0x6F	; 111
    8250:	61 f0       	breq	.+24     	; 0x826a <vfprintf+0x260>
    8252:	90 37       	cpi	r25, 0x70	; 112
    8254:	20 f4       	brcc	.+8      	; 0x825e <vfprintf+0x254>
    8256:	98 35       	cpi	r25, 0x58	; 88
    8258:	09 f0       	breq	.+2      	; 0x825c <vfprintf+0x252>
    825a:	ac c0       	rjmp	.+344    	; 0x83b4 <vfprintf+0x3aa>
    825c:	0f c0       	rjmp	.+30     	; 0x827c <vfprintf+0x272>
    825e:	90 37       	cpi	r25, 0x70	; 112
    8260:	39 f0       	breq	.+14     	; 0x8270 <vfprintf+0x266>
    8262:	98 37       	cpi	r25, 0x78	; 120
    8264:	09 f0       	breq	.+2      	; 0x8268 <vfprintf+0x25e>
    8266:	a6 c0       	rjmp	.+332    	; 0x83b4 <vfprintf+0x3aa>
    8268:	04 c0       	rjmp	.+8      	; 0x8272 <vfprintf+0x268>
    826a:	28 e0       	ldi	r18, 0x08	; 8
    826c:	30 e0       	ldi	r19, 0x00	; 0
    826e:	0a c0       	rjmp	.+20     	; 0x8284 <vfprintf+0x27a>
    8270:	10 61       	ori	r17, 0x10	; 16
    8272:	14 fd       	sbrc	r17, 4
    8274:	14 60       	ori	r17, 0x04	; 4
    8276:	20 e1       	ldi	r18, 0x10	; 16
    8278:	30 e0       	ldi	r19, 0x00	; 0
    827a:	04 c0       	rjmp	.+8      	; 0x8284 <vfprintf+0x27a>
    827c:	14 fd       	sbrc	r17, 4
    827e:	16 60       	ori	r17, 0x06	; 6
    8280:	20 e1       	ldi	r18, 0x10	; 16
    8282:	32 e0       	ldi	r19, 0x02	; 2
    8284:	17 ff       	sbrs	r17, 7
    8286:	08 c0       	rjmp	.+16     	; 0x8298 <vfprintf+0x28e>
    8288:	f5 01       	movw	r30, r10
    828a:	60 81       	ld	r22, Z
    828c:	71 81       	ldd	r23, Z+1	; 0x01
    828e:	82 81       	ldd	r24, Z+2	; 0x02
    8290:	93 81       	ldd	r25, Z+3	; 0x03
    8292:	44 e0       	ldi	r20, 0x04	; 4
    8294:	50 e0       	ldi	r21, 0x00	; 0
    8296:	08 c0       	rjmp	.+16     	; 0x82a8 <vfprintf+0x29e>
    8298:	f5 01       	movw	r30, r10
    829a:	80 81       	ld	r24, Z
    829c:	91 81       	ldd	r25, Z+1	; 0x01
    829e:	bc 01       	movw	r22, r24
    82a0:	80 e0       	ldi	r24, 0x00	; 0
    82a2:	90 e0       	ldi	r25, 0x00	; 0
    82a4:	42 e0       	ldi	r20, 0x02	; 2
    82a6:	50 e0       	ldi	r21, 0x00	; 0
    82a8:	a4 0e       	add	r10, r20
    82aa:	b5 1e       	adc	r11, r21
    82ac:	a1 01       	movw	r20, r2
    82ae:	0e 94 3d 42 	call	0x847a	; 0x847a <__ultoa_invert>
    82b2:	d8 2e       	mov	r13, r24
    82b4:	d2 18       	sub	r13, r2
    82b6:	8f e7       	ldi	r24, 0x7F	; 127
    82b8:	f8 2e       	mov	r15, r24
    82ba:	f1 22       	and	r15, r17
    82bc:	f6 fe       	sbrs	r15, 6
    82be:	0b c0       	rjmp	.+22     	; 0x82d6 <vfprintf+0x2cc>
    82c0:	5e ef       	ldi	r21, 0xFE	; 254
    82c2:	f5 22       	and	r15, r21
    82c4:	d9 14       	cp	r13, r9
    82c6:	38 f4       	brcc	.+14     	; 0x82d6 <vfprintf+0x2cc>
    82c8:	f4 fe       	sbrs	r15, 4
    82ca:	07 c0       	rjmp	.+14     	; 0x82da <vfprintf+0x2d0>
    82cc:	f2 fc       	sbrc	r15, 2
    82ce:	05 c0       	rjmp	.+10     	; 0x82da <vfprintf+0x2d0>
    82d0:	8f ee       	ldi	r24, 0xEF	; 239
    82d2:	f8 22       	and	r15, r24
    82d4:	02 c0       	rjmp	.+4      	; 0x82da <vfprintf+0x2d0>
    82d6:	1d 2d       	mov	r17, r13
    82d8:	01 c0       	rjmp	.+2      	; 0x82dc <vfprintf+0x2d2>
    82da:	19 2d       	mov	r17, r9
    82dc:	f4 fe       	sbrs	r15, 4
    82de:	0d c0       	rjmp	.+26     	; 0x82fa <vfprintf+0x2f0>
    82e0:	fe 01       	movw	r30, r28
    82e2:	ed 0d       	add	r30, r13
    82e4:	f1 1d       	adc	r31, r1
    82e6:	80 81       	ld	r24, Z
    82e8:	80 33       	cpi	r24, 0x30	; 48
    82ea:	19 f4       	brne	.+6      	; 0x82f2 <vfprintf+0x2e8>
    82ec:	99 ee       	ldi	r25, 0xE9	; 233
    82ee:	f9 22       	and	r15, r25
    82f0:	08 c0       	rjmp	.+16     	; 0x8302 <vfprintf+0x2f8>
    82f2:	1f 5f       	subi	r17, 0xFF	; 255
    82f4:	f2 fe       	sbrs	r15, 2
    82f6:	05 c0       	rjmp	.+10     	; 0x8302 <vfprintf+0x2f8>
    82f8:	03 c0       	rjmp	.+6      	; 0x8300 <vfprintf+0x2f6>
    82fa:	8f 2d       	mov	r24, r15
    82fc:	86 78       	andi	r24, 0x86	; 134
    82fe:	09 f0       	breq	.+2      	; 0x8302 <vfprintf+0x2f8>
    8300:	1f 5f       	subi	r17, 0xFF	; 255
    8302:	0f 2d       	mov	r16, r15
    8304:	f3 fc       	sbrc	r15, 3
    8306:	14 c0       	rjmp	.+40     	; 0x8330 <vfprintf+0x326>
    8308:	f0 fe       	sbrs	r15, 0
    830a:	0f c0       	rjmp	.+30     	; 0x832a <vfprintf+0x320>
    830c:	1e 15       	cp	r17, r14
    830e:	10 f0       	brcs	.+4      	; 0x8314 <vfprintf+0x30a>
    8310:	9d 2c       	mov	r9, r13
    8312:	0b c0       	rjmp	.+22     	; 0x832a <vfprintf+0x320>
    8314:	9d 2c       	mov	r9, r13
    8316:	9e 0c       	add	r9, r14
    8318:	91 1a       	sub	r9, r17
    831a:	1e 2d       	mov	r17, r14
    831c:	06 c0       	rjmp	.+12     	; 0x832a <vfprintf+0x320>
    831e:	80 e2       	ldi	r24, 0x20	; 32
    8320:	90 e0       	ldi	r25, 0x00	; 0
    8322:	b3 01       	movw	r22, r6
    8324:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    8328:	1f 5f       	subi	r17, 0xFF	; 255
    832a:	1e 15       	cp	r17, r14
    832c:	c0 f3       	brcs	.-16     	; 0x831e <vfprintf+0x314>
    832e:	04 c0       	rjmp	.+8      	; 0x8338 <vfprintf+0x32e>
    8330:	1e 15       	cp	r17, r14
    8332:	10 f4       	brcc	.+4      	; 0x8338 <vfprintf+0x32e>
    8334:	e1 1a       	sub	r14, r17
    8336:	01 c0       	rjmp	.+2      	; 0x833a <vfprintf+0x330>
    8338:	ee 24       	eor	r14, r14
    833a:	04 ff       	sbrs	r16, 4
    833c:	0f c0       	rjmp	.+30     	; 0x835c <vfprintf+0x352>
    833e:	80 e3       	ldi	r24, 0x30	; 48
    8340:	90 e0       	ldi	r25, 0x00	; 0
    8342:	b3 01       	movw	r22, r6
    8344:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    8348:	02 ff       	sbrs	r16, 2
    834a:	1d c0       	rjmp	.+58     	; 0x8386 <vfprintf+0x37c>
    834c:	01 fd       	sbrc	r16, 1
    834e:	03 c0       	rjmp	.+6      	; 0x8356 <vfprintf+0x34c>
    8350:	88 e7       	ldi	r24, 0x78	; 120
    8352:	90 e0       	ldi	r25, 0x00	; 0
    8354:	0e c0       	rjmp	.+28     	; 0x8372 <vfprintf+0x368>
    8356:	88 e5       	ldi	r24, 0x58	; 88
    8358:	90 e0       	ldi	r25, 0x00	; 0
    835a:	0b c0       	rjmp	.+22     	; 0x8372 <vfprintf+0x368>
    835c:	80 2f       	mov	r24, r16
    835e:	86 78       	andi	r24, 0x86	; 134
    8360:	91 f0       	breq	.+36     	; 0x8386 <vfprintf+0x37c>
    8362:	01 ff       	sbrs	r16, 1
    8364:	02 c0       	rjmp	.+4      	; 0x836a <vfprintf+0x360>
    8366:	8b e2       	ldi	r24, 0x2B	; 43
    8368:	01 c0       	rjmp	.+2      	; 0x836c <vfprintf+0x362>
    836a:	80 e2       	ldi	r24, 0x20	; 32
    836c:	f7 fc       	sbrc	r15, 7
    836e:	8d e2       	ldi	r24, 0x2D	; 45
    8370:	90 e0       	ldi	r25, 0x00	; 0
    8372:	b3 01       	movw	r22, r6
    8374:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    8378:	06 c0       	rjmp	.+12     	; 0x8386 <vfprintf+0x37c>
    837a:	80 e3       	ldi	r24, 0x30	; 48
    837c:	90 e0       	ldi	r25, 0x00	; 0
    837e:	b3 01       	movw	r22, r6
    8380:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    8384:	9a 94       	dec	r9
    8386:	d9 14       	cp	r13, r9
    8388:	c0 f3       	brcs	.-16     	; 0x837a <vfprintf+0x370>
    838a:	da 94       	dec	r13
    838c:	f1 01       	movw	r30, r2
    838e:	ed 0d       	add	r30, r13
    8390:	f1 1d       	adc	r31, r1
    8392:	80 81       	ld	r24, Z
    8394:	90 e0       	ldi	r25, 0x00	; 0
    8396:	b3 01       	movw	r22, r6
    8398:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    839c:	dd 20       	and	r13, r13
    839e:	a9 f7       	brne	.-22     	; 0x838a <vfprintf+0x380>
    83a0:	06 c0       	rjmp	.+12     	; 0x83ae <vfprintf+0x3a4>
    83a2:	80 e2       	ldi	r24, 0x20	; 32
    83a4:	90 e0       	ldi	r25, 0x00	; 0
    83a6:	b3 01       	movw	r22, r6
    83a8:	0e 94 11 42 	call	0x8422	; 0x8422 <fputc>
    83ac:	ea 94       	dec	r14
    83ae:	ee 20       	and	r14, r14
    83b0:	c1 f7       	brne	.-16     	; 0x83a2 <vfprintf+0x398>
    83b2:	43 ce       	rjmp	.-890    	; 0x803a <vfprintf+0x30>
    83b4:	f3 01       	movw	r30, r6
    83b6:	66 81       	ldd	r22, Z+6	; 0x06
    83b8:	77 81       	ldd	r23, Z+7	; 0x07
    83ba:	cb 01       	movw	r24, r22
    83bc:	2b 96       	adiw	r28, 0x0b	; 11
    83be:	e2 e1       	ldi	r30, 0x12	; 18
    83c0:	0c 94 31 3d 	jmp	0x7a62	; 0x7a62 <__epilogue_restores__>

000083c4 <__eerd_byte_m644p>:
    83c4:	f9 99       	sbic	0x1f, 1	; 31
    83c6:	fe cf       	rjmp	.-4      	; 0x83c4 <__eerd_byte_m644p>
    83c8:	92 bd       	out	0x22, r25	; 34
    83ca:	81 bd       	out	0x21, r24	; 33
    83cc:	f8 9a       	sbi	0x1f, 0	; 31
    83ce:	99 27       	eor	r25, r25
    83d0:	80 b5       	in	r24, 0x20	; 32
    83d2:	08 95       	ret

000083d4 <__eewr_byte_m644p>:
    83d4:	26 2f       	mov	r18, r22

000083d6 <__eewr_r18_m644p>:
    83d6:	f9 99       	sbic	0x1f, 1	; 31
    83d8:	fe cf       	rjmp	.-4      	; 0x83d6 <__eewr_r18_m644p>
    83da:	1f ba       	out	0x1f, r1	; 31
    83dc:	92 bd       	out	0x22, r25	; 34
    83de:	81 bd       	out	0x21, r24	; 33
    83e0:	20 bd       	out	0x20, r18	; 32
    83e2:	0f b6       	in	r0, 0x3f	; 63
    83e4:	f8 94       	cli
    83e6:	fa 9a       	sbi	0x1f, 2	; 31
    83e8:	f9 9a       	sbi	0x1f, 1	; 31
    83ea:	0f be       	out	0x3f, r0	; 63
    83ec:	01 96       	adiw	r24, 0x01	; 1
    83ee:	08 95       	ret

000083f0 <__ctype_isfalse>:
    83f0:	99 27       	eor	r25, r25
    83f2:	88 27       	eor	r24, r24

000083f4 <__ctype_istrue>:
    83f4:	08 95       	ret

000083f6 <strnlen_P>:
    83f6:	fc 01       	movw	r30, r24
    83f8:	05 90       	lpm	r0, Z+
    83fa:	61 50       	subi	r22, 0x01	; 1
    83fc:	70 40       	sbci	r23, 0x00	; 0
    83fe:	01 10       	cpse	r0, r1
    8400:	d8 f7       	brcc	.-10     	; 0x83f8 <strnlen_P+0x2>
    8402:	80 95       	com	r24
    8404:	90 95       	com	r25
    8406:	8e 0f       	add	r24, r30
    8408:	9f 1f       	adc	r25, r31
    840a:	08 95       	ret

0000840c <strnlen>:
    840c:	fc 01       	movw	r30, r24
    840e:	61 50       	subi	r22, 0x01	; 1
    8410:	70 40       	sbci	r23, 0x00	; 0
    8412:	01 90       	ld	r0, Z+
    8414:	01 10       	cpse	r0, r1
    8416:	d8 f7       	brcc	.-10     	; 0x840e <strnlen+0x2>
    8418:	80 95       	com	r24
    841a:	90 95       	com	r25
    841c:	8e 0f       	add	r24, r30
    841e:	9f 1f       	adc	r25, r31
    8420:	08 95       	ret

00008422 <fputc>:
    8422:	0f 93       	push	r16
    8424:	1f 93       	push	r17
    8426:	cf 93       	push	r28
    8428:	df 93       	push	r29
    842a:	8c 01       	movw	r16, r24
    842c:	eb 01       	movw	r28, r22
    842e:	8b 81       	ldd	r24, Y+3	; 0x03
    8430:	81 ff       	sbrs	r24, 1
    8432:	1b c0       	rjmp	.+54     	; 0x846a <fputc+0x48>
    8434:	82 ff       	sbrs	r24, 2
    8436:	0d c0       	rjmp	.+26     	; 0x8452 <fputc+0x30>
    8438:	2e 81       	ldd	r18, Y+6	; 0x06
    843a:	3f 81       	ldd	r19, Y+7	; 0x07
    843c:	8c 81       	ldd	r24, Y+4	; 0x04
    843e:	9d 81       	ldd	r25, Y+5	; 0x05
    8440:	28 17       	cp	r18, r24
    8442:	39 07       	cpc	r19, r25
    8444:	64 f4       	brge	.+24     	; 0x845e <fputc+0x3c>
    8446:	e8 81       	ld	r30, Y
    8448:	f9 81       	ldd	r31, Y+1	; 0x01
    844a:	01 93       	st	Z+, r16
    844c:	f9 83       	std	Y+1, r31	; 0x01
    844e:	e8 83       	st	Y, r30
    8450:	06 c0       	rjmp	.+12     	; 0x845e <fputc+0x3c>
    8452:	e8 85       	ldd	r30, Y+8	; 0x08
    8454:	f9 85       	ldd	r31, Y+9	; 0x09
    8456:	80 2f       	mov	r24, r16
    8458:	09 95       	icall
    845a:	89 2b       	or	r24, r25
    845c:	31 f4       	brne	.+12     	; 0x846a <fputc+0x48>
    845e:	8e 81       	ldd	r24, Y+6	; 0x06
    8460:	9f 81       	ldd	r25, Y+7	; 0x07
    8462:	01 96       	adiw	r24, 0x01	; 1
    8464:	9f 83       	std	Y+7, r25	; 0x07
    8466:	8e 83       	std	Y+6, r24	; 0x06
    8468:	02 c0       	rjmp	.+4      	; 0x846e <fputc+0x4c>
    846a:	0f ef       	ldi	r16, 0xFF	; 255
    846c:	1f ef       	ldi	r17, 0xFF	; 255
    846e:	c8 01       	movw	r24, r16
    8470:	df 91       	pop	r29
    8472:	cf 91       	pop	r28
    8474:	1f 91       	pop	r17
    8476:	0f 91       	pop	r16
    8478:	08 95       	ret

0000847a <__ultoa_invert>:
    847a:	fa 01       	movw	r30, r20
    847c:	aa 27       	eor	r26, r26
    847e:	28 30       	cpi	r18, 0x08	; 8
    8480:	51 f1       	breq	.+84     	; 0x84d6 <__ultoa_invert+0x5c>
    8482:	20 31       	cpi	r18, 0x10	; 16
    8484:	81 f1       	breq	.+96     	; 0x84e6 <__ultoa_invert+0x6c>
    8486:	e8 94       	clt
    8488:	6f 93       	push	r22
    848a:	6e 7f       	andi	r22, 0xFE	; 254
    848c:	6e 5f       	subi	r22, 0xFE	; 254
    848e:	7f 4f       	sbci	r23, 0xFF	; 255
    8490:	8f 4f       	sbci	r24, 0xFF	; 255
    8492:	9f 4f       	sbci	r25, 0xFF	; 255
    8494:	af 4f       	sbci	r26, 0xFF	; 255
    8496:	b1 e0       	ldi	r27, 0x01	; 1
    8498:	3e d0       	rcall	.+124    	; 0x8516 <__ultoa_invert+0x9c>
    849a:	b4 e0       	ldi	r27, 0x04	; 4
    849c:	3c d0       	rcall	.+120    	; 0x8516 <__ultoa_invert+0x9c>
    849e:	67 0f       	add	r22, r23
    84a0:	78 1f       	adc	r23, r24
    84a2:	89 1f       	adc	r24, r25
    84a4:	9a 1f       	adc	r25, r26
    84a6:	a1 1d       	adc	r26, r1
    84a8:	68 0f       	add	r22, r24
    84aa:	79 1f       	adc	r23, r25
    84ac:	8a 1f       	adc	r24, r26
    84ae:	91 1d       	adc	r25, r1
    84b0:	a1 1d       	adc	r26, r1
    84b2:	6a 0f       	add	r22, r26
    84b4:	71 1d       	adc	r23, r1
    84b6:	81 1d       	adc	r24, r1
    84b8:	91 1d       	adc	r25, r1
    84ba:	a1 1d       	adc	r26, r1
    84bc:	20 d0       	rcall	.+64     	; 0x84fe <__ultoa_invert+0x84>
    84be:	09 f4       	brne	.+2      	; 0x84c2 <__ultoa_invert+0x48>
    84c0:	68 94       	set
    84c2:	3f 91       	pop	r19
    84c4:	2a e0       	ldi	r18, 0x0A	; 10
    84c6:	26 9f       	mul	r18, r22
    84c8:	11 24       	eor	r1, r1
    84ca:	30 19       	sub	r19, r0
    84cc:	30 5d       	subi	r19, 0xD0	; 208
    84ce:	31 93       	st	Z+, r19
    84d0:	de f6       	brtc	.-74     	; 0x8488 <__ultoa_invert+0xe>
    84d2:	cf 01       	movw	r24, r30
    84d4:	08 95       	ret
    84d6:	46 2f       	mov	r20, r22
    84d8:	47 70       	andi	r20, 0x07	; 7
    84da:	40 5d       	subi	r20, 0xD0	; 208
    84dc:	41 93       	st	Z+, r20
    84de:	b3 e0       	ldi	r27, 0x03	; 3
    84e0:	0f d0       	rcall	.+30     	; 0x8500 <__ultoa_invert+0x86>
    84e2:	c9 f7       	brne	.-14     	; 0x84d6 <__ultoa_invert+0x5c>
    84e4:	f6 cf       	rjmp	.-20     	; 0x84d2 <__ultoa_invert+0x58>
    84e6:	46 2f       	mov	r20, r22
    84e8:	4f 70       	andi	r20, 0x0F	; 15
    84ea:	40 5d       	subi	r20, 0xD0	; 208
    84ec:	4a 33       	cpi	r20, 0x3A	; 58
    84ee:	18 f0       	brcs	.+6      	; 0x84f6 <__ultoa_invert+0x7c>
    84f0:	49 5d       	subi	r20, 0xD9	; 217
    84f2:	31 fd       	sbrc	r19, 1
    84f4:	40 52       	subi	r20, 0x20	; 32
    84f6:	41 93       	st	Z+, r20
    84f8:	02 d0       	rcall	.+4      	; 0x84fe <__ultoa_invert+0x84>
    84fa:	a9 f7       	brne	.-22     	; 0x84e6 <__ultoa_invert+0x6c>
    84fc:	ea cf       	rjmp	.-44     	; 0x84d2 <__ultoa_invert+0x58>
    84fe:	b4 e0       	ldi	r27, 0x04	; 4
    8500:	a6 95       	lsr	r26
    8502:	97 95       	ror	r25
    8504:	87 95       	ror	r24
    8506:	77 95       	ror	r23
    8508:	67 95       	ror	r22
    850a:	ba 95       	dec	r27
    850c:	c9 f7       	brne	.-14     	; 0x8500 <__ultoa_invert+0x86>
    850e:	00 97       	sbiw	r24, 0x00	; 0
    8510:	61 05       	cpc	r22, r1
    8512:	71 05       	cpc	r23, r1
    8514:	08 95       	ret
    8516:	9b 01       	movw	r18, r22
    8518:	ac 01       	movw	r20, r24
    851a:	0a 2e       	mov	r0, r26
    851c:	06 94       	lsr	r0
    851e:	57 95       	ror	r21
    8520:	47 95       	ror	r20
    8522:	37 95       	ror	r19
    8524:	27 95       	ror	r18
    8526:	ba 95       	dec	r27
    8528:	c9 f7       	brne	.-14     	; 0x851c <__ultoa_invert+0xa2>
    852a:	62 0f       	add	r22, r18
    852c:	73 1f       	adc	r23, r19
    852e:	84 1f       	adc	r24, r20
    8530:	95 1f       	adc	r25, r21
    8532:	a0 1d       	adc	r26, r0
    8534:	08 95       	ret

00008536 <__fp_split3>:
    8536:	57 fd       	sbrc	r21, 7
    8538:	90 58       	subi	r25, 0x80	; 128
    853a:	44 0f       	add	r20, r20
    853c:	55 1f       	adc	r21, r21
    853e:	59 f0       	breq	.+22     	; 0x8556 <__fp_splitA+0x10>
    8540:	5f 3f       	cpi	r21, 0xFF	; 255
    8542:	71 f0       	breq	.+28     	; 0x8560 <__fp_splitA+0x1a>
    8544:	47 95       	ror	r20

00008546 <__fp_splitA>:
    8546:	88 0f       	add	r24, r24
    8548:	97 fb       	bst	r25, 7
    854a:	99 1f       	adc	r25, r25
    854c:	61 f0       	breq	.+24     	; 0x8566 <__fp_splitA+0x20>
    854e:	9f 3f       	cpi	r25, 0xFF	; 255
    8550:	79 f0       	breq	.+30     	; 0x8570 <__fp_splitA+0x2a>
    8552:	87 95       	ror	r24
    8554:	08 95       	ret
    8556:	12 16       	cp	r1, r18
    8558:	13 06       	cpc	r1, r19
    855a:	14 06       	cpc	r1, r20
    855c:	55 1f       	adc	r21, r21
    855e:	f2 cf       	rjmp	.-28     	; 0x8544 <__fp_split3+0xe>
    8560:	46 95       	lsr	r20
    8562:	f1 df       	rcall	.-30     	; 0x8546 <__fp_splitA>
    8564:	08 c0       	rjmp	.+16     	; 0x8576 <__fp_splitA+0x30>
    8566:	16 16       	cp	r1, r22
    8568:	17 06       	cpc	r1, r23
    856a:	18 06       	cpc	r1, r24
    856c:	99 1f       	adc	r25, r25
    856e:	f1 cf       	rjmp	.-30     	; 0x8552 <__fp_splitA+0xc>
    8570:	86 95       	lsr	r24
    8572:	71 05       	cpc	r23, r1
    8574:	61 05       	cpc	r22, r1
    8576:	08 94       	sec
    8578:	08 95       	ret

0000857a <__fp_zero>:
    857a:	e8 94       	clt

0000857c <__fp_szero>:
    857c:	bb 27       	eor	r27, r27
    857e:	66 27       	eor	r22, r22
    8580:	77 27       	eor	r23, r23
    8582:	cb 01       	movw	r24, r22
    8584:	97 f9       	bld	r25, 7
    8586:	08 95       	ret

00008588 <_exit>:
    8588:	f8 94       	cli

0000858a <__stop_program>:
    858a:	ff cf       	rjmp	.-2      	; 0x858a <__stop_program>
